<?php
// $Id$

/**
 * @file
 *   Install and upgrade functionality for drupalorg.module.
 */

/**
 * Implementation of hook_install().
 *
 * Set the system weight heavier than cvslog so our form_alter comes later. 
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_install() {
  db_query("UPDATE {system} SET weight = 5 WHERE name = 'drupalorg'");
}

/**
 * Set the system weight to 1 so that it is invoked after project_usage.
 *
 * See http://drupal.org/node/327548 for more information.
 */
function drupalorg_update_1() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 1 WHERE name = 'drupalorg'");
  return $ret;
}

/**
 * Set the system weight heavier than cvslog so our form_alter comes later. 
 *
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_update_2() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 5 WHERE name = 'drupalorg'");
  return $ret;
}

/**
 * Enable modules and set some permissions and settings.
 */
function drupalorg_update_6000() {
  // Add new admin menu module and views module.
  drupal_install_modules(array('admin_menu', 'views', 'view_ui', 'apachesolr', 'site_network', 'apachesolr_search', 'apachesolr_mess_up_results'));
  
  // Segregate book block to book pages only.
  variable_set('book_block_mode', 'book pages');
  
  // Set temporary ApacheSolr settings.
  variable_set('apachesolr_host', 'solr-do.drupalfr.org');
  variable_set('apachesolr_port', '8080');
  variable_set('apachesolr_enabled_facets', array('apachesolr_search' => array('uid' => 'uid', 'type' => 'type')));
  variable_set('apachesolr_index_last', array(
    // Those values come from the test site. They will need to be tweaked to match
    // the D5 database dump we used to build the index.
    'apachesolr_search' => array(
      'last_change' => '1233245289',
      'last_nid' => '320451',
    ),
  ));

  // Enable drupal.org as a site_network server.
  variable_set('site_network_server', 1);

  // Add permissions to admins and some users.
  _drupalorg_add_permissions(array(
    'administrator' => array(
      // Contact
      'administer site-wide contact form',
      // Forum
      'delete any forum topic', 'delete own forum topics', 'edit any forum topic',
      // Nodes
      'create page content', 'create story content',
      'delete any book content', 'delete any page content', 'delete any story content',
      'delete own book content', 'delete own page content', 'delete own story content',
      'edit any page content', 'edit any story content',
      'edit own page content', 'edit own story content',
      // Project
      'browse project listings',
      // System
      'access site reports', 'administer actions', 'administer files',
      // Admin_menu
      'access administration menu', 'display drupal links',
      // Views UI for development
      'administer views'
    ),
    'anonymous' => array(
      // Project
      'browse project listings',
    ),
    'authenticated user' => array(
      // Project
      'browse project listings',
    )
  ));
  
  return array();
}

/**
 * Work around that image_update_5200() is insanely broken on Drupal 6.
 *
 * image_update_5200() tries to run a database change as if we are on the Drupal 5
 * database. We are not. So that query fails, but we need to run the good one here
 * to have the proper data.
 */
function drupalorg_update_6001() {
  $ret = array();
  // Copy image files records into the new table.
  $args = array_map('db_escape_string', array_keys(image_get_sizes()));
  $cond = " IN ('". implode("', '",  $args) ."')";
  $ret[] = update_sql("INSERT INTO {image} SELECT DISTINCT u.nid, f.fid, f.filename FROM {files} f INNER JOIN {upload} u ON f.fid = u.fid INNER JOIN {node} n ON u.nid = n.nid WHERE n.type='image' AND f.filename". $cond);
  return $ret;
}

/**
 * Migrate simplenews news items to forums.
 */
function drupalorg_update_6002() {
  $ret = array();
  // Fix one buggy newsletter post from the past and move it to the security news.
  $ret[] = update_sql('UPDATE {simplenews_newsletters} SET tid = 44 WHERE tid = 0'); 
  // Bogus existing forum IDs, which break our stuff.
  $ret[] = update_sql('DELETE FROM {forum} WHERE nid IN (25390, 27678, 29754)');
  // Add data for all newsletter posts as if they were forum topics all along.
  // This data already exists in the term_node table, so we don't need to deal with that.
  $ret[] = update_sql('INSERT INTO {forum} (nid, vid, tid) SELECT s.nid, n.vid, s.tid FROM {simplenews_newsletters} s LEFT JOIN {node} n ON s.nid = n.nid');
  // Move all newsletters to the forums, except the test newsletter.
  $ret[] = update_sql('UPDATE {term_data} SET vid = 1 WHERE vid = 4 AND tid != 121');
  // Install the lists schema.
  drupal_install_schema('lists');
  // Add rows to lists_mailman, so it stores info on all things sent, and
  // not going to resend them. Only do that for mails which we actually sent.
  // There are old but unsent mails in there, which have s_status != 2.
  $ret[] = update_sql('INSERT INTO {lists_mailman} (nid, uid, timestamp) SELECT nid, 1, NOW() FROM {simplenews_newsletters} WHERE s_status = 2');
  
  // Now that we have the forum connections set up, convert existing simplenews
  // nodes to forum nodes.
  $ret[] = update_sql("UPDATE {node} SET type = 'forum' WHERE type = 'simplenews'");

  // @todo The container for newsletters will be added manually and these three
  // newsletters will be added to it via the slick drag and drop UI.
  return $ret;
}

/**
 * Migrate polls to story nodes.
 */
function drupalorg_update_6003() {
  $ret = array();

  // Get node identifiers of all poll nodes for conversion.
  $list_result = db_query("SELECT nid FROM {node} WHERE type = 'poll'");
  while ($poll_node = db_fetch_object($list_result)) {

    // We only have one revision per poll (polls were on way before revisions),
    // so we will update their single node_revisions entry right away. Those only
    // have the teaser/body set up with asterisks for RSS purposes, as poll
    // module does by default in core, so we can replace that.
    $poll_result = db_query("SELECT * from {poll_choices} WHERE nid = %d ORDER by chorder ASC", $poll_node->nid);
    $poll_body = array();
    while ($poll_choice = db_fetch_object($poll_result)) {
      // Drupal.org uses format 1 (filtered HTML) for these nodes. It has <p>,
      // <ul>, <li>, <strong> and <i> enabled, and that is all that is needed
      // for these nodes, so we should be fine with that.
      $poll_body[] = $poll_choice->chtext .' <strong>('. $poll_choice->chvotes .' votes)</strong>';
    }
    // Tell people this is an archived poll result node, present choices and votes statically.
    $poll_body = '<p>Archived poll results:</p><ul><li>'. join('</li><li>', $poll_body) .'</li></ul>';
    db_query("UPDATE {node_revisions} SET teaser = '%s', body = '%s' WHERE nid = %d", $poll_body, $poll_body .'<!--break-->', $poll_node->nid);
  }
  
  // Now that we have the bodies and teasers, convert all poll nodes to story nodes.
  $ret[] = update_sql("UPDATE {node} SET type = 'story' WHERE type = 'poll'");
  
  return $ret;
}

/**
 * http://drupal.org/node/522906#comment-1844826
 */
function drupalorg_update_6004() {
  variable_set('cvs_received_email',
    "%account-name,\n".
    "Your CVS account request has been received.\n\n".
    "You must now go to %cvs-project-issue and upload your intended contribution.\n\n".
    "Please remember to upload your module, theme or translation in compressed format such as zip, rar or tarball.\n\n".
    "Your application cannot be processed until you have made your contribution available for review.\n\n".
    "Kind regards,\n".
    "Drupal CVS administrator.");

  variable_set('cvs_new_application_email',
   "User:\n".
   "  %user-account-url \n\n".
   "Issue:\n".
   "  %cvs-project-issue \n\n".
   "Motivation:\n".
   "  %motivation-message \n\n".
   "Client information:\n".
   "  %client-information \n");
}

/**
 * Utility function to add permissions to certain user roles.
 */
function _drupalorg_add_permissions($permissions) {
  foreach ($permissions as $role => $grants) {
    if (is_string($role)) {
      $role = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", $role));
    }
    if ($role) {
      $authz = db_result(db_query('SELECT perm FROM {permission} WHERE rid = %d', $role));
      if (empty($authz)) {
        // No permission record yet.
        db_query("INSERT INTO {permission} (perm, rid) VALUES ('%s', %d)", join(', ', $grants), $role);
      }
      else {
        // Existing permission record. 
        $authz_changed = FALSE;
        foreach ($grants as $grant) {
          if (strpos($authz, $grant) === FALSE) {
            $authz .= ', '. $grant;
            $authz_changed = TRUE;
          }
        }
        if ($authz_changed) {
          db_query("UPDATE {permission} SET perm = '%s' WHERE rid = %d", $authz, $role);
        }
      }
    }
  }
}
