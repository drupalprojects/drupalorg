<?php
// $Id$

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * Release node ids for issues we're currently tracking (Drupal 7).
 */
define('ISSUE_RIDS', '156281');

/**
 * The CVS user role. Added to users with a CVS account.
 */
define('DRUPALORG_CVS_USER_ROLE', 8);

/**
 * The required simplenews newsletter tid for CVS account holders.
 */
define('DRUPALORG_CVS_NEWSLETTER', 118);

/**
 * URL for the Drupal Security Team.
 */
define('DRUPALORG_SECURITY_TEAM_URL', 'http://drupal.org/security-team');

/**
 * URL for links to contact the security team
 */
define('DRUPALORG_SECURITY_CONTACT_URL', 'http://drupal.org/security-team#report-issue');

/**
 * URL for the handbook page that describes the "Release type" vocabulary.
 */
define('DRUPALORG_RELEASE_TYPE_HANDBOOK_URL', 'http://drupal.org/handbook/cvs/releases/types#type');

/**
 * URL specifically to describe the "Security update" term.
 * For now, the general page for release types is the best we've got.
 */
define('DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL', DRUPALORG_RELEASE_TYPE_HANDBOOK_URL);

/**
 * Vocabulary used for news forum topic tagging.
 */
define('DRUPALORG_NEWS_VID', 34);

// == Basic core hooks =========================================================

function drupalorg_menu() {
  $items = array();

  $items['aggregator_cron'] = array(
    'title' => 'Aggregator cron run',
    'page callback' => 'aggregator_not_cron',
    'access callback' => 'drupalorg_is_cli',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function drupalorg_is_cli() {
  return $_SERVER['SERVER_SOFTWARE'] === 'PHP CLI';
}

/**
 * Implementation of hook_help().
 */
function drupalorg_help($path, $arg) {
  switch ($path) {
    case 'project/usage':
      return '<p>'. t('These statistics are incomplete; only Drupal websites using the <a href="!update_status_url">Update Status</a> module are included in the data. As this module is now included with the download of Drupal since version 6.x, the data is heavily biased toward newer sites. <a href="!usage_description_url">Read more information about how these statistics are calculated.</a>', array('!update_status_url' => url('project/update_status'), '!usage_description_url' => url('node/329620'))) .'</p>';
  }

  if ($arg[0] == 'project' && strtolower($arg[1]) == 'modules') {
    return t('You can also view an <a href="@list_url">Alphabetical list of Projects</a> that includes all projects but only their names.', array('@list_url' => url('node/206666')));
  }
  if ($arg[0] == 'project' && $arg[1] == 'issues-term' && $arg[2] == '346') {
    return '<p>'. t('A more detailed overview of the issues can be seen in the Community Initiatives handbook section titled <a href="http://drupal.org/node/362117">Upgrade Drupal.org from Drupal 5 to 6</a>.') .'</p>';
  }
}

/**
 * Implementation of hook_cron().
 */
function drupalorg_cron() {
  drupalorg_issue_counts();
}

// == Issue counter ============================================================

/**
 * Pulls issue counts for various issue queues on drupal.org.
 *
 * Summarize issue counts for different types of issues for ISSUE_RIDS releases.
 */
function drupalorg_issue_counts() {
  $issue_counts['Pending bugs'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND category = 'bug' AND sid = 1 AND priority IN (1,2) AND rid IN (". ISSUE_RIDS .")"));
  $issue_counts['Critical issues'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND category IN ('bug', 'task') AND sid IN (1,8,13,14) AND priority = 1 AND rid IN (". ISSUE_RIDS .")"));
  $issue_counts['Patch queue'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND sid IN (8,13,14) AND rid IN (". ISSUE_RIDS .")"));
  $issue_counts['Patches to review'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND sid IN (8) AND rid IN (". ISSUE_RIDS .")"));
  variable_set('drupalorg_issue_counts', $issue_counts);
}

// == Altering of various forms ================================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // List of forms to check for overrides, and the corresponding permissions.
  $override_forms = array(
    'book_node_form'       => 'edit book pages',
    'forum_node_form'      => 'administer nodes',
    'page_node_form'       => 'administer nodes',
    'simplenews_node_form' => 'create newsletter',
    'story_node_form'      => 'administer nodes',
  );
  // Override the access for attachments if it's a forbidden form,
  // and the user does not have sufficient permissions.
  if (in_array($form_id, array_keys($override_forms)) && !user_access($override_forms[$form_id])) {
    if (isset($form['attachments']['#access'])) {
      $form['attachments']['#access'] = FALSE;
    }
  }

  // Add a description for the Priority and Status values.
  if ($form_id == 'project_issue_node_form' || $form_id == 'comment_form' && !empty($form['original_issue']['issue_info'])) {
    $priority_status_description = array(
      // The "standard" class adds a clear so the description is positioned
      // below the floated pull-downs.  "fieldset-description" is from
      // bluebeach to make the font size smaller.
      '#prefix' => '<div class="standard fieldset-description">',
      '#value' => t('Descriptions of the <a href="!priority_url">Priority</a> and <a href="!status_url">Status</a> values can be found in the <a href="!issue_queue_url">Issue queue handbook</a>.', array('!priority_url' => '/node/45111', '!status_url' => '/node/156119', '!issue_queue_url' => '/node/317')),
      '#suffix' => '</div>',
    );
  }

  // Make the "Issue tags" vocabulary not so prominent on issue nodes.
  if ($form_id == 'project_issue_node_form' || 
      ($form_id == 'comment_form' && !empty($form['original_issue']['issue_info']))) {
    $form['taxonomy']['#type'] = 'fieldset';
    $form['taxonomy']['#title'] = t('Tags');
    $form['taxonomy']['#collapsible'] = TRUE;
    $form['taxonomy']['#collapsed'] = TRUE;
    // We want this fieldset at the very bottom, just above the buttons, but
    // we need different weights for that depending on if it's a new issue or
    // a follow-up comment.
    if ($form_id == 'project_issue_node_form') {
      $form['taxonomy']['#weight'] = 35;
      $form['issue_info']['description'] = $priority_status_description;
    }
    else {
      $form['taxonomy']['#weight'] = 4;
      $form['original_issue']['issue_info']['description'] = $priority_status_description;
    }
  }

  // Add security update related checks to release forms.
  if ($form_id == 'project_release_node_form') {
    drupalorg_project_release_node_form_alter($form, $form_state);
  }
  
  // Add CVS maintainer newsletter signup to users when getting a CVS account.
  if ($form_id == 'cvs_user_edit_form') {
    $form['#submit'][] = 'drupalorg_cvs_user_edit_submit';
  }
    
  // Deprecate the "license" field, as it must always be GPLv2+ anyway.
  if ($form_id == 'project_project_node_form') {
    if (! $form['project']['license']['#default_value']) {
       $form['project']['license'] = array(
        '#type' => 'item',
        '#title' => $form['project']['license']['#title'],
        '#value' => t('<a href="@link_url">@link_name</a>', array(
          '@link_url' => CVS_LICENSE_LINK,
          '@link_name' => CVS_LICENSE,
        )),
      );
    }
  }
  
  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }
  
  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }
  
  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }
  
  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }
  
  // Force a revision log entry when editing existing book nodes.
  if ($form_id == 'book_node_form' && isset($form['revision_information']['log']) && arg(1) != 'add') {
    $form['revision_information']['log']['#required'] = TRUE;
    $form['revision_information']['#collapsed'] = FALSE;
  }

  // Remove the news vocabulary on forum forms, if the user is not an admin.
  // Used to mark news forum topics with tags.
  if ($form_id == 'forum_node_form') {
    $form['taxonomy'][DRUPALORG_NEWS_VID]['#access'] = user_access('administer nodes'); 
  }
}

// == Security release restrictions ============================================

/**
 * Alter release node forms properly for security updates.
 *
 * Ensure that only privileged users can modify a security release tag and when
 * people add this tag, they get to know about the process.
 */
function drupalorg_project_release_node_form_alter(&$form, $form_state) {
  if (!empty($form['taxonomy'])) {
    $vid = drupalorg_get_release_type_vid();
    $security_tid = drupalorg_get_security_update_tid();
    if (!empty($form['taxonomy'][$vid])) {
      $form['taxonomy'][$vid]['#weight'] = 10;
      if (empty($form['nid']['#value'])) {
        // Adding a new release.
        if (!empty($form['project_release']['rebuild']['#value'])) {
          // This is a -dev, don't let anyone mark it a security update.
          _drupalorg_remove_security_update($form);
        }
        else {
          // Regular release
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL));
          // Add wrapper div for js/drupal.release.node.js
          $form['taxonomy'][$vid]['#prefix'] = '<div class="release-type-select">';
          $form['taxonomy'][$vid]['#suffix'] = '</div>';
          $form['#validate'][] = 'drupalorg_security_release_form_validate';
          $confirm_class = 'security-update-confirm';
          // Hide the confirmation checkbox on page load unless 'Security
          // update' is already selected.
          if (empty($form_state['values']['taxonomy'][$vid]) || (array_search($security_tid, $form_state['values']['taxonomy'][$vid]) === FALSE)) {
            $confirm_class .= ' js-hide';
          }
          $form['security_update_confirm'] = array(
            '#type' => 'checkbox',
            '#title' => t('Are you sure you want to mark this release as a <a href="@security_update_url">Security update</a>?', array('@security_update_url' => DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL)),
            '#prefix' => '<div class="'. $confirm_class .'">',
            '#suffix' => '</div>',
            '#weight' => -2,
            '#description' => t('If you select %security_update, your release will not be published without the manual intervention of the <a href="@security_url">Drupal Security Team</a>. You should have already <a href="@contact_url">contacted the Security Team</a> to coordinate a security advisory (SA) for your release before you committed any security-related patches.', array('%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL)),
            '#default_value' => !empty($form_state['values']['security_update_confirm']),
          );
          $drupalorg_path = drupal_get_path('module', 'drupalorg');
          drupal_add_js($drupalorg_path .'/js/drupalorg.release_node.js');
          drupal_add_css($drupalorg_path .'/drupalorg.css');
        }
      }
      else {
        // Editing an existing release.
        if (array_search($security_tid, $form['taxonomy'][$vid]['#default_value']) !== FALSE) {
          // If this release is already marked as a Security update, don't
          // let regular users change it any futher.
          if (!user_access('administer projects')) {
            $form['taxonomy'][$vid]['#disabled'] = TRUE;
            $form['taxonomy'][$vid]['#value'] = $form['taxonomy'][$vid]['#default_value'];
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a> Since this release is already marked as a %security_update, you can no longer change the release type. If you believe you need to do so for some reason, you should <a href="@contact_url">contact</a> the <a href="@security_url">Drupal Security Team</a>.', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL, '%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL));
        }
        else {
          // Not a Security update, remove that option entirely if this is
          // either a -dev snapshot or a non-admin user.
          if (!empty($form['#node']->rebuild) || !user_access('administer projects')) {
            _drupalorg_remove_security_update($form);
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL));
        }
      }
    }
  }
}

/**
 * Utility function to remove the security update term on node forms.
 */
function _drupalorg_remove_security_update(&$form) {
  $vid = drupalorg_get_release_type_vid();
  $security_tid = drupalorg_get_security_update_tid();
  foreach ($form['taxonomy'][$vid]['#options'] as $i => $option) {
    if (!empty($option->option)) {
      $tid = key($option->option);
      if ($tid == $security_tid) {
        unset($form['taxonomy'][$vid]['#options'][$i]);
        return;
      }
    }
  }
}

/**
 * Set the project_release_type_vid Drupal variable and return its value.
 */
function drupalorg_get_release_type_vid() {
  static $vid = 0;
  if (empty($vid)) {
    $vid = variable_get('project_release_type_vid', 0);
    if (empty($vid)) {
      $vid = db_result(db_query("SELECT v.vid FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = 'project_release' AND v.name = 'Release type'"));
      variable_set('project_release_type_vid', $vid);
    }
  }
  return $vid;
}

/**
 * Set the project_release_type_security_update_tid Drupal variable and return its value.
 */
function drupalorg_get_security_update_tid() {
  static $tid = 0;
  if (empty($tid)) {
    $tid = variable_get('project_release_type_security_update_tid', 0);
    if (empty($tid)) {
      $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d AND name = '%s'", drupalorg_get_release_type_vid(), 'Security update'));
      variable_set('project_release_type_security_update_tid', $tid);
    }
  }
  return $tid;
}

/**
 * Form validation function for security release tag check.
 */
function drupalorg_security_release_form_validate($form, &$form_state) {
  $vid = drupalorg_get_release_type_vid();
  $security_tid = drupalorg_get_security_update_tid();
  if (!empty($form_state['values']['taxonomy'][$vid][$security_tid]) && empty($form_state['values']['security_update_confirm'])) {
    // Ensure the user confirms that this release should be marked security.
    form_set_error('security_update_confirm', t('You must confirm you want this release to be a <a href="@security_update_url">Security update</a>', array('@security_update_url' => DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL)));
  }
}

// == CVS maintainer housekeeping ==============================================

/**
 * Add the user to the CVS maintainer role, when she gets an account.
 */
function drupalorg_cvs_user_edit_submit($form, &$form_state) {
  global $language;

  if (isset($form_state['values']['cvs_status'])) {
    $account = user_load(array('uid' => $form_state['values']['cvs_uid']));
    switch ($form_state['values']['cvs_status']) {
      case CVS_APPROVED:
        db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $form_state['values']['cvs_uid'], DRUPALORG_CVS_USER_ROLE);
        break;
      case CVS_DISABLED:
        db_query('DELETE FROM {users_roles} WHERE uid = %d AND rid = %d', $form_state['values']['cvs_uid'], DRUPALORG_CVS_USER_ROLE);
        break;
    }
    // Clear cache for this user, so that the user will see new functionality.
    cache_clear_all($form_state['values']['cvs_uid'] .':'. $language->language, 'cache_menu');
  }
}

// == User form validations ====================================================

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_result(db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER('%s')", $match[1] .'+%%@'. $match[3])) > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 * @todo Headers are blocked by some providers so this is not accurate.
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = '%s' AND status = %d", 'homepage', 0);
    $masks = array();
    while ($mask = db_fetch_object($result)) {
      // Build masks array for preg_matching.
      $masks[] = '@'. strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) .'@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
    // Did not work due to several hosts rewriting headers.
    /*if (!user_access('administer users')) {
      // Check for Drupal-ness of website. Try only once.
      $response = drupal_http_request($form_state['values']['homepage'], array(), 'GET', NULL, 1);
      if ($response->headers['Expires'] != 'Sun, 19 Nov 1978 05:00:00 GMT') {
        form_set_error('homepage', t("Your website does not seem to be a Drupal site. If you think we are wrong, please open an issue in the webmasters' queue."));
      }
    }*/
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

// == Project links ============================================================

/**
 * Implemenation of hook_project_page_link_alter().
 */
function drupalorg_project_page_link_alter(&$links, $node) {
  // #310446: Alter issue queue links to view issues of all categories.
  if (isset($links['support']['links']['pending_support'])) {
    $prepend = array(
      'open_issues' => l(t('View open issues or create one'), 'project/issues/'. $node->project['uri']),
      'all_issues' => l(t('View all issues'), 'project/issues/'. $node->project['uri'], array('query' => 'status=All')),
    );
    $links['support']['links'] = $prepend + $links['support']['links'];
    unset($links['support']['links']['pending_support']);
    unset($links['support']['links']['pending_bugs']);
    unset($links['support']['links']['pending_features']);
    unset($links['development']['links']['pending_issues']);
  }
  // #310446: Remove issue creation links to avoid duplicate issues.
  if (isset($links['support']['links']['request_support'])) {
    unset($links['support']['links']['request_support']);
    unset($links['support']['links']['report_bug']);
    unset($links['support']['links']['request_feature']);
  }
  if (isset($links['support']['links']['create_forbidden'])) {
    unset($links['support']['links']['create_forbidden']);
  }
  // Link to security handbook page.
  $links['support']['links']['report_security_issue'] = l(t('Report a security issue'), 'security-team');
}

// == External search block ====================================================

/**
 * Implementation of hook_block().
 *
 * @todo Hopefully remove as part of search migration.
 */
function drupalorg_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array('info' => t('External/Alternate Search Advice (only when search is disabled)'),
      'weight' => 0, 'enabled' => 0, 'region' => 'header');
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array('subject' => t('Search Engine'),
          'content' => drupalorg_display_block_external_search());
        break;
    }
    return $block;
  }
}

/**
 * Body for external search block.
 */
function drupalorg_display_block_external_search() {
  if (!user_access('search content')) {
    $form = '<form method="get" action="http://www.google.com/search"><div>
               <input type="hidden" name="ie" value="UTF-8" />
               <input type="hidden" name="oe" value="UTF-8" />
               <input type="hidden" name="domains" value="drupal.org" />
               <input type="hidden" name="sitesearch" value="drupal.org" />
               <input type="text" class="form-text" name="q" size="20" maxlength="255" value="" />
               <input type="submit" class="form-submit" name="btnG" value="Google Search" /></div>
               </form>';
    $message = '<p>Due to load issues the Drupal.org search occasionally has to be disabled.  When this happens, you can use external search engines and a modifier like "site:drupal.org" to refine your results to Drupal.  For more information <a href="http://drupal.org/node/271694">see the infrastructure queue</a></p>.';
    return $form . $message;
  }
}

// == IRC nick search ==========================================================

/**
 * Implementation of hook_search().
 *
 * Add support for searching for users based on the fixed IRC nickname field.
 *
 * @todo Possibly remove as part of search migration.
 */
function drupalorg_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('IRC nicks');
      }
    case 'search':
      if (user_access('access user profiles')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $result = pager_query("SELECT u.name, u.uid FROM {profile_values} pv INNER JOIN {users} u ON pv.uid = u.uid WHERE pv.fid = 35 AND LOWER(pv.value) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array('title' => $account->name, 'link' => url('user/'. $account->uid, array('html' => TRUE)));
        }
        return $find;
      }
  }
}

// == Utility functions ========================================================

/**
 * Project issue URL generator for Drupal issues.
 *
 * @param $query
 *   Array of array of options to pass on in the URL:
 *     - version (array of release node ids)
 *     - status (array of status ids)
 *     - priorities (array of prioristy ids)
 *     - categories (array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_drupal_issue_url($query = array(), $absolute = FALSE) {
  return url('project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}
