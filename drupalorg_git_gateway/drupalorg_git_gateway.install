<?php

/**
 * @file
 * Installation, schema, update and uninstall scripts for the d.o Git gateway.
 */

/**
 * Implements hook_schema().
 */
function drupalorg_git_gateway_schema() {
  $schema = array(
    'drupalorg_git_consent_log' => array(
      'fields' => array(
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'The uid of the user whose consent action is being logged.',
        ),
        'timestamp' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Timestamp indicating when this consent action occurred.',
        ),
        'action' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The consent action - 1 if the user added their consent to the Git ToS, 0 if the user removed their consent.',
        ),
      ),
      'indexes' => array(
        'uid' => array('uid'),
      ),
    ),
    'drupalorg_git_disable_log' => array(
      'fields' => array(
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'The uid of the user whose account is being disabled or re-enabled.',
        ),
        'admin_uid' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'The uid of the admin who performing the enabling/disabling action.',
        ),
        'timestamp' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Timestamp indicating when this consent action occurred.',
        ),
        'action' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The action - 1 if the admin is disabling the account, 0 if the admin is re-enabling the account.',
        ),
        'email' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'Record the customizable body of the e-mail notification.',
        ),
      ),
      'indexes' => array(
        'uid' => array('uid'),
        'admin_uid' => array('admin_uid'),
      ),
    ),
    'drupalorg_git_push_log' => array(
      'fields' => array(
        'push_id' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Primary serial key corresponding to this push event.',
        ),
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'The uid of the user who initiated the push.',
        ),
        'timestamp' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Timestamp indicating when the push occurred.',
        ),
        'repo_id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'Repository ID of the repository that received the push.',
        ),
      ),
      'primary key' => array('push_id'),
      'indexes' => array(
        'uid' => array('uid'),
        'repo_id' => array('repo_id'),
      ),
    ),
    'drupalorg_git_push_log_refs' => array(
      'fields' => array(
        'push_id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Foreign key to {drupalorg_git_push_log}.push_id.',
        ),
        'refname' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'The name of the ref that was updated.',
        ),
        'reftype' => array(
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => '1 == branch, 2 == tag.',
        ),
        'old_obj' => array(
          'type' => 'char',
          'length' => 40,
          'not null' => TRUE,
          'description' => 'The object to which this ref pointed before the push.',
        ),
        'new_obj' => array(
          'type' => 'char',
          'length' => 40,
          'not null' => TRUE,
          'description' => 'The object to which this ref pointed after the push.',
        ),
      ),
      'primary key' => array('push_id', 'refname'),
      'indexes' => array(
        'old_obj' => array('old_obj'),
        'new_obj' => array('new_obj'),
      ),
    ),
  );

  return $schema;
}

/**
 * Alter the {users} table schema to add our git-related fields.
 *
 * @param array $schema
 */
function drupalorg_git_gateway_schema_alter(&$schema) {
  $schema['users']['fields']['git_username'] = array(
    'description' => 'The Git username associated with this user account.',
    'length' => 64,
    'type' => 'varchar',
  );
  $schema['users']['fields']['git_consent'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Bool flag indicating whether the user has consented to the VCS terms of service.',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['users']['fields']['git_vetted'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Bool flag indicating whether the user been marked as "vetted" or not.',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['users']['fields']['git_disabled'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Bool flag indicating whether the user has had their git access disabled by an admin.',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['users']['unique keys']['git_username'] = array('git_username');
  $schema['users']['indexes']['git_consent'] = array('git_consent');
  $schema['users']['indexes']['git_disabled'] = array('git_disabled');
  $schema['users']['indexes']['git_vetted'] = array('git_vetted');
}

/**
 * Implements hook_install().
 */
function drupalorg_git_gateway_install() {
  // Perform alterations on the {users} table.
  $specs = array(
    'git_username' => array(
      'description' => 'The Git username associated with this user account.',
      'length' => 64,
      'type' => 'varchar',
    ),
    'git_consent' => array(
      'type' => 'int',
      'size' => 'tiny',
      'description' => 'Bool flag indicating whether the user has consented to the VCS terms of service.',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
    'git_vetted' => array(
      'type' => 'int',
      'size' => 'tiny',
      'description' => 'Bool flag indicating whether the user been marked as "vetted" or not.',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
    'git_disabled' => array(
      'type' => 'int',
      'size' => 'tiny',
      'description' => 'Bool flag indicating whether the user has had their git access disabled by an admin.',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  foreach ($specs as $field => $spec) {
    $index = array(($field == 'git_username' ? 'unique keys' : 'indexes') => array($field => array($field)));
    db_add_field('users', $field, $spec, $index);
  }

  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'drupalorg_git_gateway')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function drupalorg_git_gateway_uninstall() {
  // Remove alterations to the {users} table.
  foreach (array('git_username', 'git_consent', 'git_disabled', 'git_vetted') as $field) {
    // Indexes probably take care of themselves, but eh, why not...
    // db_drop_index($fakeret, 'users', $field);
    db_drop_field('users', $field);
  }
}
