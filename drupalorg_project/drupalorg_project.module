<?php

/**
 * @file
 *   Customizations related to the Project* modules used on drupal.org.
 */

/**
 * Drupal core compatibility term name for current development version.
 */
define('DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME', '8.x');

/**
 * Current Drupal core development version compatibility term ID.
 */
define('DRUPALORG_CORE_DEVELOPMENT_VERSION_TID', '7234');

/**
 * Drupal core compatibility term name for latest stable release.
 */
define('DRUPALORG_CORE_STABLE_VERSION_NAME', '7.x');

/**
 * Drupal core compatibility term ID for latest stable release.
 */
define('DRUPALORG_CORE_STABLE_VERSION_TID', '103');

/**
 * Project categories vocabulary ID.
 */
define('DRUPALORG_PROJECT_CATEGORIES_VID', '3');

/**
 * URL for the Drupal Security Team.
 */
define('DRUPALORG_SECURITY_TEAM_URL', 'http://drupal.org/security-team');

/**
 * URL for links to contact the security team
 */
define('DRUPALORG_SECURITY_CONTACT_URL', 'http://drupal.org/security-team#report-issue');

/**
 * URL specifically to describe the "Security update" term.
 * For now, the general page for release types is the best we've got.
 */
define('DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID', 1025122);

/**
 * Defaults for project_project_node_form
 */
define('DRUPALORG_DEFAULT_LICENSE', 'GNU General Public License, version 2 or later');
define('DRUPALORG_DEFAULT_LICENSE_LINK', 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.html');


/**
 * Implementation of hook_menu().
 */
function drupalorg_project_menu() {
  $items['sandbox/%/%node'] = array(
    // Modeled on $items['node/%node'] will pass through
    'title callback'     => 'node_page_title',
    'title arguments'    => array(2),
    'page callback'      => 'drupalorg_project_sandbox',
    'page arguments'     => array(2),
    'access callback'    => 'node_access',
    'access arguments'   => array('view', 2),
    'type'               => MENU_CALLBACK,
  );
  $items['project/%project/maintainers.json'] = array(
    'page callback' => 'drupalorg_maintainers_json',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  // Callbacks to process legacy urls.
  $map = array(
    'project/modules' => 'project_module',
    'project/themes' => 'project_theme',
    'project/distributions' => 'project_distribution',
    'project/theme engines' => 'project_theme_engine',
    'project/drupal.org projects' => 'project_drupalorg',
    'project/translations' => 'project_translation',
    'project/drupal core' => 'project_core',
  );
  foreach ($map as $k => $v) {
    $items[$k] = array(
      'title' => 'Redirect',
      'type' => MENU_CALLBACK,
      'page callback' => '_drupalorg_project_legacy_solr_redirect',
      'page arguments' => array($v),
      'access arguments' => array('access content'),
    );
  }

  return $items;
}

/**
 * Menu callback to map legacy project solr urls to the D7 equivilent.
 */
function _drupalorg_project_legacy_solr_redirect($type, $text = '') {
  $params = drupal_get_query_parameters();

  // Trailing argument in D6 was textual search param.
  if (!empty($text)) {
    $params['text'] = $text;
  }

  // D6 to D7 mapping of parameters.
  if (isset($params['f'])) {
    $f = array();
    $dummy = array();
    $form = drupalorg_browse_projects_form([], $dummy, node_type_load($type));

    foreach ($params['f'] as $k => $v) {
      // Sandbox remap
      if (strpos($v, ':') !== FALSE) {
        list($field, $value) = explode(':', $v);
        if ($field === 'bs_project_sandbox') {
          if ($value === '0') {
            $v = 'sm_field_project_type:full';
          }
          elseif ($value === '1') {
            $v = 'sm_field_project_type:sandbox';
          }
          else {
            $v = 'sm_field_project_type:[* TO *]';
          }
        }
      }
      // Map to specific f[] elements so the select boxes pass form API
      // validation.
      foreach (element_children($form['f']) as $element) {
        if (isset($form['f'][$element]['#options'][$v])) {
          $f[$element] = $v;
        }
      }
    }
    $params['f'] = $f;
  }

  // Unset invalid solr sort.
  if (isset($params['solrsort']) && !isset($form['solrsort']['#options'][$params['solrsort']])) {
    unset($params['solrsort']);
  }

  drupal_goto('project/' . $type, array('query' => $params), 301);
}

/**
 * Implementation of hook_help().
 */
function drupalorg_project_help($path, $arg) {
  switch ($path) {
    case 'project/usage':
    case 'project/usage/%':
      return '<p>'. t('These statistics are incomplete; only Drupal websites using the <a href="!update_status_url">Update Status</a> module are included in the data. This module has been included with the download of Drupal since version 6.x so the data does not include older sites. <a href="!usage_description_url">Read more information about how these statistics are calculated.</a>', array('!update_status_url' => url('project/update_status'), '!usage_description_url' => url('node/329620'))) .'</p>';
  }

  if ($arg[0] == 'project' && $arg[1] == 'issues-term' && $arg[2] == '346') {
    return '<p>'. t('A more detailed overview of the issues can be seen in the Community Initiatives handbook section titled <a href="http://drupal.org/node/362117">Upgrade Drupal.org from Drupal 5 to 6</a>.') .'</p>';
  }
}

/**
 * Implementation of hook_cron().
 */
function drupalorg_project_cron() {
  drupalorg_project_issue_counts();
}

/**
 * Count number of issues in various issue queues on Drupal.org.
 *
 * This function only counts issues for core releases that we're currently
 * tracking.
 *
 * @see drupalorg_project_bingo_block_output()
 */
function drupalorg_project_issue_counts() {
  // Fetch version strings for the development and main versions.
  $api_vocabulary = taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary', ''));
  $versions = array();
  foreach (project_release_query_releases(DRUPALORG_CORE_NID, array(DRUPALORG_CORE_DEVELOPMENT_VERSION_TID, DRUPALORG_CORE_STABLE_VERSION_TID)) as $release) {
    $versions[$release->{'taxonomy_' . $api_vocabulary->machine_name}[LANGUAGE_NONE][0]['tid']][] = $release->field_release_version[LANGUAGE_NONE][0]['value'];
  }
  // Fetch issue counts for the current development release, and a combined
  // count for the development release and the latest stable release.
  $versions = array(
    'main' => $versions[DRUPALORG_CORE_DEVELOPMENT_VERSION_TID],
    'both' => array_merge($versions[DRUPALORG_CORE_DEVELOPMENT_VERSION_TID], $versions[DRUPALORG_CORE_STABLE_VERSION_TID]),
  );

  // Include only open, non-fixed issue statuses.
  $threshold_statuses = drupalorg_project_threshold_statuses();

  foreach ($versions as $version => $issue_versions) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->entityCondition('bundle', project_issue_issue_node_types())
      ->fieldCondition('field_project', 'target_id', DRUPALORG_CORE_NID)
      ->fieldCondition('field_issue_version', 'value', $issue_versions)
      ->count();

    $q = clone $query;
    $issue_counts[$version]['Critical issues'] = $q
      ->fieldCondition('field_issue_status', 'value', $threshold_statuses)
      ->fieldCondition('field_issue_priority', 'value', 400) // Critical
      ->fieldCondition('field_issue_category', 'value', array(1, 2, 3, 5)) // Exclude support requests.
      ->execute();
    $q = clone $query;
    $issue_counts[$version]['Major issues'] = $q
      ->fieldCondition('field_issue_status', 'value', $threshold_statuses)
      ->fieldCondition('field_issue_priority', 'value', 300) // Major
      ->fieldCondition('field_issue_category', 'value', array(1, 2, 3, 5)) // Exclude support requests.
      ->execute();
    $q = clone $query;
    $issue_counts[$version]['Patch queue'] = $q
      ->fieldCondition('field_issue_status', 'value', array(8, 13, 14)) // Open
      ->execute();
    $q = clone $query;
    $issue_counts[$version]['Pending bugs'] = $q
      ->fieldCondition('field_issue_status', 'value', array(1, 8, 13, 14, 15)) // Open
      ->fieldCondition('field_issue_category', 'value', 1) // Bug
      ->execute();
  }
  $query = new EntityFieldQuery();
  $issue_counts['Novice issues'] = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->entityCondition('bundle', project_issue_issue_node_types())
    ->fieldCondition('field_issue_status', 'value', array(1, 8, 13)) // Open
    ->fieldCondition('taxonomy_vocabulary_9', 'tid', 772) // Novice
    ->count()->execute();

  variable_set('drupalorg_project_issue_counts', $issue_counts);
}

/**
 * Implements hook_field_group_pre_render_alter().
 *
 * Injects custom help text to the issue settings fieldset on issue nodes.
 */
function drupalorg_project_field_group_pre_render_alter(&$element, $group, &$form) {
  if ($group->group_name == 'group_issue_metadata') {
    $element['drupalorg-issue-description'] = array(
      '#weight' => 10,
      '#prefix' => '<div class="description">',
      '#markup' =>  t('Descriptions of the <a href="!priority_url">Priority</a> and <a href="!status_url">Status</a> values can be found in the <a href="!issue_queue_url">Issue queue handbook</a>.', array('!priority_url' => '/node/45111', '!status_url' => '/node/156119', '!issue_queue_url' => '/node/317')),
      '#suffix' => '</div>',
    );
  }
}

/**
 * Alter the project_issue_node_form form.
 */
function drupalorg_project_form_project_issue_node_form_alter(&$form, $form_state) {
  // Prefill values from $_GET.
  if (isset($_GET['version'])) {
    $form['field_issue_version'][LANGUAGE_NONE]['#default_value'] = $_GET['version'];
  }
  if (isset($_GET['component'])) {
    $form['field_issue_component'][LANGUAGE_NONE]['#default_value'] = array($_GET['component']);
  }
  if (isset($_GET['categories'])) {
    $category_map = array(
      'bug' => 1,
      'task' => 2,
      'feature' => 3,
      'support' => 4,
    );
    if (!empty($category_map[$_GET['categories']])) {
      $category = $category_map[$_GET['categories']];
    }
    else {
      $category = (int)$_GET['categories'];
    }
    $form['field_issue_category'][LANGUAGE_NONE]['#default_value'] = array($category);
  }
  if (isset($_GET['priorities'])) {
    $form['field_issue_priority'][LANGUAGE_NONE]['#default_value'] = $_GET['priorities'];
  }
  if (isset($_GET['assigned'])) {
    $form['field_issue_assigned'][LANGUAGE_NONE]['#default_value'] = array((int)$_GET['assigned']);
  }
  if (isset($_GET['status'])) {
    $form['field_issue_status'][LANGUAGE_NONE]['#default_value'] = array((int)$_GET['status']);
  }
  if (isset($_GET['title'])) {
    $form['title']['#default_value'] = $_GET['title'];
  }
  if (isset($_GET['body'])) {
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = $_GET['body'];
  }
  if (isset($_GET['tags'])) {
    $form['taxonomy_vocabulary_9'][LANGUAGE_NONE]['#default_value'] = $_GET['tags'];
  }
  // For issue cloning, the body length tends to run straight into request size
  // limits.
  if (!empty($_GET['clone_body']) && is_numeric($_GET['field_issue_parent'])) {
    try {
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = entity_metadata_wrapper('node', $_GET['field_issue_parent'])->body->value->raw();
    }
    catch (EntityMetadataWrapperException $e) { }
  }
}

/**
 * Alter the project_issue_notification_user_form form.
 *
 * Since drupal.org has so many projects, it'd be insane to allow people to
 * get e-mail notifications for all issues for all projects. Remove that
 * option entirely on the per-user notification settings form.
 */
function drupalorg_project_form_project_issue_notification_user_form_alter(&$form, $form_state) {
  unset($form['projects']['default']['level']['#options'][PROJECT_ISSUE_NOTIFICATION_ALL]);
}

/**
 * Implements hook_node_insert().
 */
function drupalorg_project_node_insert(stdClass $node) {
  _drupalorg_project_update_project_cache($node);
}

/**
 * Implements hook_node_update().
 */
function drupalorg_project_node_update(stdClass $node) {
  _drupalorg_project_update_project_cache($node);
}

/**
 * @param $node
 *
 * Private function to reset the project release table when an issue related to
 * its D8 contrib_tracker status is updated.
 */
function _drupalorg_project_update_project_cache(stdClass $node) {
  if (project_issue_node_is_issue($node) && isset($node->field_project[LANGUAGE_NONE][0]['target_id']) && $node->field_project[LANGUAGE_NONE][0]['target_id'] == 2573607 && preg_match('/^\[([a-zA-Z0-9_]+)\]/', $node->title, $match)) {
    if ($project = project_load($match[1])) {
      project_release_download_table($project->nid, TRUE);
    }
  }
}

/**
 * Alter release node forms properly for security updates.
 *
 * Ensure that only privileged users can modify a security release tag and when
 * people add this tag, they get to know about the process.
 */
function drupalorg_project_form_node_form_alter(&$form, &$form_state) {
  if (project_node_is_project($form_state['node'])) {
    $wrapper = entity_metadata_wrapper('node', $form_state['node']);
    // Deprecate the "license" field, as it must always be GPLv2+ anyway.
    $form['field_project_license']['#access'] = FALSE;
    $form['field_project_license'][LANGUAGE_NONE][0]['#default_value']['url'] = DRUPALORG_DEFAULT_LICENSE_LINK;
    $form['field_project_license'][LANGUAGE_NONE][0]['#default_value']['title'] = DRUPALORG_DEFAULT_LICENSE;

    // Do not allow users to disable releases once a release has been created.
    if (!user_access('administer projects') && !empty($form_state['node']->field_project_has_releases[LANGUAGE_NONE][0]['value'])) {
      $releases = project_release_query_releases($form_state['node']->nid);
      if (!empty($releases)) {
        $form['field_project_has_releases']['#disabled'] = TRUE;
      }
    }

    // Validate full project short name.
    $language = $form['field_project_machine_name']['#language'];
    $form['field_project_machine_name'][$language][0]['value']['#element_validate'][] = 'drupalorg_project_machine_name_validate';

    // Do not allow sandboxes to be transferred to another maintainer. The
    // maintainer is part of the Git repository URL.
    if (project_promote_project_is_sandbox($form_state['node'])) {
      $form['author']['name']['#disabled'] = TRUE;
      $form['author']['name']['#description'] = t('Sandbox projects can not be transferred to another maintainer.');
    }

    // Create guide links.
    if (isset($form_state['node']->nid) && isset($form['field_project_docs'])) {
      $form['field_project_docs'][LANGUAGE_NONE]['add_more']['#suffix'] = t('Create a new !d7 or !d8 guide', [
        '!d7' => l(t('Drupal 7'), 'node/add/guide', ['query' => ['og_group_ref_documentation' => 2785809, 'project' => $form_state['node']->nid]]),
        '!d8' => l(t('Drupal 8'), 'node/add/guide', ['query' => ['og_group_ref_documentation' => 2785817, 'project' => $form_state['node']->nid]]),
      ]);
    }

    // Security advisory coverage.
    if (!isset($form_state['node']->nid)) {
      // Don’t bother with this on node creation.
      $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#access'] = FALSE;
    }
    elseif ($wrapper->field_security_advisory_coverage->value() !== 'not-covered') {
      // If coverage has selected, only allow Security Team to update.
      $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = !user_access('post to newsletter');
      $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('Only Security Team members may change coverage. A security advisory may be posted to notify users that the project is no longer receiving security advisory coverage.');
    }
    else {
      // Only allow Security Team to revoke coverage.
      $form['field_security_advisory_coverage'][LANGUAGE_NONE]['revoked']['#access'] = user_access('post to newsletter');
      // Only allow opting in if:
      if ($wrapper->field_project_type->value() !== 'full') {
        // - It is a full project.
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('Only promoted full projects may opt into security advisory coverage.');
      }
      elseif (!project_user_access($form_state['node'], 'write to vcs') && !user_access('post to newsletter')) {
        // - A project committer (or a security team member) is editing.
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('Only committers with “write to VCS” access may opt into security advisory coverage.');
      }
      elseif (drupalorg_project_open_security_tagged_issues($form_state['node'])) {
        // - There are no open issues tagged “security”.
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('<a href="!url">Issues tagged “security”</a> must be resolved before opting in.', ['!url' => url('project/issues/search/' . $wrapper->field_project_machine_name->value(), ['query' => ['issue_tags' => 'security']])]);
      }
      elseif (!user_access('may opt into security advisory coverage')) {
        // - The user user has access.
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('You must be given access to opt into security advisory coverage. <a href="!url">Learn how to apply</a>', ['!url' => url('project/projectapplications')]);
      }
      elseif ($form_state['node']->created > REQUEST_TIME - 10 * 24 * 60 * 60 && !user_access('post to newsletter')) {
        // - The 10 day waiting period has elapsed (or a security team member is
        //   editing).
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#disabled'] = TRUE;
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['#description'] = t('New projects must wait 10 days before opting into security advisory coverage. Please take this time to review <a href="!writing">writing secure code</a> and <a href="!practices">best practices</a>.', ['!writing' => url('writing-secure-code'), '!practices' => url('node/7765')]);
      }
      else {
        $form['field_security_advisory_coverage'][LANGUAGE_NONE]['covered']['#description'] = t('I will cooperate with the <a href="/security-team">Drupal Security Team</a> as needed.');
      }
    }
  }
  elseif (project_issue_node_is_issue($form_state['node'])) {
    $node_wrapper = entity_metadata_wrapper('node', $form_state['node']);
    $maintainer_access = isset($node_wrapper->field_project->value()->project['maintainers'][$GLOBALS['user']->uid]) ? $node_wrapper->field_project->value()->project['maintainers'][$GLOBALS['user']->uid]['permissions'] : [];
    $fixed = variable_get('project_issue_state_fixed', PROJECT_ISSUE_STATE_FIXED);
    $closed_fixed = variable_get('project_issue_state_closed', PROJECT_ISSUE_STATE_CLOSED);

    // Remove “Closed (fixed)” status, unless issue already has that status or
    // “Fixed”.
    if (!in_array($node_wrapper->field_issue_status->value(), [$fixed, $closed_fixed])) {
      unset($form['field_issue_status'][LANGUAGE_NONE]['#options'][$closed_fixed]);
    }

    // If issue is “Closed (fixed)”, only allow project maintainers with “Write
    // to VCS” or “Maintain issues” access to change status.
    if ($node_wrapper->field_issue_status->value() == $closed_fixed && empty($maintainer_access['write to vcs']) && empty($maintainer_access['maintain issues'])) {
      $form['field_issue_status'][LANGUAGE_NONE]['#disabled'] = TRUE;
      $form['field_issue_status'][LANGUAGE_NONE]['#description'] = t('Only maintainers can reopen.');
    }

    if (empty($form_state['node']->nid)) { // New issues.
      if (($project = $node_wrapper->field_project->value()) && project_release_has_full_release($project)) {
        drupal_set_message(t('<em><strong>Security issues</strong> should not be reported here.</em> Follow the <a href="/node/101494">procedure for reporting security issues</a>.'));
      }
    }
    else { // Existing issues.
      // Build table of commenters.
      $table = array(
        '#theme' => 'table',
        '#sticky' => FALSE,
        '#header' => array(
          t('Author'),
          t('By'),
          array(
            'data' => t('Patches ▾<span class="element-invisible">sorted descending</span>'),
            'colspan' => 2,
          ),
          array(
            'data' => t('Files'),
            'colspan' => 2,
          ),
          array(
            'data' => t('Comments'),
            'colspan' => 2,
          ),
        ),
        '#rows' => array(
          $form_state['node']->uid => array(
            'author' => NULL,
            'by' => array(
              '@username' => $form_state['node']->name,
              '!uid' => $form_state['node']->uid,
            ),
            'patches' => NULL,
            'patches-bar' => NULL,
            'files' => NULL,
            'files-bar' => NULL,
            // After 1438716282, there is an automatic initial comment.
            'comments' => ($form_state['node']->created < 1438716282) ? 1 : 0,
            'comments-bar' => NULL,
            '#weight' => 0,
            '#last_patch' => 0,
          ),
        ),
      );

      $existing_credit = array_flip($node_wrapper->field_issue_credit->raw());

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'comment');
      $query->propertyCondition('nid', $form_state['node']->nid);
      $query->propertyCondition('status', COMMENT_PUBLISHED);
      $query->propertyCondition('uid', variable_get('project_issue_followup_user', 0), '!=');
      $result = $query->execute();
      $cid_key_map = array();
      $last_maintainer_comment = 0;
      if (isset($result['comment'])) {
        foreach (comment_load_multiple(array_keys($result['comment'])) as $comment) {
          $comment_wrapper = entity_metadata_wrapper('comment', $comment);
          $cid_key_map[$comment->cid] = $comment->uid;
          if (isset($table['#rows'][$comment->uid])) {
            $table['#rows'][$comment->uid]['comments'] += 1;
            $table['#rows'][$comment->uid]['#weight'] += 1;
          }
          else {
            $table['#rows'][$comment->uid] = array(
              'author' => NULL,
              'by' => array(
                '@username' => $comment->name,
                '!uid' => $comment->uid,
              ),
              'patches' => NULL,
              'patches-bar' => NULL,
              'files' => NULL,
              'files-bar' => NULL,
              'comments' => 1,
              'comments-bar' => NULL,
              '#weight' => 0,
              '#last_patch' => 0,
            );
          }

          $as_volunteer = array_flip($comment_wrapper->field_attribute_as_volunteer->value());
          if (isset($as_volunteer[0])) {
            // Add organizations.
            foreach ($comment_wrapper->field_attribute_contribution_to as $organization) {
              if ($organization->value()) {
                $table['#rows'][$comment->uid]['by']['@organization'][$organization->nid->value()] = $organization->title->value();
              }
            }
            // Add customers.
            foreach ($comment_wrapper->field_for_customer as $organization) {
              if ($organization->value()) {
                $table['#rows'][$comment->uid]['by']['@customer'][$organization->nid->value()] = $organization->title->value();
              }
            }
          }

          if (isset($existing_credit[$comment->cid])) {
            $table['#rows'][$comment->uid]['#checked'] = TRUE;
          }

          // Keep track of the last time a maintainer commented.
          if (isset($form_state['node']->field_project[LANGUAGE_NONE][0]['entity']->project['maintainers'][$comment->uid]) && $form_state['node']->field_project[LANGUAGE_NONE][0]['entity']->project['maintainers'][$comment->uid]['permissions']['write to vcs']) {
            $last_maintainer_comment = max($last_maintainer_comment, $comment->created);
          }
        }
      }
      $form_state['drupalorg_credit_cids'] = $cid_key_map;

      // Populate patches and files.
      if (isset($node_wrapper->field_issue_files)) {
        foreach ($node_wrapper->field_issue_files->value() as $file) {
          if (!empty($form_state['node']->in_preview)) {
            $file = (array) file_load($file['fid']);
          }
          if (isset($table['#rows'][$file['uid']])) {
            if (preg_match('%\.(diff|patch)$%', $file['filename'])) {
              $table['#rows'][$file['uid']]['patches'] += 1;
              $table['#rows'][$file['uid']]['#weight'] += 10000;
              $last_patch_uid = $file['uid'];
              // 1428452101 is when maintainers started updating issue credit.
              $table['#rows'][$file['uid']]['#last_patch'] = max($table['#rows'][$file['uid']]['#last_patch'], $file['timestamp'], 1428452101);
            }
            else {
              $table['#rows'][$file['uid']]['files'] += 1;
              $table['#rows'][$file['uid']]['#weight'] += 100;
              $table['#rows'][$file['uid']]['#last_patch'] = max($file['timestamp'], 1428452101);
            }
          }
        }
      }
      // Set author to final file, except for core.
      $author = (isset($last_patch_uid) && $node_wrapper->field_project->value()->nid != DRUPALORG_CORE_NID) ? $last_patch_uid : '';

      // Sort.
      uasort($table['#rows'], 'element_sort');
      $table['#rows'] = array_reverse($table['#rows'], TRUE);

      $first = TRUE;
      foreach ($table['#rows'] as $key => &$row) {
        // Format By column.
        if (isset($row['by']['@organization'])) {
          $row['by']['@organization'] = implode(', ', $row['by']['@organization']);
        }
        if (isset($row['by']['@customer'])) {
          $row['by']['@customer'] = implode(', ', $row['by']['@customer']);
        }
        if (isset($row['by']['@organization']) && isset($row['by']['@customer'])) {
          $by_text = '@username <span class="description">at @organization for @customer</span>';
        }
        elseif (isset($row['by']['@organization'])) {
          $by_text = '@username <span class="description">at @organization</span>';
        }
        elseif (isset($row['by']['@customer'])) {
          $by_text = '@username <span class="description">for @customer</span>';
        }
        else {
          $by_text = '@username';
        }
        // Add form elements.
        $row['author'] = array(
          'data' => array(
            '#type' => 'radio',
            '#name' => 'author',
            '#return_value' => $key,
            '#value' => $author,
            '#title' => t('Author is @username', $row['by']),
            '#title_display' => 'invisible',
            '#attributes' => array(
              'data-author' => ' --author="' . drupalorg_git_gateway_user_git_format_author(user_load($row['by']['!uid'])) . '"',
            ),
          ),
          'class' => 'author',
        );
        $row['by'] = array(
          'data' => array(
            '#type' => 'checkbox',
            '#title' => t($by_text, $row['by']),
            // Suggest credit if they uploaded a patch after the last
            // maintainer comment, or previously received credit.
            '#checked' => (!empty($row['#last_patch']) && $row['#last_patch'] >= $last_maintainer_comment) || isset($row['#checked']),
            '#id' => 'by-' . $key,
            '#name' => 'by-' . $key,
            '#attributes' => array(
              'data-by' => $row['by']['@username'],
            ),
            '#states' => array(
              'disabled' => array(
                ':input[name=author]' => array('value' => $key),
              ),
            ),
          ),
        );
        unset($row['#checked']);
        // Format patches, files, and comments bars.
        foreach (array('patches' => t('patches attached'), 'files' => t('other files attached'), 'comments' => t('comments made')) as $key => $description) {
          if (!is_null($row[$key])) {
            if ($row[$key] > 50) {
              $row[$key . '-bar'] = '<div class="bar overflow" style="width: 10em"></div>';
            }
            else {
              $row[$key . '-bar'] = '<div class="bar" style="width: ' . ($row[$key] / 50 * 10) . 'em"></div>';
            }
            $row[$key] = array(
              'data' => $row[$key] . '<span class="element-invisible"> ' . $description . '</span>',
              'class' => 'number',
            );
          }
          elseif ($first) {
            $row[$key] = '<span class="description">' . t('none yet') . '</span>';
          }
        }
        $first = FALSE;
        // Remove temporary columns.
        unset($row['#weight']);
        unset($row['#last_patch']);
      }

      $table['#rows'][0] = array(
        'author' => array(
          'data' => array(
            '#type' => 'radio',
            '#name' => 'author',
            '#return_value' => '',
            '#value' => check_plain($author),
            '#id' => 'by-0',
            '#attributes' => array(
              'data-author' => '',
            ),
          ),
          'class' => 'author',
        ),
        'name' => array(
          'data' => array(
            '#theme' => 'html_tag',
            '#tag' => 'label',
            '#value' => t('<em>Omit author</em>'),
            '#attributes' => array('for' => 'by-0'),
          ),
          'colspan' => 7,
        ),
      );

      // Set up base form.
      $is_maintainer = !empty($maintainer_access['write to vcs']);
      $form['drupalorg_credit_wrapper'] = array(
        '#attached' => array('js' => array(array(
          'type' => 'setting',
          'data' => array('drupalOrg' => array('isMaintainer' => $is_maintainer)),
        ))),
        '#type' => 'fieldset',
        '#title' => t('Credit & committing'),
        '#collapsible' => TRUE,
        // Open by default when the user is a 'Write to VCS' maintainer.
        '#collapsed' => !$is_maintainer,
        '#weight' => 50,
        '#id' => 'drupalorg-issue-credit-form',
        'message' => array(
          '#type' => 'textfield',
          '#title' => t('Commit message'),
          '#default_value' => rtrim($form_state['node']->title, '.'),
          '#maxlength' => NULL,
        ),
        'commenters' => $table,
        'add_credit' => [],
        'commands' => array(
          '#type' => 'vertical_tabs',
          'full' => array(
            '#type' => 'fieldset',
            '#title' => t('Git command'),
            'command' => array(
              '#type' => 'textarea',
              '#value' => t('git commit -m \'Issue #@nid!by: !message\'!author', array('@nid' => $form_state['node']->nid)),
              '#resizable' => FALSE,
            ),
          ),
          'message' => array(
            '#type' => 'fieldset',
            '#title' => t('Message only'),
            'command-message' => array(
              '#type' => 'textarea',
              '#value' => t('Issue #@nid!by: !message', array('@nid' => $form_state['node']->nid)),
              '#resizable' => FALSE,
            ),
          ),
        ),
      );
      if ($is_maintainer) {
        $form['#submit'][] = 'drupalorg_project_issue_credit_submit';
        // Add non-commenter row.
        $form['drupalorg_credit_wrapper']['add_credit'] = [
          '#type' => 'textfield',
          '#title' => t('Credit others'),
          '#autocomplete_path' => 'admin/views/ajax/autocomplete/user',
          '#description' => t('A comment for each person will be added and they will be notified.'),
        ];
        $form['drupalorg_credit_wrapper']['help'] = array(
          '#markup' => '<div class="description">' . t('As a project maintainer, use checkboxes to give credit for the issue. Learn more about <a href="@attribution-url">giving credit</a>.', array('@attribution-url' => url('node/52287'))) . '</div>',
        );
      }
      else {
        $form['drupalorg_credit_wrapper']['help'] = array(
          '#markup' => '<div class="description">' . t('Learn more about <a href="@attribution-url">giving credit</a>.', array('@attribution-url' => url('node/52287'))) . '</div>',
        );
      }
    }
  }
  elseif (project_release_node_is_release($form_state['node'])) {
    // See if this is a release for a translation project, and if so, deny.
    $project = node_load(project_release_get_release_project_nid($form_state['node']));
    if ($project->type === 'project_translation') {
      foreach (element_children($form) as $child) {
        unset($form[$child]);
      }
      $form['translations_denied'] = array(
        '#markup' => t('Translation projects have been moved and are now actively maintained at <a href="@localize-link">localize.drupal.org</a>. You are no longer allowed to create new releases of translation projects on Drupal.org.', array('@localize-link' => 'http://localize.drupal.org/')),
      );
      return;
    }
    $project_wrapper = entity_metadata_wrapper('node', $project);

    // Add advice for tagged releases.
    if (isset($form['versioncontrol_release']['versioncontrol_release_label_id']['#options']['Tags'])) {
      $form['versioncontrol_release']['drupalorg_tag'] = [
        '#type' => 'item',
        '#markup' => t('<em>Tagged releases are permanent:</em><ul><li>Double check what will be in your release. Review the <a href="!issues">issue queue</a>, especially <a href="!security">security issues</a>.</li><li>Before clicking Next, the Git tag can be deleted or moved. It can not be modified after clicking Next.</li><li>If you notice a problem after making this release, you can release the next version.</li></ul>', ['!issues' => url('project/issues/' . $project_wrapper->field_project_machine_name->value()), '!security' => url('project/issues/search/' . $project_wrapper->field_project_machine_name->value(), ['query' => ['status[]' => 'Open', 'issue_tags' => 'security']])]),
        '#states' => [
          'visible' => [
            ':input[name=versioncontrol_release_label_id]' => [],
          ],
        ],
      ];
      $form['versioncontrol_release']['drupalorg_tag_full'] = [
        '#type' => 'item',
        '#markup' => t('<em>Full releases mean stable</em> and ready for general use. Upgrade paths between stable releases should be provided. It’s a good idea to make alpha, beta, and/or RC releases before the full release. Read more about Drupal’s <a href="!url">release naming conventions</a>.', ['!url' => url('node/1015226')]),
        '#states' => [
          'visible' => [
            ':input[name=versioncontrol_release_label_id]' => [],
          ],
        ],
      ];
      $form['versioncontrol_release']['drupalorg_tag_security'] = [
        '#type' => 'checkbox',
        '#title' => t('This release will not be covered for security advisories'),
        '#description' => t('Your project has not opted into security advisory coverage. Full releases are best with security advisory coverage. You may opt in by <a href="!url">editing your project</a>.', ['!url' => url('node/' . $project->nid . '/edit')]),
        '#element_validate' => ['drupalorg_project_release_covered_validate'],
        '#states' => [
          'visible' => [
            ':input[name=versioncontrol_release_label_id]' => [],
          ],
        ],
      ];
      if ($project_wrapper->field_security_advisory_coverage->value() === 'covered') {
        $form['versioncontrol_release']['drupalorg_tag_security']['#type'] = 'item';
        $form['versioncontrol_release']['drupalorg_tag_security']['#markup'] = t('✓ This release will be covered for security advisories. Thanks for helping keep Drupal sites secure.');
        unset($form['versioncontrol_release']['drupalorg_tag_security']['#title']);
        unset($form['versioncontrol_release']['drupalorg_tag_security']['#description']);
        unset($form['versioncontrol_release']['drupalorg_tag_security']['#element_validate']);
      }
      // Show elements only in some situations.
      if ($project->type === 'project_core') {
        $full_release_dashes = 0;
      }
      else {
        $full_release_dashes = 1;
      }
      $form['#drupalorg_full_releases'] = [];
      foreach ($form['versioncontrol_release']['versioncontrol_release_label_id']['#options']['Tags'] as $label_id => $label) {
        $form['versioncontrol_release']['drupalorg_tag']['#states']['visible'][':input[name=versioncontrol_release_label_id]'][] = ['value' => $label_id];
        if (substr_count($label, '-') === $full_release_dashes) {
          $form['versioncontrol_release']['drupalorg_tag_full']['#states']['visible'][':input[name=versioncontrol_release_label_id]'][] = ['value' => $label_id];
          if (strpos($label, '8.x-') === 0 || strpos($label, '7.x-') === 0) {
            $form['#drupalorg_full_releases'][$label_id] = TRUE;
            $form['versioncontrol_release']['drupalorg_tag_security']['#states']['visible'][':input[name=versioncontrol_release_label_id]'][] = ['value' => $label_id];
          }
        }
      }
      // Hide unreachable situations.
      if (empty($form['versioncontrol_release']['drupalorg_tag_full']['#states']['visible'][':input[name=versioncontrol_release_label_id]'])) {
        hide($form['versioncontrol_release']['drupalorg_tag_full']);
      }
      if (empty($form['versioncontrol_release']['drupalorg_tag_security']['#states']['visible'][':input[name=versioncontrol_release_label_id]'])) {
        hide($form['versioncontrol_release']['drupalorg_tag_security']);
      }
    }

    $security_term = taxonomy_term_load(variable_get('project_release_security_update_tid', FALSE));
    $release_type_field = &$form['taxonomy_' . $security_term->vocabulary_machine_name][LANGUAGE_NONE];
    if (empty($form['nid']['#value'])) {
      // Adding a new release.
      if ($form['field_release_build_type'][LANGUAGE_NONE]['#default_value'][0] === 'dynamic') {
        // This is a -dev, don't let anyone mark it a security update.
        unset($release_type_field['#options'][$security_term->tid]);
      }
      else {
        // Tagged static release.
        $form['#validate'][] = 'drupalorg_project_security_release_form_validate';
        $release_type_field['security_update_confirm'] = array(
          '#type' => 'checkbox',
          '#title' => t('Are you sure you want to mark this release as a <a href="@security_update_url">Security update</a>?', array('@security_update_url' => url('node/' . DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID))),
          '#weight' => 99,
          '#description' => t('If you select %security_update, your release will not be published without the manual intervention of the <a href="@security_url">Drupal Security Team</a>. You should have already <a href="@contact_url">contacted the Security Team</a> to coordinate a security advisory (SA) for your release before you committed any security-related patches.', array('%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL)),
          '#default_value' => !empty($form_state['values']['security_update_confirm']),
          // We'll be among expanded checkboxes with #tree, but we don't want
          // to really be a child of $release_type_field.
          '#parents' => array('security_update_confirm'),
          // Hide the confirmation checkbox on page load unless 'Security
          // update' is selected.
          '#states' => array(
            'visible' => array(
              ':input[name^="taxonomy_' . $security_term->vocabulary_machine_name . '"]' => array(
                'value' => $security_term->tid,
              ),
            ),
          ),
        );

        // Disable security releases for projects not covered by security
        // advisories.
        if ($project_wrapper->field_security_advisory_coverage->value() !== 'covered' || !project_release_has_full_release($project) && !user_access('post to newsletter')) {
          $release_type_field[$security_term->tid]['#disabled'] = TRUE;
          $release_type_field[$security_term->tid]['#description'] = t('This project does not have security advisory coverage. You may be able to opt-in by <a href="!url">editing the project</a>. If you feel this is in error, please email security@drupal.org', ['!url' => url('node/' . $project->nid . '/edit')]);
        }
      }
    }
    else {
      // Editing an existing release.
      if (project_release_is_security_update($form_state['node'])) {
        // If this release is already marked as a Security update, don't let
        // regular users change it any futher.
        if (!user_access('administer projects')) {
          $release_type_field['#access'] = FALSE;
        }
        $release_type_field['#description'] .= ' ' . t('Since this release is already marked as a %security_update, you can no longer change the release type. If you believe you need to do so for some reason, you should <a href="@contact_url">contact</a> the <a href="@security_url">Drupal Security Team</a>.', array('%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL));
      }
      else {
        // Not a Security update, remove that option entirely if this is either
        // a -dev snapshot or a non-admin user.
        if ($form_state['node']->field_release_build_type[LANGUAGE_NONE][0]['value'] === 'dynamic' || !user_access('administer projects')) {
          unset($release_type_field['#options'][$security_term->tid]);
        }
      }
    }
  }
}

/**
 * Form submit callback.
 */
function drupalorg_project_issue_credit_submit($form, &$form_state) {
  // Add additional credit.
  if (!empty($form_state['values']['add_credit'])) {
    _drupalorg_project_issue_credit_add($form_state);
  }

  // Record issue credit.
  if (project_issue_node_is_issue($form_state['node'])) {
    $form_state['node']->field_issue_credit[LANGUAGE_NONE] = array();
    foreach ($form_state['drupalorg_credit_cids'] as $cid => $key) {
      if (!empty($form_state['input']['by-' . $key]) || $form_state['input']['author'] === $key) {
        $form_state['node']->field_issue_credit[LANGUAGE_NONE][] = array('target_id' => $cid);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_project_form_project_promote_project_form_alter(&$form) {
  $form['shortname']['#element_validate'][] = 'drupalorg_project_machine_name_validate';
  $form['releases']['#default_value'] = TRUE;
}

/**
 * Element validate for drupalorg_tag_security.
 */
function drupalorg_project_release_covered_validate(&$element, &$form_state, $form) {
  if (empty($element['#printed']) && !$element['#value'] && ($label_id = $form['versioncontrol_release']['versioncontrol_release_label_id']['#value']) && isset($form['#drupalorg_full_releases'][$label_id])) {
    form_error($element, t('You must confirm you want to make a full release without security advisory coverage. Until a project has security advisory coverage, it is recommended to only make pre-release versions.'));
  }
}

/**
 * Form validation function for security release tag check.
 */
function drupalorg_project_security_release_form_validate($form, &$form_state) {
  $security_term = taxonomy_term_load(variable_get('project_release_security_update_tid', FALSE));
  foreach ($form_state['values']['taxonomy_' . $security_term->vocabulary_machine_name][LANGUAGE_NONE] as $value) {
    if ($value['tid'] == $security_term->tid) {
      // Ensure the user confirms that this release should be marked security.
      if (empty($form_state['values']['security_update_confirm'])) {
        form_set_error('security_update_confirm', t('You must confirm you want this release to be a <a href="@security_update_url">Security update</a>.', array('@security_update_url' => url('node/' . DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID))));
      }
      break;
    }
  }
}

/**
 * Project issue URL generator for Drupal issues.
 *
 * @param $query
 *   A keyed array of options to pass to the query parameter of url().
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_issue_url($query = array(), $absolute = FALSE) {
  return url('project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}

/**
 * Project issue link generator for Drupal issues.
 *
 * @param $text
 *   String to use as text for the link.
 * @param $query
 *   A keyed array of options to pass to the query parameter of l().
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_core_issue_link($text, $query = array(), $absolute = FALSE) {
  return l($text, 'project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}

/**
 * Project issue link generator for all issues.
 *
 * @param $text
 *   String to use as text for the link.
 * @param $query
 *   A keyed array of options to pass to the query parameter of l().
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_global_issue_link($text, $query = array(), $absolute = FALSE) {
  return l($text, 'project/issues/search', array('query' => $query, 'absolute' => $absolute));
}

/**
 * Implements hook_node_view().
 */
function drupalorg_project_node_view($node, $view_mode = 'full') {
  if ($view_mode == 'full') {
    if (project_issue_node_is_issue($node)) {
      // Hide issue metadata since it will be rendered in the sidebar. Since
      // project_issue_metadata_build() is itself building a render array,
      // array, we need to clone() the $node so that we can still render our
      // own versions of everything left to display.
      $metadata = project_issue_metadata_build(clone($node));
      foreach (element_children($metadata) as $element) {
        if (!empty($metadata[$element]['#access'])) {
          hide($node->content[$element]);
        }
      }

      if (isset($node->content['field_issue_files']) && ($ci_ad = variable_get('drupalorg_ci_ad'))) {
        $node->content['field_issue_files']['#suffix'] = filter_xss_admin($ci_ad);
      }
    }
    switch ($node->nid) {
      case 97084: // List branches ever created in contrib.
        $node->content['body']['#value'] .= drupalorg_project_list_branches_contrib();
        break;

      case 93997: // List branches ever created in core.
        $node->content['body']['#value'] .= drupalorg_project_list_branches_core();
        break;

      case 9730:
        $url_queue = drupalorg_project_issue_url(
          array(
            'status' => array(8, 13, 14),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_queue);
        exit;

      case 9731:
        $url_bugs = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('bug'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_bugs);
        exit;

      case 9732:
        $url_tasks = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('task'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_tasks);
        exit;
      case 3060: // Drupal Core override for the downloads page.
        if (isset($node->content['project_release_downloads'])) {
          $panel_mini = panels_mini_load('download_table');
          ctools_include('context');
          $context = ctools_context_create('entity:node', $node);
          $contexts = ctools_context_match_required_contexts($panel_mini->requiredcontexts, array($context));
          $panel_mini->context = $panel_mini->display->context =  ctools_context_load_contexts($panel_mini, FALSE, $contexts);
          $panel_mini->display->css_id = panels_mini_get_id($panel_mini->name);

          // Here is the renderable markup, to do with whatever you wish.
          $node->content['project_release_downloads'] = array(
            '#markup' => '<h2>' . $panel_mini->display->get_title() . '</h2>' . panels_render_display($panel_mini->display),
            '#weight' => 10,
          );
        }
        break;
    }

    if (project_node_is_project($node)) {
      if ($node->field_project_type[LANGUAGE_NONE][0]['value'] === 'sandbox') {
        drupal_set_title(l(t("!name's sandbox", array('!name' => $node->name)), 'project/user/' . $node->uid) . ': ' . check_plain($node->title), PASS_THROUGH);
        $node->content['project_sandbox_warning']['#markup'] = '<div class="note-warning"><h4>Experimental project</h4><p>This is a <a href="/node/1011196">sandbox project</a>, which contains experimental code for developer use only.</p></div>';
        $node->content['project_sandbox_warning']['#weight'] = -1;
      }
      $node->content['project_info'] = drupalorg_project_meta_data($node);
      $node->content['project_info']['#weight'] = 9; // project_release_downloads is hard-coded to 10.
    }
    elseif (project_issue_node_is_issue($node)) {
      // Add header label and last updated information to node body.
      $node->content['project_issue_header']['#value'] = '<h2>' . t('Issue Summary') . '</h2>';
    }
    elseif (project_release_node_is_release($node)) {
      // Add link to change notices relating to this release.
      if ($field_project = field_get_items('node', $node, 'field_release_project')) {
        $project = node_load($field_project[0]['target_id']);
        $machine_name = field_get_items('node', $project, 'field_project_machine_name');

        if ($field_version = field_get_items('node', $node, 'field_release_version')) {
          $node->content['project_release_change_notices']['#markup'] = l('View change notices for this release', 'list-changes/' . $machine_name[0]['value'], array(
            'query' => array(
              'version' => $field_version[0]['value'],
            ),
          ));
        }
      }
    }
    elseif ($node->type === 'changenotice') {
      if ($field_project = field_get_items('node', $node, 'field_project')) {
        $project = node_load($field_project[0]['target_id']);
        $machine_name = field_get_items('node', $project, 'field_project_machine_name');
        project_project_set_breadcrumb($project, TRUE, [[
          'title' => t('Change records'),
          'href' => 'list-changes/' . $machine_name[0]['value'],
          'localized_options' => [],
        ]]);
      }
    }
  }
  elseif ($view_mode === 'issuemetadata') {
    if (project_issue_node_is_issue($node) && empty($node->in_preview)) {
      $node->content['project_issue_created_by'][0]['#markup'] .= ' ' . drupalorg_add_badge_new_user(user_load($node->uid));
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupalorg_project_preprocess_node(&$variables) {
  // Hide 'Add new comment' link on issue pages.
  if (project_issue_node_is_issue($variables['node'])) {
    unset($variables['content']['links']);
  }
}

/**
 * Show branches ever created in contrib based on versioncontrol module data.
 */
function drupalorg_project_list_branches_contrib() {
  $output = '<ul>';
  $query = db_query("SELECT DISTINCT name, COUNT(*) AS total
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid != :nid AND vcl.type = :type
    GROUP BY name ORDER BY name DESC", array(':nid' => DRUPALORG_CORE_NID, ':type' => VERSIONCONTROL_OPERATION_BRANCH));
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . ' ('. format_plural($tag->total, '1 project', '@count projects') .')</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Show branches ever created in core based on versioncontrol module data.
 */
function drupalorg_project_list_branches_core() {
  $output = '<ul>';
  $query = db_query("SELECT name
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid = :nid AND type = :type
    ORDER BY name DESC", array(':nid' => DRUPALORG_CORE_NID, ':type' => VERSIONCONTROL_OPERATION_BRANCH));
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<a href="#tags"><h2 id="tags">Available tags</h2></a>';
  $output .= '<p>The tags currently available in Drupal core are:</p>';
  $output .= '<ul>';

  $query = db_query("SELECT name
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid = :nid AND type = :type
    ORDER BY name DESC", array(':nid' => DRUPALORG_CORE_NID, ':type' => VERSIONCONTROL_OPERATION_TAG));
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Implements hook_block_info().
 */
function drupalorg_project_block_info() {
  return array(
    'bingo-block' => array(
      'info' => t('Contributor Links'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'critical-count' => array(
      'info' => t('Critical Issue Count'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'resources' => array(
      'info' => t('Project links: Resources'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'development' => array(
      'info' => t('Project links: Development'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_project_block_view($delta = '') {
  switch ($delta) {
    case 'bingo-block':
      return array(
        'subject' => NULL,
        'content' => drupalorg_project_bingo_block_output(),
      );

    case 'critical-count':
      // Build list of possible issue target versions for dev version of core: 8.0.x, 8.0.0-beta1, etc.
      $releases = project_release_query_releases(DRUPALORG_CORE_NID, array(DRUPALORG_CORE_DEVELOPMENT_VERSION_TID));
      foreach ($releases as $tid => $release) {
        $versions[$tid] = $release->field_release_version[LANGUAGE_NONE][0]['value'];
      }

      // Get count of remaining open, non-fixed critical tasks and bugs for those versions.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->entityCondition('bundle', project_issue_issue_node_types())
        ->fieldCondition('field_project', 'target_id', DRUPALORG_CORE_NID)
        ->fieldCondition('field_issue_version', 'value', $versions)
        ->fieldCondition('field_issue_status', 'value', drupalorg_project_threshold_statuses())
        ->fieldCondition('field_issue_priority', 'value', 400) // Critical.
        ->fieldCondition('field_issue_category', 'value', array(1, 2, 5)) // Bug, Task, Plan.
        ->count();
      $count = $query->execute();

      // Output the block.
      return array(
        'subject' => t('Drupal 8 critical countdown'),
        'content' => array(
          'countdown' => array(
            '#prefix' => '<p>' . t('We will schedule an official release date for 8.0.0 when we are confident that the rate and nature of incoming critical bugs has slowed enough to ensure a stable release.') . '</p>',
            '#markup' => '<h3>' . l(t('@count critical issues remaining', array('@count' => $count)), 'project/issues/search/drupal', array('query' => array('status' => array(1, 13, 8, 14, 4), 'priorities' => array(400), 'categories' => array(1, 2, 5), 'version' => array('8.x')))) . '</h3>',
            '#suffix' => '<p>' . t('Read more about <a href="/drupal-8.0/get-involved">how to help Drupal 8</a>!') . '</p>',
          ),
        ),
      );

    case 'resources':
      if ($project = project_get_project_from_menu()) {
        $links = array();
        // Home page
        $home_link = field_get_items('node', $project, 'field_project_homepage');
        if (!empty($home_link[0]['url'])) {
          $links[] = array(
            'title' => t('Home page'),
            'href' => $home_link[0]['url'],
          );
        }
        // License
        $license_link = field_get_items('node', $project, 'field_project_license');
        if (!empty($license_link[0]['url'])) {
          $links[] = array(
            'title' => t('Read license'),
            'href' => $license_link[0]['url'],
          );
        }
        // Changes
        $changes_link = field_get_items('node', $project, 'field_project_changelog');
        if (!empty($changes_link[0]['url'])) {
          $links[] = array(
            'title' => t('Read complete log of changes'),
            'href' => $changes_link[0]['url'],
          );
        }
        // Demo
        $demo_link = field_get_items('node', $project, 'field_project_demo');
        if (!empty($demo_link[0]['url'])) {
          $links[] = array(
            'title' => t('Try out a demonstration'),
            'href' => $demo_link[0]['url'],
          );
        }
        // Screenshots
        $screenshots_link = field_get_items('node', $project, 'field_project_screenshots');
        if (!empty($screenshots_link[0]['url'])) {
          $links[] = array(
            'title' => t('Look at screenshots'),
            'href' => $screenshots_link[0]['url'],
          );
        }
        // Link to translation downloads.
        $translation_download = '';
        if ($project->type === 'project_translation') {
          // Language projects get links to their language teams.
          $translation_download = 'http://localize.drupal.org/translate/languages/';
        }
        elseif (db_query_range('SELECT 1 FROM {project_release_supported_versions} WHERE nid = :nid AND supported = 1', 0, 1, array(':nid' => $project->nid))->fetchField()) {
          // Otherwise only include links if we have releases and at least one supported.
          $translation_download = 'http://localize.drupal.org/translate/projects/';
        }
        if (!empty($translation_download)) {
          $machine_name = field_get_items('node', $project, 'field_project_machine_name');
          $machine_name = $machine_name[0]['value'];
          $links[] = array(
            'title' => t('View project translations'),
            'href' => $translation_download . $machine_name,
          );
        }

        if (!empty($links)) {
          return array(
            'subject' => t('Resources'),
            'content' => array(
              '#theme' => 'links',
              '#links' => $links,
            ),
          );
        }
      }
      break;

    case 'development':
      if ($project = project_get_project_from_menu()) {
        $machine_name = field_get_items('node', $project, 'field_project_machine_name');
        $machine_name = $machine_name[0]['value'];
        $links = array(
          array(
            'title' => t('View pending patches'),
            'href' => 'project/issues/search/' . $machine_name,
            'query' => array('status' => array(8, 13, 14)),
          ),
        );
        // VCS links
        if (!empty($project->versioncontrol_project['repo'])) {
          // Force the link for now, see http://drupal.org/node/1026594
          $repo = $project->versioncontrol_project['repo'];
          $links[] = array(
            'title' => t('Browse code repository'),
            'href' => $repo->getUrlHandler()->getRepositoryViewUrl(),
          );
          $links[] = array(
            'title' => t('View commits'),
            'href' => 'node/' . $project->nid . '/commits',
          );
        }
        // Report a security vulnerability.
        $links[] = [
          'title' => t('Report a security vulnerability'),
          'href' => 'project/' . $machine_name . '/report-security-issue',
        ];
        // Link to change records page.
        $links[] = array(
          'title' => t('View change records'),
          'href' => 'list-changes/' . $machine_name,
        );

        return array(
          'subject' => t('Development'),
          'content' => array(
            '#theme' => 'links',
            '#links' => $links,
          ),
        );
      }
      break;
  }
}

/**
 * Output links with issue counts for different types of issues.
 */
function drupalorg_project_bingo_block_output() {
  $counts = variable_get('drupalorg_project_issue_counts', array());

  // For all issues to show up in searches, the versions must be ordered
  // newest first.
  // @todo: find out why.

  $both_versions = array(DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME, DRUPALORG_CORE_STABLE_VERSION_NAME);
  $both_names = check_plain(implode(" + ", $both_versions));
  // Early in the release cycle, count both the stable and development versions
  // for issue thresholds.
  // $threshold_version_key = 'both';
  // $threshold_versions = $both_versions;
  // Late in the release cycle, count thresholds separately for the development
  // and stable versions.
  $threshold_version_key = 'main';
  $threshold_versions = array(DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME);

  // Include active, postponed, NR, NW, RTBC, and PTBP issues for thresholds.
  $threshold_statuses = array(1, 4, 8, 13, 14, 15);

  // Format the version names for display.
  $threshold_names = check_plain(implode(" + ", $threshold_versions));

  $links = array(
    l('Getting involved', 'getting-involved'),
    l('New contributor tasks', 'new-contributors'),
    l('Community initiatives', 'community-initiatives'),
    array(
      'data' => '<strong>Issue queues</strong>',
      'children' => array(
        l('Your issues', 'project/issues/user'),
        drupalorg_project_global_issue_link(
          $counts['Novice issues'] . ' Novice issues',
          array(
            'status' => array(1, 8, 13),
            'issue_tags_op' => '=',
            'issue_tags' => 'Novice',
          )
        ),
        drupalorg_project_core_issue_link(
          $counts[$threshold_version_key]['Critical issues'] . " Critical issues ($threshold_names)",
          array(
            'version' => $threshold_versions,
            'status' => $threshold_statuses,
            'priorities' => array(400),
            'categories' => array(1, 2, 3, 5),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts[$threshold_version_key]['Major issues'] . " Major issues ($threshold_names)",
          array(
            'version' => $threshold_versions,
            'status' => $threshold_statuses,
            'priorities' => array(300),
            'categories' => array(1, 2, 3, 5),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts[$threshold_version_key]['Patch queue'] . " Patch queue ($threshold_names)",
          array(
            'version' => $threshold_versions,
            'status' => array(8, 13, 14),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts['both']['Pending bugs'] . " Pending bugs ($both_names)",
          array(
            'version' => $both_versions,
            'status' => array(1, 8, 13, 14, 15),
            'categories' => array(1),
          )
        ),
        drupalorg_project_core_issue_link(
          'Issues needing triage',
          array(
            'version' => $both_versions,
            'status' => array(1, 8, 13),
            'categories' => array(1, 2),
            'order' => 'comment_count',
            'sort' => 'asc',
          )
        ),
        drupalorg_project_core_issue_link(
          'Issues needing review',
          array(
            'version' => $both_versions,
            'status' => array(8),
            'sort' => 'asc',
          )
        ),
      ),
    ),
    l('Drupal.org webmasters', 'project/issues/webmasters'),
    l('Drupal.org server administrators', 'project/issues/infrastructure'),
    l('Drupal.org Project applications', 'project/issues/projectapplications'),
    array(
      'data' => '<strong>Community resources</strong>',
      'children' => array(
        l('Planet Drupal', 'planet'),
        l('Drupal dojo', 'http://groups.drupal.org/drupal-dojo'),
        l('Mailing list archives', 'mailing-lists'),
      ),
    ),
  );

  return theme('item_list', array('items' => $links));
}

/**
 * Gather information for the bottom of project pages.
 *
 * @param $node
 *   The node object.
 */
function drupalorg_project_meta_data(stdClass $node) {
  if ($node->nid == DRUPALORG_CORE_NID) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $output = [
    '#prefix' => '<h3>' . t('Project Information') . '</h3><ul class="project-info flat">',
    'items' => [
      'Maintenance status' => [
        '#prefix' => '<li>',
        '#markup' => t('Maintenance status: <span class="warning">Unknown</span>'),
        '#suffix' => '</li>',
      ],
      'Development status' => [
        '#prefix' => '<li>',
        '#markup' => t('Development status: <span class="warning">Unknown</span>'),
        '#suffix' => '</li>',
      ],
    ],
    '#suffix' => '</ul>',
  ];

  // Project solr is currently finnicky about f query parameter indexing.
  $dummy = array();
  $form = drupalorg_browse_projects_form([], $dummy, node_type_load($node->type));

  foreach (taxonomy_vocabulary_get_names() as $vocabulary) {
    if (!empty($node->{'taxonomy_' . $vocabulary->machine_name})) {
      $links = array();
      foreach ($node->{'taxonomy_' . $vocabulary->machine_name}[LANGUAGE_NONE] as $term) {
        if ($term_entity = taxonomy_term_load($term['tid'])) {
          $options = array();
          // Maintenance status is Abandoned or Development status is Obsolete
          if (($vocabulary->vid == 44 && $term['tid'] == 13032) || ($vocabulary->vid == 46 && $term['tid'] == 9994)) {
            $options['attributes'] = ['class' => ['alert']];
          }
          // Special-case module category terms to link to download+extend.
          if ($vocabulary->vid == DRUPALORG_PROJECT_CATEGORIES_VID) {
            // Only use the 'terms' style for module categories.
            $term_path = 'project/' . $node->type;
            $solr_arg = 'im_vid_' . $vocabulary->vid . ':' . $term['tid'];
            foreach (element_children($form['f']) as $element) {
              if (isset($form['f'][$element]['#options'][$solr_arg])) {
                $options['query'] = array('f' => array($element => $solr_arg));
              }
            }
          }
          else {
            $uri = entity_uri('taxonomy_term', $term_entity);
            $term_path = $uri['path'];
          }

          $links[] = l($term_entity->name, $term_path, $options);
        }
      }
      if (!empty($links)) {
        $output['items'][$vocabulary->name] = [
          '#prefix' => '<li>',
          '#markup' => check_plain($vocabulary->name) . ': ' . implode(', ', $links),
          '#suffix' => '</li>',
        ];
      }
    }
  }

  // Usage stats.
  if ($total_usage = project_usage_get_project_total_usage($node->nid)) {
    $output['items']['usage'] = [
      '#prefix' => '<li>',
      '#markup' => format_plural($total_usage,
        'Reported installs: <strong>1</strong> site currently reports using this @project-type. <a href="/project/usage/!project-shortname">View usage statistics</a>.',
        'Reported installs: <strong>@formatted-count</strong> sites currently report using this @project-type. <a href="/project/usage/!project-shortname">View usage statistics</a>.',
        [
          '@formatted-count' => number_format($total_usage),
          '@project-type' => drupal_strtolower(drupalorg_project_node_type_label($node->type, 'singular')),
          '!project-shortname' => $node->field_project_machine_name[LANGUAGE_NONE][0]['value'],
        ]
      ),
      '#suffix' => '</li>',
    ];
  }

  // Download stats.
  if ($wrapper->field_download_count->value() > 0) {
    $output['items']['downloads'] = [
      '#prefix' => '<li>',
      '#markup' => t('Downloads: @downloads', ['@downloads' => number_format($wrapper->field_download_count->value())]),
      '#suffix' => '</li>',
    ];
  }

  // Last modified.
  $output['items']['modified'] = [
    '#prefix' => '<li>',
    '#markup' => t('Last modified: @modified', ['@modified' => format_date($node->changed, 'custom', 'j F Y')]),
    '#suffix' => '</li>',
  ];

  // Security information.
  if ($wrapper->field_project_has_releases->value()) {
    if ($wrapper->field_security_advisory_coverage->value() === 'covered') {
      $output['items']['security'] = [
        '#prefix' => '<li>',
        '#markup' => '<img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/shield-icon-black.svg') . '" alt="shield" class="icon-left gray">' . t('Stable releases for this project are covered by the <a href="/security-advisory-policy">security advisory policy</a>.<br>'),
        '#suffix' => '</li>',
      ];
      if (project_release_has_full_release($node)) {
        $output['items']['security']['#markup'] .= t('Look for the shield icon below.');
      }
      else {
        $output['items']['security']['#markup'] .= t('There are currently no supported stable releases.');
      }
    }
    else {
      // Notice at top of page.
      $node->content['project_security_warning'] = [
        '#prefix' => '<div class="note-warning">',
        '#markup' => '<p>' . t('This project is not covered by Drupal’s <a href="/security-advisory-policy">security advisory policy</a>.') . '</p>',
        '#suffix' => '</div>',
        '#weight' => -1,
      ];

      // Add issues tagged “security”.
      if ($nids = drupalorg_project_open_security_tagged_issues($node)) {
        $issues = [];
        $result = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('status', 1)
          ->condition('nid', $nids)
          ->addTag('node_access')
          ->execute();
        foreach ($result as $row) {
          $issues[] = l($row->title, 'node/' . $row->nid);
        }
        $node->content['project_security_warning']['#markup'] .= '<p>' . format_plural(count($issues), '<strong>There is an open security issue:</strong> !issues', '<strong>There are open security issues:</strong> !issues', ['!issues' => implode(', ', $issues)]) . '</p>';
      }

      // Notice by download table.
      $output['items']['security'] = [
        '#prefix' => '<li>',
        '#markup' => '<img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/shield-icon-alert.svg') . '" alt="shield alert" class="icon-left">' . t('This project is not covered by the <a href="/security-advisory-policy">security advisory policy</a>.<br><strong>Use at your own risk!</strong> It may have publicly disclosed vulnerabilities.'),
        '#suffix' => '</li>',
      ];
    }
  }

  return $output;
}

/**
 * Implement hook_ctools_plugin_directory().
 */
function drupalorg_project_ctools_plugin_directory($module, $plugin) {
  if ($module == 'project_release' && $plugin == 'release_packager') {
    return "plugins/$plugin";
  }
  if ($module == 'ctools' && $plugin == 'content_types') {
    return "plugins/$plugin";
  }
  if ($module == 'ctools' && $plugin == 'arguments') {
    return "plugins/$plugin";
  }
  if ($module == 'ctools' && $plugin == 'relationships') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function drupalorg_project_ctools_plugin_api($module, $api) {
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_views_api().
 */
function drupalorg_project_views_api() {
  return array("version" => 3.0);
}

/**
 * Implements hook_views_pre_render().
 *
 * Sets the breadcrumb up for project navigation for the change records views.
 */
function drupalorg_project_views_pre_render(&$view) {
  switch ($view->name) {
    case 'change_records':
      if (count($view->args) > 0) {
        // Note: this returns FALSE if it isn't a project node.
        if ($project = project_load($view->args[0])) {
          project_project_set_breadcrumb($project, TRUE);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_views_pre_view().
 */
function drupalorg_project_views_pre_view(&$view) {
  switch ($view->name) {
    case 'project_issue_search_all_searchapi':
    case 'project_issue_all_projects_searchapi':
    case 'project_issue_user_issues_searchapi':
    case 'project_issue_project_searchapi':
    case 'project_issue_search_project_searchapi':
      if ($view->current_display === 'page') {
        // If searching for text in an issue queue, show and default sort by
        // score.
        $input = $view->get_exposed_input();
        if (!empty($input['text'])) {
          $view->set_item_option('page', 'field', 'search_api_relevance', 'exclude', FALSE);
          $view->display_handler->default_display->options['style_options']['default'] = 'search_api_relevance';
          // Hide pager because count query is expensive.
          $view->display_handler->default_display->options['pager']['type'] = 'lite';
        }
      }
      break;
  }
}

/**
 * Implementation of hook_preprocess_views_view_field().
 */
function drupalorg_project_preprocess_views_view_field(&$v) {
  // Do not render anonymous in issue tables.
  if ($v['field']->field === 'field_issue_assigned' && strip_tags($v['output']) === variable_get('anonymous', t('Anonymous'))) {
    $v['output'] = '';
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function drupalorg_project_form_views_exposed_form_alter(&$form, &$form_state) {
  switch ($form_state['view']->name) {
    case 'project_issue_all_projects_searchapi':
    case 'project_issue_user_issues_searchapi':
    case 'project_issue_project_searchapi':
      // Force status default value.
      $form['status']['#default_value'] = 'Open';
      break;
  }
}

/**
 * Implements hook_views_post_execute().
 * @param $view
 *
 * Checks to see the status of Drupal 8 for the contributed module.
 */
function drupalorg_project_views_post_execute(&$view) {
  if ($view->name === variable_get('project_release_downloads_view', 'project_release_download_table') && ($view->current_display === 'recommended' || $view->current_display === 'security') && !empty($view->result) && count($view->args)) {
    $node = node_load($view->args[0]);

    // We don't need to tell core or sandboxes they need a D8 release.
    if ($node->type !== 'project_core' && !project_promote_project_is_sandbox($node)) {
      // Check if there is a 6.x or 7.x release.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', project_release_release_node_types())
        ->propertyCondition('status', 1)
        ->fieldCondition('field_release_project', 'target_id', $node->nid)
        ->fieldCondition('taxonomy_' . taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary', 0))->machine_name, 'tid', array(103, 87)) // 7.x & 6.x
        ->range(0, 1);
      $result = $query->execute();
      // We have potentially upgradable release!
      if (isset($result['node'])) {
        // Parse out the project type
        $project_type = drupal_strtolower(drupalorg_project_node_type_label($node->type, 'singular'));

        // Check to see the status of the 8.x release from contrib_tracker.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'project_issue')
          ->propertyCondition('title', '[' . $node->field_project_machine_name[LANGUAGE_NONE][0]['value']. ']', 'STARTS_WITH')
          ->fieldCondition('field_project', 'target_id', 2573607, '=')
          ->range(0, 1);

        $entities = $query->execute();
        // No 8.x issue, post message
        if (empty($entities['node'])) {
          /*
          $message = array(
            'message' => t('No Drupal 8 port information has been found for this !project. Help us by creating an !issue.', array('!project' => $project_type, '!issue' => l('issue', 'node/2573659'))),
            'status' => 'help',
          );
          */
        }
        elseif ($issue = array_keys($entities['node'])) {
          // Load the issue up and get relevant status
          $issue = node_load(array_shift($issue));
          // See https://www.drupal.org/project/contrib_tracker for mapping.
          switch($issue->field_issue_status[LANGUAGE_NONE][0]['value']) {
            case 1: // Active
              $message = array(
                'message' => t('This !project has not been ported to Drupal 8. Refer to this !issue to find out its progress.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 4: // Postponed
              $message = array(
                'message' => t('This !project is currently blocked from being ported to Drupal 8, due to unmet dependencies. Refer to this !issue for more information.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 13: // Needs work
              $message = array(
                'message' => t('This !project is currently being ported to Drupal 8, but is not usable yet. Help us by following this !issue.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 8: // Needs review
            case 14: // RTBC
              $message = array(
                'message' => t('This !project has a pre-release version for Drupal 8. To find out more, follow this !issue or download below.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 2: // Fixed
            case 7: // Closed (Fixed)
              $message = array();
              break;

            case 16: // Needs more info
              $message = array(
                'message' => t('The status of this !project port to Drupal 8 is unknown or under investigation. Know its status? Help us by updating the !issue.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 5: // Closed (won't fix)
              $message = array(
                'message' => t('This !project has been included with Drupal 8 core. Refer to this !issue for more information.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;

            case 3: // Closed (duplicate)
              $message = array(
                'message' => t('This !project has been renamed or deprecated by another !project in Drupal 8. Please visit this !issue for more information.', array('!project' => $project_type, '!issue' => l('issue', 'node/' . $issue->nid))),
                'status' => 'help',
              );
              break;
          }
        }
      }
      // Fetch the project, message variable, and only print upon full projects.
      if (!empty($message)) {
        $view->attachment_before = '<div class="' . $message['status'] . '">' . $message['message'] . '</div>';;
      }
    }
  }
}


/**
 * Menu callback for serving up sandbox projects (or redirecting to full).
 */
function drupalorg_project_sandbox($node) {
  // If a sandbox project, do the same as node module does for page views.
  if (isset($node->project['sandbox']) && $node->project['sandbox']) {
    return node_page_view($node);
  }
  else {
    // Not a sandbox project, redirect to the node's usual path.
    drupal_goto('node/' . $node->nid, array(), 301);
  }
}

/**
 * Helper function for issue counts; return non-fixed, open issue statuses.
 */
function drupalorg_project_threshold_statuses() {
  return array(
    1,  // Active.
    4,  // Postponed.
    8,  // Needs review.
    13, // Needs work.
    14, // Reviewed & tested by the community.
    15, // Patch (to be ported).
  );
}

/**
 * Return an array of project node types used on d.o.
 *
 * @return array
 *   An associative array indexed by bundle name with the following properties:
 *   - title: The human-readable title of the project type.
 *   - tid: The legacy taxonomy ID for the corresponding term in the D6
 *     "Project types" vocabulary.
 */
function drupalorg_project_project_types() {
  return array(
    'project_module' => array(
      'title' => 'Module project',
      'tid' => 14,
    ),
    'project_theme' => array(
      'title' => 'Theme project',
      'tid' => 15,
    ),
    'project_theme_engine' => array(
      'title' => 'Theme Engine project',
      'tid' => 32,
    ),
    'project_distribution' => array(
      'title' => 'Distribution project',
      'tid' => 96,
    ),
    'project_drupalorg' => array(
      'title' => 'Drupal.org project',
      'tid' => 22588,
    ),
    'project_core' => array(
      'title' => 'Drupal core',
      'tid' => 13,
    ),
    'project_translation' => array(
      'title' => 'Translation project',
      'tid' => 29,
    ),
  );
}

/**
 * Get human-readable lables for project-related node types on Drupal.org.
 */
function drupalorg_project_node_type_label($node_type, $label_type) {
  static $labels = array(
    'project' => array(
      'singular' => 'Project',
      'plural' => 'Projects',
    ),
    'project_core' => array(
      'singular' => 'Drupal Core',
      'plural' => 'Drupal Cores',
    ),
    'project_distribution' => array(
      'singular' => 'Distribution',
      'plural' => 'Distributions',
    ),
    'project_drupalorg' => array(
      'singular' => 'Drupal.org project',
      'plural' => 'Drupal.org projects',
    ),
    'project_module' => array(
      'singular' => 'Module',
      'plural' => 'Modules',
    ),
    'project_theme' => array(
      'singular' => 'Theme',
      'plural' => 'Themes',
    ),
    'project_theme_engine' => array(
      'singular' => 'Theme engine',
      'plural' => 'Theme engines',
    ),
    'project_translation' => array(
      'singular' => 'Translation',
      'plural' => 'Translations',
    ),
  );
  return $labels[$node_type][$label_type];
}

/**
 * Implements hook_field_extra_fields_display_alter.
 */
function drupalorg_project_field_extra_fields_display_alter(&$displays, $context) {
  if ($context['entity_type'] == 'node' && $context['bundle'] == 'project_issue' && $context['view_mode'] != 'issuemetadata') {
    $displays['update_link']['visible'] = FALSE;
    $displays['follow_link']['visible'] = FALSE;
    $displays['jump_links']['visible'] = FALSE;
  }
}

/**
 * Returns json of maintainers mostly for S.D.O.
 * For now, we will only add people who can create releases.
 * This might change
 */
function drupalorg_maintainers_json($project) {
  if (!empty($project->project['maintainers'])) {
    return drupal_json_output($project->project['maintainers']);
  }
  drupal_json_output(array());
}

/**
 * Perform a project short name for full projects.
 * @see drupalorg_project_form_node_form_alter()
 * @see http://www.php.net/manual/en/functions.user-defined.php
 * @see https://drupal.org/node/2172891
 */
function drupalorg_project_machine_name_validate($element, &$form_state, $form) {
  if (($form['#id'] === 'project-promote-project-form' || $form_state['values']['field_project_type'][LANGUAGE_NONE][0]['value'] == 'full')
    && !preg_match('/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/', $element['#value'])) {
    form_error($element, t('@title must follow <a href="@url">PHP naming convention</a>.', array(
      '@title' => $element['#title'],
      '@url' => 'http://www.php.net/manual/en/functions.user-defined.php')));
  }
}

/**
 * Modify $form_state to allow adding people for issue credit.
 */
function _drupalorg_project_issue_credit_add(&$form_state) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->propertyCondition('name', array_filter(array_map('trim', explode(',', $form_state['values']['add_credit']))))
    ->execute();
  if (isset($result['user'])) {
    foreach (user_load_multiple(array_keys($result['user'])) as $account) {
      // If the user has not commented.
      if (!in_array($account->uid, $form_state['drupalorg_credit_cids'])) {
        // Save initial issue comment.
        $node = node_load($form_state['node']->nid, NULL, TRUE);
        $node->nodechanges_comment['comment_body'][LANGUAGE_NONE][0] = [
          'value' => t('!maintainer credited !name.', [
            '!maintainer' => theme('username', ['account' => $GLOBALS['user']]),
            '!name' => theme('username', ['account' => $account]),
          ]),
          'format' => filter_default_format(),
        ];
        $node->nodechanges_comment_attributes = [
          'project_issue_no_email' => TRUE,
        ];
        $node->nodechanges_uid = $account->uid;
        // Copy attribution from the user’s last comment.
        if ($cid = db_query_range('SELECT cid FROM {comment} c INNER JOIN {node} n ON n.nid = c.nid AND n.type IN (:issue_types) AND n.status = :node_published WHERE c.status = :comment_published AND c.uid = :uid AND c.created > 1426194356 ORDER BY c.cid DESC', 0, 1, array(':issue_types' => project_issue_issue_node_types(), ':node_published' => NODE_PUBLISHED, ':comment_published' => COMMENT_PUBLISHED, ':uid' => $account->uid))->fetchField()) {
          $last_comment = comment_load($cid);
          $node->nodechanges_comment['field_attribute_as_volunteer'] = $last_comment->field_attribute_as_volunteer;
          $node->nodechanges_comment['field_attribute_contribution_to'] = $last_comment->field_attribute_contribution_to;
          $node->nodechanges_comment['field_for_customer'] = $last_comment->field_for_customer;
        }
        node_save($node);

        // Prepare to record issue credit.
        $form_state['drupalorg_credit_cids'][$node->nodechanges_cid] = $account->uid;

        // Notify the creditee. See _project_issue_email_notify().
        $from = '"' . mime_header_encode(t('!name (!site)', array('!name' => $GLOBALS['user']->name, '!site' => variable_get('site_name', 'Drupal')))) . '" <' . variable_get('project_issue_reply_to_' . $node->type, variable_get('site_mail', ini_get('sendmail_from'))) . '>';
        drupal_mail('drupalorg', 'credited_by_maintainer', $account->mail, LANGUAGE_NONE, ['node' => $node], $from);
      }

      // Give them credit.
      $form_state['input']['by-' . $account->uid] = TRUE;
    }
  }
}
