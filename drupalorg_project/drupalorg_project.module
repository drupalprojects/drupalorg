<?php

/**
 * @file
 *   Customizations related to the Project* modules used on drupal.org.
 */

/**
 * Drupal core compatibility term name for current development version.
 */
define('DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME', '8.x');

/**
 * Current Drupal core development version compatibility term ID.
 */
define('DRUPALORG_CORE_DEVELOPMENT_VERSION_TID', '7234');

/**
 * Drupal core compatibility term name for latest stable release.
 */
define('DRUPALORG_CORE_STABLE_VERSION_NAME', '7.x');

/**
 * Drupal core compatibility term ID for latest stable release.
 */
define('DRUPALORG_CORE_STABLE_VERSION_TID', '103');

/**
 * URL for the Drupal Security Team.
 */
define('DRUPALORG_SECURITY_TEAM_URL', 'http://drupal.org/security-team');

/**
 * URL for links to contact the security team
 */
define('DRUPALORG_SECURITY_CONTACT_URL', 'http://drupal.org/security-team#report-issue');

/**
 * URL for the handbook page that describes the "Release type" vocabulary.
 */
define('DRUPALORG_RELEASE_TYPE_HANDBOOK_NID', 1025122);

/**
 * URL specifically to describe the "Security update" term.
 * For now, the general page for release types is the best we've got.
 */
define('DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID', DRUPALORG_RELEASE_TYPE_HANDBOOK_NID);

/**
 * Term ID for translation projects.
 */
define('DRUPALORG_TRANSLATION_TID', 29);

/**
 * Defaults for project_project_node_form
 */
define('DRUPALORG_DEFAULT_LICENSE', 'GNU public license, version 2');
define('DRUPALORG_DEFAULT_LICENSE_LINK', 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.html');


// == Basic core hooks =========================================================

/**
 * Implementation of hook_menu().
 */
function drupalorg_project_menu() {
  // Menu items for patch bingo.
  $items['bug-bingo'] = array(
    'title'              => 'Bug bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('bug-core'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['contrib-bug-bingo'] = array(
    'title'              => 'Contrib bug bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('bug-contrib'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['patch-bingo'] = array(
    'title'              => 'Patch bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('patch-core'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['contrib-patch-bingo'] = array(
    'title'              => 'Contrib patch bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('patch-contrib'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['sandbox/%/%node'] = array(
    // Modeled on $items['node/%node'] will pass through
    'title callback'     => 'node_page_title',
    'title arguments'    => array(2),
    'page callback'      => 'drupalorg_project_sandbox',
    'page arguments'     => array(2),
    'access callback'    => 'node_access',
    'access arguments'   => array('view', 2),
    'type'               => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function drupalorg_project_menu_alter(&$items) { 
  // Clobber the menu item from project_solr with a redirect.
  $items['project'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('download'),
    'type' => MENU_CALLBACK,
  );

  // Override the access callback on the project promote page to enforce our
  // own special rules in a few cases.
  $items['node/%project_edit_project/edit/promote']['access callback'] = 'drupalorg_project_promote_project_access';
  $items['node/%project_edit_project/edit/promote/confirm']['access callback'] = 'drupalorg_project_promote_project_access';
}

/**
 * Menu access callback for the form to promote sandboxes to full projects.
 *
 * @param $node
 *   The project object to check access against.
 */
function drupalorg_project_promote_project_access($node) {
  $forbidden_tids = drupalorg_project_get_no_promote_project_tids();
  foreach ($forbidden_tids as $tid) {
    if (!empty($node->taxonomy[$tid])) {
      return FALSE;
    }
  }
  return project_promote_project_access($node);
}

/**
 * Return an array of project type tids that cannot be promoted.
 *
 * This helper function only exists since you can't define() an array in PHP.
 */
function drupalorg_project_get_no_promote_project_tids() {
  return array(13, 22588);
}

/**
 * Implementation of hook_help().
 */
function drupalorg_project_help($path, $arg) {
  switch ($path) {
    case 'project/usage':
    case 'project/usage/%':
      return '<p>'. t('These statistics are incomplete; only Drupal websites using the <a href="!update_status_url">Update Status</a> module are included in the data. As this module is now included with the download of Drupal since version 6.x, the data is heavily biased toward newer sites. <a href="!usage_description_url">Read more information about how these statistics are calculated.</a>', array('!update_status_url' => url('project/update_status'), '!usage_description_url' => url('node/329620'))) .'</p>';
  }

  if ($arg[0] == 'project' && $arg[1] == 'issues-term' && $arg[2] == '346') {
    return '<p>'. t('A more detailed overview of the issues can be seen in the Community Initiatives handbook section titled <a href="http://drupal.org/node/362117">Upgrade Drupal.org from Drupal 5 to 6</a>.') .'</p>';
  }
}

/**
 * Implementation of hook_cron().
 */
function drupalorg_project_cron() {
  drupalorg_project_issue_counts();
}

// == Issue counter ============================================================

/**
 * Count number of issues in various issue queues on drupal.org.
 *
 * This function only counts issues for core releases that we're currently
 * tracking.
 *
 * @see drupalorg_project_bingo_block_output()
 * @see DRUPALORG_CORE_VERSION_TID
 * @see DRUPALORG_CORE_VERSION_NAME
 */
function drupalorg_project_issue_counts() {

  // Fetch issue counts for the current development release, and a combined count
  // for the development release and the latest stable release.
  $versions = array(DRUPALORG_CORE_DEVELOPMENT_VERSION_TID => array(DRUPALORG_CORE_DEVELOPMENT_VERSION_TID), 'both' => array(DRUPALORG_CORE_DEVELOPMENT_VERSION_TID, DRUPALORG_CORE_STABLE_VERSION_TID));

  foreach ($versions as $version => $value) {
    $issue_rids = array();
    /// @todo Further optimize this if/when {node}.status is denormalized into
    /// {project_release_nodes}.
    $version_placeholders = db_placeholders($value);
    $args = array_merge(array(DRUPALORG_CORE_NID), $value);
    $query = db_query("SELECT prn.nid FROM {project_release_nodes} prn INNER JOIN {node} n ON prn.nid = n.nid WHERE prn.pid = %d AND prn.version_api_tid IN ($version_placeholders) AND n.status = 1", $args);
    while ($release = db_fetch_object($query)) {
      $issue_rids[] = $release->nid;
    }
    $issue_rid_placeholders = db_placeholders($issue_rids);
    $args = array_merge(array(DRUPALORG_CORE_NID), $issue_rids);

    $issue_counts[$version]['Critical bugs'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND category = 'bug' AND sid IN (1,8,13,14,15) AND priority = 1 AND rid IN ($issue_rid_placeholders)", $args));
    $issue_counts[$version]['Major bugs'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND category = 'bug' AND sid IN (1,8,13,14,15) AND priority = 4 AND rid IN ($issue_rid_placeholders)", $args));
    $issue_counts[$version]['Critical tasks'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND category = 'task' AND sid IN (1,8,13,14,15) AND priority = 1 AND rid IN ($issue_rid_placeholders)", $args));
    $issue_counts[$version]['Major tasks'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND category = 'task' AND sid IN (1,8,13,14,15) AND priority = 4 AND rid IN ($issue_rid_placeholders)", $args));
    $issue_counts[$version]['Patch queue'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND sid IN (8,13,14) AND rid IN ($issue_rid_placeholders)", $args));
    $issue_counts[$version]['Pending bugs'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND pid = %d AND category = 'bug' AND sid IN(1,8,13,14,15) AND rid IN ($issue_rid_placeholders)", $args));
  }
  $issue_counts['Novice issues'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {term_node} tn ON pi.nid = tn.nid INNER JOIN {term_data} td on tn.tid = td.tid WHERE td.name = 'Novice' AND pi.sid IN (1, 8, 13, 14, 15)"));
  variable_set('drupalorg_project_issue_counts', $issue_counts);
}

// == Altering of various forms ================================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_project_form_alter(&$form, $form_state, $form_id) {
  // Add a description for the Priority and Status values.
  if (($form_id == 'project_issue_node_form' || ($form_id == 'comment_form' && !empty($form['original_issue']['issue_info']))) && empty($form_state['rebuild'])) {
    $priority_status_description = array(
      // The "standard" class adds a clear so the description is positioned
      // below the floated pull-downs.  "fieldset-description" is from
      // bluebeach to make the font size smaller.
      '#prefix' => '<div class="standard fieldset-description">',
      '#value' => t('Descriptions of the <a href="!priority_url">Priority</a> and <a href="!status_url">Status</a> values can be found in the <a href="!issue_queue_url">Issue queue handbook</a>.', array('!priority_url' => '/node/45111', '!status_url' => '/node/156119', '!issue_queue_url' => '/node/317')),
      '#suffix' => '</div>',
    );

    // Make the "Issue tags" vocabulary not so prominent on issue nodes.
    $form['taxonomy']['#type'] = 'fieldset';
    $form['taxonomy']['#title'] = t('Tags');
    $form['taxonomy']['#collapsible'] = TRUE;
    $form['taxonomy']['#collapsed'] = TRUE;
    // We want this fieldset at the very bottom, just above the buttons, but
    // we need different weights for that depending on if it's a new issue or
    // a follow-up comment.
    if ($form_id == 'project_issue_node_form') {
      $form['taxonomy']['#weight'] = 35;
      $form['issue_info']['description'] = $priority_status_description;
    }
    else {
      $form['taxonomy']['#weight'] = 4;
      $form['original_issue']['issue_info']['description'] = $priority_status_description;
    }

    // Prefill values from $_GET.
    if (isset($_GET['version'])) {
      $form['project_info']['rid']['#default_value'] = $_GET['version'];
    }
    if (isset($_GET['component'])) {
      $form['project_info']['component']['#default_value'] = $_GET['component'];
    }
    if (isset($_GET['categories'])) {
      $form['issue_info']['category']['#default_value'] = $_GET['categories'];
    }
    if (isset($_GET['priorities'])) {
      $form['issue_info']['priority']['#default_value'] = $_GET['priorities'];
    }
    if (isset($_GET['assigned'])) {
      $form['issue_info']['assigned']['#default_value'] = $_GET['assigned'];
    }
    if (isset($_GET['status'])) {
      $form['issue_info']['sid']['#default_value'] = $_GET['status'];
    }
    if (isset($_GET['title'])) {
      $form['issue_details']['title']['#default_value'] = $_GET['title'];
    }
    if (isset($_GET['body'])) {
      $form['issue_details']['body']['#default_value'] = $_GET['body'];
    }
    if (isset($_GET['tags'])) {
      $form['taxonomy']['#collapsed'] = FALSE;
      $form['taxonomy']['tags'][reset(array_keys($form['taxonomy']['tags']))]['#default_value'] = $_GET['tags'];
    }
  }

  // Add security update related checks to release forms.
  if ($form_id == 'project_release_node_form') {
    drupalorg_project_release_node_form_alter($form, $form_state);
  }
    
  if ($form_id == 'project_project_node_form') {
    // Deprecate the "license" field, as it must always be GPLv2+ anyway.
    if (! $form['project']['license']['#default_value']) {
       $form['project']['license'] = array(
        '#type' => 'item',
        '#title' => $form['project']['license']['#title'],
        '#value' => t('<a href="@link_url">@link_name</a>', array(
          // Constants defined in drupalorg_project.module.
          '@link_url' => DRUPALORG_DEFAULT_LICENSE_LINK,
          '@link_name' => DRUPALORG_DEFAULT_LICENSE,
        )),
      );
    }

    if (!empty($form['project_node']['project']['sandbox_help']) && !drupalorg_project_promote_project_access($form['#node'])) {
      $form['project_node']['project']['sandbox_help']['#value'] = t('This project is a sandbox.');
    }

    // Translation projects on drupal.org are being phased out in favor of
    // localize.drupal.org, so prevent new translation projects from being
    // created.
    if ($form['project_taxonomy']['project_type']['#default_value'] != DRUPALORG_TRANSLATION_TID) {
      unset($form['project_taxonomy']['project_type']['#options'][DRUPALORG_TRANSLATION_TID]);
    }
    $form['project_taxonomy']['project_type']['#description'] = t('Note: Translation projects have been moved and are now actively maintained at <a href="@localize-link">localize.drupal.org</a>.', array('@localize-link' => 'http://localize.drupal.org/'));
  }

  // Since drupal.org has so many projects, it'd be insane to allow people to
  // get e-mail notifications for all issues for all projects. Remove that
  // option entirely on the per-user notification settings form.
  if ($form_id == 'project_issue_notification_user_form') {
    unset($form['projects']['default']['level']['#options'][PROJECT_ISSUE_NOTIFICATION_ALL]);
  }
}

// == Security release restrictions ============================================

/**
 * Alter release node forms properly for security updates.
 *
 * Ensure that only privileged users can modify a security release tag and when
 * people add this tag, they get to know about the process.
 */
function drupalorg_project_release_node_form_alter(&$form, $form_state) {
  // See if this is a release for a translation project, and if so, deny.
  $project = $form['project']['#value'];
  if (arg(2) != 'edit' && !empty($project->taxonomy[DRUPALORG_TRANSLATION_TID])) {
    foreach (element_children($form) as $child) {
      unset($form[$child]);
    }
    $form['translations_denied'] = array(
      '#type' => 'markup',
      '#value' => t('Translation projects have been moved and are now actively maintained at <a href="@localize-link">localize.drupal.org</a>. You are no longer allowed to create new releases of translation projects on drupal.org.', array('@localize-link' => 'http://localize.drupal.org/')),
    );
    return;
  }

  if (!empty($form['taxonomy'])) {
    $vid = drupalorg_project_get_release_type_vid();
    $security_tid = drupalorg_project_get_security_update_tid();
    if (!empty($form['taxonomy'][$vid])) {
      $form['taxonomy'][$vid]['#weight'] = 10;
      if (empty($form['nid']['#value'])) {
        // Adding a new release.
        if (!empty($form['project_release']['rebuild']['#value'])) {
          // This is a -dev, don't let anyone mark it a security update.
          _drupalorg_project_remove_security_update($form);
        }
        else {
          // Regular release
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => url('node/'. DRUPALORG_RELEASE_TYPE_HANDBOOK_NID)));
          // Add wrapper div for drupalorg_project.js
          $form['taxonomy'][$vid]['#prefix'] = '<div class="release-type-select">';
          $form['taxonomy'][$vid]['#suffix'] = '</div>';
          $form['#validate'][] = 'drupalorg_project_security_release_form_validate';
          $confirm_class = 'security-update-confirm';
          // Hide the confirmation checkbox on page load unless 'Security
          // update' is already selected.
          if (empty($form_state['values']['taxonomy'][$vid]) || (array_search($security_tid, $form_state['values']['taxonomy'][$vid]) === FALSE)) {
            $confirm_class .= ' js-hide';
          }
          $form['security_update_confirm'] = array(
            '#type' => 'checkbox',
            '#title' => t('Are you sure you want to mark this release as a <a href="@security_update_url">Security update</a>?', array('@security_update_url' => url('node/'. DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID))),
            '#prefix' => '<div class="'. $confirm_class .'">',
            '#suffix' => '</div>',
            '#weight' => -2,
            '#description' => t('If you select %security_update, your release will not be published without the manual intervention of the <a href="@security_url">Drupal Security Team</a>. You should have already <a href="@contact_url">contacted the Security Team</a> to coordinate a security advisory (SA) for your release before you committed any security-related patches.', array('%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL)),
            '#default_value' => !empty($form_state['values']['security_update_confirm']),
          );
          $drupalorg_project_path = drupal_get_path('module', 'drupalorg_project');
          drupal_add_js($drupalorg_project_path .'/drupalorg_project.js');
          drupal_add_css($drupalorg_project_path .'/drupalorg_project.css');
        }
      }
      else {
        // Editing an existing release.
        if (array_search($security_tid, $form['taxonomy'][$vid]['#default_value']) !== FALSE) {
          // If this release is already marked as a Security update, don't
          // let regular users change it any futher.
          if (!user_access('administer projects')) {
            $form['taxonomy'][$vid]['#disabled'] = TRUE;
            $form['taxonomy'][$vid]['#value'] = $form['taxonomy'][$vid]['#default_value'];
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a> Since this release is already marked as a %security_update, you can no longer change the release type. If you believe you need to do so for some reason, you should <a href="@contact_url">contact</a> the <a href="@security_url">Drupal Security Team</a>.', array('@handbook_url' => url('node/'. DRUPALORG_RELEASE_TYPE_HANDBOOK_NID), '%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL));
        }
        else {
          // Not a Security update, remove that option entirely if this is
          // either a -dev snapshot or a non-admin user.
          if (!empty($form['#node']->rebuild) || !user_access('administer projects')) {
            _drupalorg_project_remove_security_update($form);
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => url('node/'. DRUPALORG_RELEASE_TYPE_HANDBOOK_NID)));
        }
      }
    }
  }
}

/**
 * Utility function to remove the security update term on node forms.
 */
function _drupalorg_project_remove_security_update(&$form) {
  $vid = drupalorg_project_get_release_type_vid();
  $security_tid = drupalorg_project_get_security_update_tid();
  foreach ($form['taxonomy'][$vid]['#options'] as $i => $option) {
    if (!empty($option->option)) {
      $tid = key($option->option);
      if ($tid == $security_tid) {
        unset($form['taxonomy'][$vid]['#options'][$i]);
        return;
      }
    }
  }
}

/**
 * Set the project_release_type_vid Drupal variable and return its value.
 */
function drupalorg_project_get_release_type_vid() {
  static $vid = 0;
  if (empty($vid)) {
    $vid = variable_get('project_release_type_vid', 0);
    if (empty($vid)) {
      $vid = db_result(db_query("SELECT v.vid FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = 'project_release' AND v.name = 'Release type'"));
      variable_set('project_release_type_vid', $vid);
    }
  }
  return $vid;
}

/**
 * Set the project_release_type_security_update_tid Drupal variable and return its value.
 */
function drupalorg_project_get_security_update_tid() {
  static $tid = 0;
  if (empty($tid)) {
    $tid = variable_get('project_release_type_security_update_tid', 0);
    if (empty($tid)) {
      $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d AND name = '%s'", drupalorg_project_get_release_type_vid(), 'Security update'));
      variable_set('project_release_type_security_update_tid', $tid);
    }
  }
  return $tid;
}

/**
 * Form validation function for security release tag check.
 */
function drupalorg_project_security_release_form_validate($form, &$form_state) {
  $vid = drupalorg_project_get_release_type_vid();
  $security_tid = drupalorg_project_get_security_update_tid();
  if (!empty($form_state['values']['taxonomy'][$vid][$security_tid]) && empty($form_state['values']['security_update_confirm'])) {
    // Ensure the user confirms that this release should be marked security.
    form_set_error('security_update_confirm', t('You must confirm you want this release to be a <a href="@security_update_url">Security update</a>', array('@security_update_url' => url('node/'. DRUPALORG_SECURITY_UPDATE_HANDBOOK_NID))));
  }
}

// == Project links ============================================================

/**
 * Implemenation of hook_project_page_link_alter().
 */
function drupalorg_project_project_page_link_alter(&$links, $node) {
  global $user;

  // Make the development and resources sections actual core blocks.
  $links['development']['type'] = 'block';
  $links['resources']['type'] = 'block';

  // Exit early if we are not on a node, such as block rehashing.
  if (!is_object($node)) {
    return;
  }

  // Provide contextual links for sandboxes.
  $project_tids = array();
  if (!empty($node->taxonomy)) {
    $project_tids = array_keys($node->taxonomy);
  }
  $no_promote_tids = drupalorg_project_get_no_promote_project_tids();
  $forbidden_tids = array_intersect($no_promote_tids, $project_tids);
  if ($node->project['sandbox'] == 1 && empty($forbidden_tids) && $user->uid == $node->uid) {
    $links['sandbox']['weight'] = 1;
    if (!user_access('create full projects')) {
      $links['sandbox']['links']['apply_full'] = l(t('Apply for full project access'), 'node/1011698');
    }
    else {
      $links['sandbox']['links']['no_releases'] = l(t('Promote to full project'), "node/$node->nid/edit/promote");
    }
  }

  // Link to security handbook page.
  if ($node->project['sandbox']) {
    $links['development']['links']['report_security_issue'] = l(t('Sandbox security policy'), 'security-advisory-policy');
  }
  else {
    $links['development']['links']['report_security_issue'] = l(t('Report a security issue'), 'https://security.drupal.org/node/add/project-issue/' . $node->project['uri']);
  }

  // Link to change records page.
  if (!empty($node->project['uri'])) {
    $links['development']['links']['change_records'] = l(t('View change records'), 'list-changes/' . $node->project['uri']);
  }

  // Link to translation downloads.
  $translation_download = '';
  if (is_array($node->taxonomy) && isset($node->taxonomy[DRUPALORG_TRANSLATION_TID])) {
    // Language projects get links to their language teams.
    $translation_download = 'http://localize.drupal.org/translate/languages/';
  }
  elseif (!empty($node->project_release['releases'])) {
    // Otherwise only include links if we have releases and at least one supported.
    $has_supported = db_result(db_query_range(db_rewrite_sql('SELECT 1 FROM {project_release_supported_versions} WHERE nid = %d AND supported = 1'), $node->nid, 0, 1));
    if ($has_supported > 0) {
      $translation_download = 'http://localize.drupal.org/translate/projects/';
    }
  }
  if (!empty($translation_download)) {
    $links['resources']['links']['view_translations'] = l(t('View project translations'), $translation_download . $node->project['uri']);
  }
  unset($links['resources']['links']['project_usage']);
}

// == Utility functions ========================================================

/**
 * Project issue URL generator for Drupal issues.
 *
 * @param $query
 *   A keyed array of options to pass to the query parameter of url(). 
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_issue_url($query = array(), $absolute = FALSE) {
  return url('project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}

/**
 * Project issue link generator for Drupal issues.
 *
 * @param $text
 *   String to use as text for the link.
 * @param $query
 *   A keyed array of options to pass to the query parameter of l().
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_core_issue_link($text, $query = array(), $absolute = FALSE) {
  return l($text, 'project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}

/**
 * Project issue link generator for all issues.
 *
 * @param $text
 *   String to use as text for the link.
 * @param $query
 *   A keyed array of options to pass to the query parameter of l().
 *     - version (An array of release node IDs)
 *     - status (An array of status IDs)
 *     - priorities (An array of priority IDs)
 *     - categories (An array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_global_issue_link($text, $query = array(), $absolute = FALSE) {
  return l($text, 'project/issues/search', array('query' => $query, 'absolute' => $absolute));
}

// == Node overrides ===========================================================

/**
 * Implementation of hook_nodeapi().
 */
function drupalorg_project_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    switch ($node->nid) {
      case 199251: // List projects with commit RSS feeds.
        $node->content['body']['#value'] .= drupalorg_project_list_commit_rss();
        break;

      case 97084: // List branches ever created in contrib.
        $node->content['body']['#value'] .= drupalorg_project_list_branches_contrib();
        break;

      case 93997: // List branches ever created in core.
        $node->content['body']['#value'] .= drupalorg_project_list_branches_core();
        break;

      case 9730:
        $url_queue = drupalorg_project_issue_url(
          array(
            'status' => array(8, 13, 14),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_queue);
        exit;

      case 9731:
        $url_bugs = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('bug'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_bugs);
        exit;

      case 9732:
        $url_tasks = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('task'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_tasks);
        exit;
    }

    if ($node->type == 'project_project') {
      if ($node->project['sandbox']) {
        $user_link = l(t("!name's sandbox", array('!name' => $node->name)), 'project/user/'. $node->uid);
        drupal_set_title($user_link .': '. check_plain($node->title));
        $node->content['project_sandbox_warning']['#value'] = '<div class="meta"><h5>Experimental Project</h5><p>This is a <a href="/node/1011196">sandbox project</a>, which contains experimental code for developer use only.</p></div>';
        $node->content['project_sandbox_warning']['#weight'] = -1;
      }
      else {
        $node->content['project_info']['#value'] = drupalorg_project_meta_data($node);
        $node->content['project_info']['#weight'] = 1;
      }
    }
    elseif ($node->type === 'project_issue') {
      // Add header label and last updated information to node body.
      $node->content['project_issue_header']['#value'] = '<h2>' . t('Issue Summary') . '</h2>';
    }
  }

  // Add a breadcrumb to API Change nodes.
  if ($op == 'alter' && !$teaser && $page && $node->type == 'changenotice') {
    if (isset($node->field_project[0]['nid'])) {
      $proj_nid = $node->field_project[0]['nid'];
      $proj_node = node_load($proj_nid);
      $proj_shortcode = $proj_node->project['uri'];
      $extra = array();
      $extra[] = l($node->field_project[0]['safe']['title'], 'node/' . $proj_nid);
      $extra[] = l(t('Change records'), 'list-changes/' . $proj_shortcode);
      project_project_set_breadcrumb($proj_node, $extra);
    }
  }
}

/**
 * List projects with commit RSS links.
 */
function drupalorg_project_list_commit_rss() {
  $count_query = "SELECT COUNT(*) FROM {node} WHERE type = 'project_project' AND status = 1";
  $total = db_result(db_query($count_query));
  $header = array(array('data' => t('Number'), 'field' => 'nid', 'sort' => 'desc'), t('Title'), t('Commits RSS'));
  $result = pager_query("SELECT nid, title, status FROM {node} WHERE type = 'project_project' AND status = 1 ". tablesort_sql($header), 100, 0, $count_query);
  $rows = array();
  $page = (int)$_GET['page'];
  $count = $total - $page * 100;
  while($row = db_fetch_array($result)) {
    // @TODO Need RSS feeds and commitlog/project views, see http://drupal.org/node/1024958
    $url = url('commitlog');
    $rows[]= array($count--, l($row['title'], 'node/'. $row['nid']), theme('feed_icon', $url, $row['title']));
  }
  drupal_set_message("There are $total projects.");

  return theme('table', $header, $rows). theme('pager');
}

/**
 * Show branches ever created in contrib based on versioncontrol module data.
 */
function drupalorg_project_list_branches_contrib() {
  $output = '<ul>';
  $query = db_query("SELECT DISTINCT name, COUNT(*) AS total
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid != %d AND vcl.type = %d
    GROUP BY name ORDER BY name DESC", DRUPALORG_CORE_NID, VERSIONCONTROL_OPERATION_BRANCH);
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . ' ('. format_plural($tag->total, '1 project', '@count projects') .')</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Show branches ever created in core based on versioncontrol module data.
 */
function drupalorg_project_list_branches_core() {
  $output = '<ul>';
  $query = db_query("SELECT name
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid = %d AND type = %d
    ORDER BY name DESC", DRUPALORG_CORE_NID, VERSIONCONTROL_OPERATION_BRANCH);
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<a href="#tags"><h2 id="tags">Available tags</h2></a>';
  $output .= '<p>The tags currently available in Drupal core are:</p>';
  $output .= '<ul>';

  $query = db_query("SELECT name
    FROM {versioncontrol_labels} vcl
    INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = vcl.repo_id
    WHERE vcp.nid = %d AND type = %d
    ORDER BY name DESC", DRUPALORG_CORE_NID, VERSIONCONTROL_OPERATION_TAG);
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  return $output;
}

// == Bug bingo ================================================================

/**
 * SQL randomizer for issues.
 */
function drupalorg_project_bingo_jump($type = NULL) {
  $sql = array(
    // Bug, core.
    'bug-core' => "SELECT nid FROM {project_issues} WHERE sid IN (1) AND category = 'bug' AND pid = %d ORDER BY RAND() LIMIT 1",
    // Bug, contrib.
    'bug-contrib' => "SELECT nid FROM {project_issues} WHERE sid IN (1) AND category = 'bug' AND pid != %d ORDER BY RAND() LIMIT 1",
    // Patch, core.
    'patch-core' => "SELECT nid FROM {project_issues} WHERE sid IN (8,13,14) AND pid = %d ORDER BY RAND() LIMIT 1",
    // Patch, contrib.
    'patch-contrib' => "SELECT nid FROM {project_issues} WHERE sid IN (8,13,14) AND pid != %d ORDER BY RAND() LIMIT 1",
  );
  if (!isset($type) || !isset($sql[$type])) {
    $type = 'bug-core';
  }

  $nid = db_result(db_query($sql[$type], DRUPALORG_CORE_NID));
  if ($_GET['stop'] != 1) {
    drupal_goto('node/'. $nid);
  }
}

/**
 * Implementation of hook_block().
 */
function drupalorg_project_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Contributor Links');
      return $blocks;

    case 'view':
      $block['subject'] = t('Contributor Links');
      $block['content'] = drupalorg_project_bingo_block_output();
      return $block;
  }
}

/**
 * Output links with issue counts for different types of issues.
 */
function drupalorg_project_bingo_block_output() {
  $counts = variable_get('drupalorg_project_issue_counts', array());

  // For all issues to show up in searches, the versions must be ordered
  // newest first.
  // @todo: find out why.
  $versions = array(DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME, DRUPALORG_CORE_STABLE_VERSION_NAME);

  $counts_critical_bugs = $counts['both']['Critical bugs'];
  $counts_major_bugs = $counts['both']['Major bugs'];
  $counts_critical_tasks = $counts['both']['Critical tasks'];
  $counts_major_tasks = $counts['both']['Major tasks'];
  $counts_pending_bugs = $counts['both']['Pending bugs'];
  $counts_queue = $counts[DRUPALORG_CORE_DEVELOPMENT_VERSION_TID]['Patch queue'];
  $counts_novice = $counts['Novice issues'];

  $links = array(
    l('Community initiatives', 'community-initiatives'),
    array(
      'data' => '<strong>Queues</strong>',
      'children' => array(
        l('Your issues', 'project/issues/user'),
        drupalorg_project_global_issue_link(
          $counts_novice . t(' Novice issues'),
          array(
               'status' => array(1, 8, 13, 14, 15),
               'issue_tags_op' => 'or',
               'issue_tags' => 'Novice',
          )
        ),
        drupalorg_project_core_issue_link(
          $counts_critical_bugs .' Critical bugs (D8 + D7)',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13, 14, 15),
               'priorities' => array(1),
               'categories' => array('bug'),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts_major_bugs .' Major bugs (D8 + D7)',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13, 14, 15),
               'priorities' => array(4),
               'categories' => array('bug'),
          )
        ),
        drupalorg_project_core_issue_link(
         $counts_critical_tasks .' Critical tasks (D8 + D7)',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13, 14, 15),
               'priorities' => array(1),
               'categories' => array('task'),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts_major_tasks .' Major tasks (D8 + D7)',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13, 14, 15),
               'priorities' => array(4),
               'categories' => array('task'),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts_pending_bugs .' Pending bugs (D8 + D7)',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13, 14, 15),
               'categories' => array('bug'),
          )
        ),
        drupalorg_project_core_issue_link(
          $counts_queue .' Patch queue (D8)',
          array(
               'version' => array(DRUPALORG_CORE_DEVELOPMENT_VERSION_NAME),
               'status' => array(8, 13, 14),
          )
        ),
        drupalorg_project_core_issue_link(
          'Issues needing triage',
          array(
               'version' => $versions,
               'status' => array(1, 8, 13),
               'categories' => array('bug', 'task'),
               'order' => 'comment_count',
               'sort' => 'asc',
          )
        ),
      ),
    ),
    array(
      'data' => '<strong>Play patch bingo!</strong>',
      'children' => array(
        l('Drupal Core', 'patch-bingo', array('attributes' => array('title' => 'Select a random patch for review'))),
        l('Contributions', 'contrib-patch-bingo', array('attributes' => array('title' => 'Select a random patch for review from the contributions'))),
      ),
    ),
    array(
      'data' => '<strong>Play bug bingo!</strong>',
      'children' => array(
        l('Drupal Core', 'bug-bingo', array('attributes' => array('title' => 'Select a random bug to fix'))),
        l('Contributions', 'contrib-bug-bingo', array('attributes' => array('title' => 'Select a random bug to fix from the contributions'))),
      ),
    ),
    l('Mailing list archives', 'mailing-lists'),
    l('Drupal.org webmasters', 'project/issues/webmasters'),
    l('Drupal.org server administrators', 'project/issues/infrastructure'),
    l('Drupal.org Project applications', 'project/issues/projectapplications'),
    array(
      'data' => '<strong>Web links</strong>',
      'children' => array(
        l('Planet Drupal', 'planet'),
        l('Drupal talk', 'talk'),
        l('Drupal dojo', 'http://groups.drupal.org/drupal-dojo'),
      ),
    ),
  );

  return theme('item_list', $links);
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_project_preprocess_drupalorg_home(&$vars) {
  $result = db_query_range("SELECT vco.message as message, vco.author_date as created, vco.repo_id, vco.revision as revision, u.name, u.uid FROM {versioncontrol_operations} vco INNER JOIN {users} u ON vco.author_uid = u.uid ORDER BY vco.author_date DESC", 0, 5);
  $recent_updates = '';
  while ($message = db_fetch_object($result)) {
    $recent_updates .= '<h6>' . l(truncate_utf8($message->message, 80) . '…', 'commitlog/commit/' . $message->repo_id . '/' . $message->revision) . '</h6><p class="submitted">' . theme('node_submitted', $message) . '</p>';
  }
  // We have no place to link this to in a nice way.
  $recent_updates .= '<p>'. l(t('More commit messages...'), 'commitlog') .'</p>';
  $vars['tab_content_git'] = $recent_updates;
}

/**
 * Gather information for the bottom of project pages.
 *
 * @param $node
 *   The node object.
 * @return
 *   The HTML code for the book meta information.
 */
function drupalorg_project_meta_data($node) {
  $info = array();
  if ($node->nid == DRUPALORG_CORE_NID) {
    return;
  }
  if (count($node->taxonomy)) {
    $project_vid = _project_get_vid();
    // It's pointless to query, since we need to hard-code singular
    // versions while the term names are plural.
    $project_types = drupalorg_project_get_project_types(TRUE);

    $vocabularies = taxonomy_get_vocabularies();
    // Group the terms by vid.
    $taxonomy = array();
    foreach ($node->taxonomy as $term_id => $term) {
      // Ignore the project type terms (the top level terms from the
      // project vocabulary) since those are already visible on the page.
      if (!empty($project_types[$term->tid])) {
        $project_type = $term;
        $project_type->label = $project_types[$term->tid];
      }
      else {
        $taxonomy[$term->vid][] = $term;
      }
      $term->rendered = TRUE;
    }

    foreach ($vocabularies as $vocabulary) {
      if (isset($taxonomy[$vocabulary->vid])) {
        $class = '';
        $links = array();
        foreach ($taxonomy[$vocabulary->vid] as $term) {
          $options = array();
          if ($term->vid == '44') { // Maintenance status
            $maintenance_status = $term->tid;
            switch ($term->tid) {
              case '13032':  // Abandoned
                $options['attributes'] = array('class' => 'alert');
                break;

              case '9990':   // Seeking co-maintainer(s)
              case '9992':   // Seeking new maintainer
                $options['attributes'] = array('class' => 'warning');
                break;

            }
          }
          elseif ($term->vid == '46') { // Development status
            $development_status = $term->tid;
            switch ($term->tid) {
              case '9994':   // Obsolete
                $options['attributes'] = array('class' => 'alert');
                break;

              case '13030':  // Maintenance fixes only
              case '16374':  // No futher development
                $options['attributes'] = array('class' => 'warning');
                break;

            }
          }
          // Special-case module category terms to link to download+extend.
          if ($term->vid == $project_vid && $project_type->tid == '14') {
            // Only use the 'terms' style for module categories.
            $class = 'terms';
            $term_path = 'project/modules';
            $options['query'] = array('filters' => 'tid:' . $term->tid);
          }
          else {
            $term_path = taxonomy_term_path($term);
          }

          $links[] = l($term->name, $term_path, $options);
        }
        if ($vocabulary->vid == $project_vid) {
          // These are hard-coded, don't incur cost of check_plain().
          $label = t('!project_type categories', array('!project_type' => $project_type->label));
        }
        else {
          $label = check_plain($vocabulary->name);
        }
        $info[$label] = '<span class="' . $class . '">' . implode(', ', $links) . '</span>';
      }
    }
    if (empty($maintenance_status)) {
      $info[t('Maintenance status')] = '<span class="warning">' . t('Unknown') . '</span>';
    }
    if (empty($development_status) && !empty($node->versioncontrol_project['repo_id'])) {
      $info[t('Development status')] = '<span class="warning">' . t('Unknown') . '</span>';
    }
  }
  
  // Usage stats.
  $total_usage = project_usage_get_project_total_usage($node->nid);
  if ($total_usage) {
    $info[t('Reported installs')] = format_plural($total_usage,
      '<strong>1</strong> site currently reports using this @project-type. <a href="/project/usage/!project-shortname">View usage statistics</a>.',
      '<strong>@count</strong> sites currently report using this @project-type. <a href="/project/usage/!project-shortname">View usage statistics</a>.',
      array(
        '@project-type' => drupal_strtolower($project_type->label),
        '!project-shortname' => $node->project['uri'],
      )
    );
  }

  // Download stats.
  $downloads = db_result(db_query("SELECT sum(prf.downloads) FROM {project_release_nodes} prn INNER JOIN {project_release_file} prf ON prf.nid = prn.nid WHERE prn.pid = %d", $node->nid));
  if ($downloads > 0) {
    $info[t('Downloads')] = number_format($downloads);
  }

  // Automated tests.
  if (module_exists('pift')) {
    $has_auto_tests = db_result(db_query("SELECT pid FROM {pift_project} WHERE pid = %d", $node->nid));
    if (!empty($has_auto_tests)) {
      /// @todo Indicate if the tests are passing or not.
      $info[t('Automated tests')] = t('Enabled');
    }
  }

  $modified = format_date($node->changed, 'custom', 'F j, Y');

  return theme('drupalorg_project_meta_data', $info, $modified);
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_project_theme($existing, $type, $theme, $path) {
  return array(
    'drupalorg_project_meta_data' => array(
      'arguments' => array(
        'info' => NULL,
        'modified' => NULL,
      ),
      'template' => 'project-meta-data',
    ),
  );
}

/**
 * Return an array mapping term ID to name for the top-level project types.
 *
 * @param boolean $singular
 *   Should the name be singular or plural. Defaults to plural.
 */
function drupalorg_project_get_project_types($singular = FALSE) {
  if ($singular) {
    return array(
      '13' => t('Drupal core'),
      '22588' => t('Drupal.org project'),
      '14' => t('Module'),
      '15' => t('Theme'),
      '32' => t('Theme engine'),
      '29' => t('Translation'),
      '96' => t('Distribution'),
    );
  }
  else {
    return array(
      '13' => t('Drupal core'),
      '22588' => t('Drupal.org projects'),
      '14' => t('Modules'),
      '15' => t('Themes'),
      '32' => t('Theme engines'),
      '29' => t('Translations'),
      '96' => t('Distributions'),
    );
  }
}

/**
 * Implement hook_ctools_plugin_directory().
 */
function drupalorg_project_ctools_plugin_directory($module, $plugin) {
  if ($module == 'project_release' && $plugin == 'release_packager') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Sets the breadcrumb up for project navigation for the change records views.
 */
function drupalorg_project_views_pre_render(&$view) {
  switch ($view->name) {
    case 'change_records':
      if (count($view->args) > 0) {
        // Note: this returns FALSE if it isn't a project node.
        $proj_node = project_node_load($view->args[0]);
        if ($proj_node) {
          $extra[] = l($proj_node->title, 'node/' . $proj_node->nid);
          project_project_set_breadcrumb($proj_node, $extra);
        }
      }
      break;
  }
}

/**
 * Menu callback for serving up sandbox projects (or redirecting to full).
 */
function drupalorg_project_sandbox($node) {
  // If a sandbox project, do the same as node module does for page views.
  if (isset($node->project['sandbox']) && $node->project['sandbox']) {
    return node_page_view($node);
  }
  else {
    // Not a sandbox project, redirect to the node's usual path.
    drupal_goto('node/' . $node->nid, NULL, NULL, 301);
  }
}
