<?php

/**
 * @file
 *   Customizations and blocks for the handbook pages.
 */

/**
 * Implementation of hook_nodeapi().
 */
function drupalorg_handbook_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    $extra = '';
    switch ($node->nid) {
      case 322: // Mailing list subscription
        $extra = drupal_get_form('lists_subscribe_form');
        break;
      case 13355: // Site maintainers
        $extra = drupalorg_handbook_site_maintainers();
        break;
      case 109372: // Handbook maintainers
        $extra = drupalorg_handbook_maintainers();
        break;
      case 263594: // Revision maintainers
        $extra = drupalorg_handbook_revision_maintainers();
        break;
      case 23192: // Recent updates
        $extra = drupalorg_handbook_display_recent_updates();
        break;
    }
    $node->content['body']['#value'] .= $extra;

    $section = drupalorg_crosssite_section();

    if (isset($node->book['bid']) && ($section === 'documentation' || $section === 'community')) {
      // Prepend information about the page.
      $node->content['body']['#prefix'] = drupalorg_handbook_before_body($node);
      // Mark the taxonomy terms as rendered so they don't display on the node.
      foreach ($node->taxonomy as $term_id => $dummy) {
        $node->taxonomy[$term_id]->rendered = TRUE;
      }
      if ($section === 'documentation') {
        $node->extra_footer = theme('drupalorg_handbook_footer_line');
      }
    }
  }
  elseif (($op == 'update' || $op == 'insert') && !empty($node->book) && !empty($node->book['bid'])) {
    // Remove all cached versions of recently updated data (home & node 23192).
    cache_clear_all('drupalorg_handbook_recent_updates_', 'cache', TRUE);
  }
}

/**
 * Implementation of hook_link().
 *
 * Adds links to the bottom of documentation pages.
 */
function drupalorg_handbook_link($type, $object, $teaser = FALSE) {
  if ($type === 'node' && isset($object->book['bid'])) {
    return array('report' => drupalorg_handbook_moderate_link_info($object));
  }
}

/**
 * Returns the link information for the Report to moderator link.
 *
 * @param $node
 *   The node to make the link for.
 *
 * @return
 *   An array for the link (suitable for theme('link')), or NULL if the user
 *   does not have permission to create issues.
 */
function drupalorg_handbook_moderate_link_info($node) {
  if (!user_access('create project issues') || drupalorg_crosssite_section() !== 'documentation') {
    return NULL;
  }
  $url = url('node/' . $node->nid, array('absolute' => TRUE));
  return array(
    'title' => t('Report to moderator'),
    'href' => 'node/add/project-issue/documentation',
    'query' => array(
      'categories' => 'task',
      'component' => 'Vandalism/Spam',
      'title' => 'Moderation report for ' . $url,
      'body' => 'Describe why you are reporting ' . $url . ' to moderators:',
    ),
  );
}

/**
 * Creates a list of who recently updated a page, and call to edit.
 *
 * @param $node
 *   The node object.
 *
 * @return
 *   HTML for the list of contributors with call to edit.
 *
 * @see handbook-contributors.tpl.php
 */
function drupalorg_handbook_before_body($node) {
  $format = 'F j, Y';
  $modified = t('Last updated @changed.', array('@changed' => format_date($node->changed, 'custom', $format)));
  $created = '';
  $contributors = '';
  $edit_link = '';
  if (drupalorg_crosssite_section() === 'documentation') {
    $created = t('Created by !author on @created.', array('!author' => theme('username', $node), '@created' => format_date($node->created, 'custom', $format)));
    // Make a list of the 4 most recent different revision authors, not including
    // the original author.
    $contributor_list = array();
    foreach (node_revision_list($node) as $revision) {
      if (!isset($contributor_list[$revision->uid]) && $revision->uid !== $node->uid) {
        $contributor_list[$revision->uid] = theme('username', $revision);
      }
      if (count($contributor_list) >= 4) {
        break;
      }
    }
    if (!empty($contributor_list)) {
      $contributors = t('Edited by !contributors.', array('!contributors' => implode(', ', $contributor_list)));
    }

    if (node_access('update', $node)) {
      $edit_link = t('You can <a href="!url">edit this page</a>', array('!url' => url('node/' . $node->nid . '/edit'))) . (empty($contributor_list) ? '.' : t(', too.'));
    }
    elseif (!user_is_logged_in()) {
      $edit_link = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination())) . '.';
    }
  }
  return theme('drupalorg_handbook_contributors', $created, $modified, $contributors, $edit_link);
}

/**
 * Gathers meta-data information for the book page sidebar.
 *
 * @return
 *   HTML for the book page sidebar.
 */
function drupalorg_handbook_meta_data() {
  static $about;

  if (!isset($about)) {
    $about = array('status' => '');
    $node = menu_get_object();
    $vocabularies = taxonomy_get_vocabularies();

    foreach ($node->taxonomy as $term_id => $term) {
      if (isset($vocabularies[$term->vid])) {
        switch ($term->vid) {
          case 31:
            // Page status vocabulary: build status line.
            $class = 'page-ok';
            switch ($term_id) {
              case 126: // Incomplete.
              case 128: // Needs updating.
              case 18960: // Needs tech review.
              case 18962: // Needs copy/style review.
              case 18964: // Needs dividing.
                $class = 'page-needs-work';
                break;

              case 127: // Insecure.
              case 129: // Deprecated.
                $class = 'page-major-problem';
                break;
            }
            $about['status'] = '<p class="page-status ' . $class . '"><span>' . check_plain($term->name) . '</span></p>';
            break;

          case 54:
            // Keywords vocabulary: print a link, separate section.
            $keywords[] = l($term->name, taxonomy_term_path($term));
            break;

          default:
            // Any other vocabulary: print the name.
            $vocab_name = check_plain($vocabularies[$term->vid]->name);
            $about[$vocab_name][] = check_plain($term->name);
            break;
        }
      }
    }
    if (!empty($keywords)) {
      // Keywords at the end.
      $about[t('Keywords')] = $keywords;
    }
  }

  return $about;
}

/**
 * List usernames with site maintainer role.
 */
function drupalorg_handbook_site_maintainers() {
  $output = 'If you have been around for a while, and you want to help maintain Drupal.org and are willing to accept the added responsibilities that come with it, sign up on the <a href="http://drupal.org/mailing-lists">Infrastructure team</a> list.';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name
    FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid
    WHERE r.rid = 3 OR r.rid = 4 OR r.rid = 9
    ORDER BY u.name "); // 3 = site maintainer, 4 = administrator
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

/**
 * List usernames with handbook maintainer role.
 */
function drupalorg_handbook_maintainers() {
  $output = '<p>If you are interested in helping maintain/update/correct the documentation on Drupal.org, read up on the <a href="http://drupal.org/node/24572">many ways to get involved</a>.</p>';
  $output .= '<p>Note: Many of our <a href="/site-maintainers">site maintainers</a> also participate on the documentation team and are not listed here. Due to their broader responsibilities on drupal.org, site maintainers are listed separately.</p>';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name
    FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid
    WHERE r.rid = 5 OR r.rid = 9
    ORDER BY u.name "); // 3 = site maintainer, 4 = administrator 5 = document maintainer
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

/**
 * Collect and cache revision maintainers (those who made revisions to books).
 */
function drupalorg_handbook_revision_maintainers() {
  if ($cache = cache_get('node_263594')) {
    return $cache->data;
  }

  $result = db_query("SELECT u.uid, u.name, COUNT(nr.vid) AS pages
    FROM {node} n INNER JOIN {node_revisions} nr ON n.nid = nr.nid INNER JOIN {users} u ON u.uid = nr.uid
    WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0
    GROUP BY u.name
    ORDER BY pages DESC");

  $list = array();
  while ($contributor = db_fetch_object($result)) {
    $list[] = theme('username', $contributor) ." (". format_plural($contributor->pages, "@count revision", "@count revisions") .")";
  }

  $output = theme('item_list', $list);
  cache_set('node_263594', $output, 'cache', 300);
  return $output;
}

/**
 * API function to get recent update information for the documentation pages.
 */
function drupalorg_handbook_get_recent_updates($limit = 50) {
  return db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.changed, r.log, u.uid, u.name
    FROM {node} n
    INNER JOIN {book} b ON n.nid = b.nid INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {users} u ON u.uid = r.uid
    WHERE n.status = 1
    ORDER BY n.changed DESC"), 0, $limit);
}

/**
 * List most recent updates to book pages for moderation reasons.
 */
function drupalorg_handbook_display_recent_updates() {
  global $user;

  // Represents the number of results to retrieve. Also utilized for cache field name.
  $count = 50;
  $key = 'drupalorg_handbook_recent_updates_' . $count . ':' . ($user->uid === 0 ? 'anon' : 'auth');
  if ($cache = cache_get($key)) {
    $output = $cache->data;
  }
  else {
    $result = drupalorg_handbook_get_recent_updates($count);
    while ($page = db_fetch_object($result)) {
      $row = array(
        l($page->title, "node/$page->nid") .' '. theme('mark', node_mark($page->nid, $page->changed)) . ($page->log ? "<br />". check_plain($page->log) : ''),
        theme('username', $page),
        t('%time ago', array('%time' => format_interval(time() - $page->changed))),
      );
      if (user_access('view revisions')) {
        $row[] = l(t('Diff'), "node/$page->nid/revisions/view/latest");
      }
      $rows[] = $row;
    }
    $header = array('Page', 'Edited', 'Updated');
    if (user_access('view revisions')) {
      $header[] = 'Diff';
    }

    $output = theme('table', $header, $rows);
    cache_set($key, $output);
  }
  return $output;
}

/**
 * License and quick links blocks for docs.
 */
function drupalorg_handbook_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'license' => array(
          'info' => t('Handbook License'),
          'cache' => BLOCK_CACHE_PER_PAGE,
        ),
        'info' => array(
          'info' => t('Documentation home info'),
          'cache' => BLOCK_CACHE_PER_PAGE,
        ),
        'meta-sidebar' => array(
          'info' => t('Documentation status'),
          'cache' => BLOCK_NO_CACHE,
        ),
        'about-page' => array(
          'info' => t('Documentation about'),
          'cache' => BLOCK_NO_CACHE,
        ),
      );

    case 'view':
      $section = drupalorg_crosssite_section();
      $node = menu_get_object();
      switch ($delta) {
        case 'license':
          if ($section === 'documentation') {
            return array(
              'content' => t('Drupal’s online documentation is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. PHP code is distributed under the <a href="@gpl_url">GNU General Public License</a>.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'), '@gpl_url' => url('http://www.gnu.org/licenses/old-licenses/gpl-2.0.html'))),
            );
          }
          break;

        case 'info':
          return array(
            'subject' => t('Help Us Maintain Documentation'),
            'content' => '<p>' . t('The Drupal.org online documentation is written by the Drupal community in co-operation with the <a href="@docteam_url">Documentation Team</a>. When you are logged in, you can:', array('@docteam_url' => url('node/24572'))) . '</p>' .
            '<p>' . t('Edit most Documentation pages by clicking “Edit” at the top of the page.') . '</p>' .
            '<p>' . t('Add new pages by using the “add a child page” link at the bottom of the page.') . '</p>' .
            '<p>' . t('Use the <a href="@issues-url">Documentation issue queue</a> to propose major changes and report problems.', array('@issues-url' => url('project/issues/documentation'))) . '</p>'
          );

        case 'meta-sidebar':
          if (($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) {
            $about = drupalorg_handbook_meta_data();
            $links = array();
            if (node_access('update', $node)) {
              $links['edit'] = t('<a href="!url">Edit</a> this page', array('!url' => url('node/' . $node->nid . '/edit')));
            }
            elseif (!user_is_logged_in()) {
              $links['edit'] = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination()));
            }
            $report_link = drupalorg_handbook_moderate_link_info($node);
            if (isset($report_link)) {
              $links['report'] = l($report_link['title'], $report_link['href'], array('query' => $report_link['query']));
            }

            return array(
              'subject' => t('Page status'),
              'content' => $about['status'] . '<p>' . implode('<br />', $links) . '</p>',
            );
          }
          break;

        case 'about-page':
          if (($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) {
            $about = drupalorg_handbook_meta_data();
            unset($about['status']);
            if (!empty($about)) {
              return array(
                'subject' => t('About this page'),
                'content' => theme('drupalorg_handbook_meta_sidebar', $about),
              );
            }
          }
          break;
     }
  }
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_handbook_theme($existing, $type, $theme, $path) {
  return array(
    'drupalorg_handbook_footer_line' => array(
      'arguments' => array(),
    ),
    'drupalorg_handbook_contributors' => array(
      'arguments' => array(
        'created' => '',
        'updated' => '',
        'contributors' => '',
        'edit_link' => '',
      ),
      'template' => 'handbook-contributors',
    ),
    'drupalorg_handbook_meta_sidebar' => array(
      'arguments' => array(
        'about' => array(),
      ),
      'template' => 'handbook-meta-sidebar',
    ),
  );
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_handbook_preprocess_drupalorg_home(&$vars) {
  // Represents the number of results to retrieve. Also utilized for cache field name.
  $count = 5;
  if ($cache = cache_get('drupalorg_handbook_recent_updates_' . $count)) {
    $recent_updates = $cache->data;
  }
  else {
    $result = drupalorg_handbook_get_recent_updates($count);
    $recent_updates = '';
    while ($node = db_fetch_object($result)) {
      // Fake the created time for the theme function, so we can easily theme it.
      $node->created = $node->changed;
      $recent_updates .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>';
    }
    $recent_updates .= '<p>' . l(t('More updates…'), 'handbook/updates') .'</p>';
    cache_set('drupalorg_handbook_recent_updates_' . $count, $recent_updates);
  }
  // We have no place to link this to in a nice way.
  // $fresh_news .= '<p>'. l(t('More documentation updates...'), '...') .'</p>';
  $vars['tab_content_docs'] = $recent_updates;
}

/**
 * Returns HTML for a footer line for a documentation page.
 *
 * @ingroup themeable
 */
function theme_drupalorg_handbook_footer_line() {
  return '<p class="support"><strong>' . t('Looking for support? Visit the !forumlink, or join #drupal-support in !irclink.',
    array(
     '!forumlink' => l(t('Drupal.org forums'), 'forum'),
     '!irclink' => l(t('IRC'), 'node/108355'),
    )) . '</strong></p>';
}
