<?php

/**
 * @file
 *   Customizations and blocks for the handbook pages.
 */

/**
 * Implementation of hook_nodeapi().
 */
function drupalorg_handbook_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    $extra = '';
    switch ($node->nid) {
      case 322: // Mailing list subscription
        $extra = drupal_get_form('lists_subscribe_form');
        break;
      case 13355: // Site maintainers
        $extra = drupalorg_handbook_site_maintainers();
        break;
      case 263594: // Revision maintainers
        $extra = drupalorg_handbook_revision_maintainers();
        break;
    }
    $node->content['body']['#value'] .= $extra;

    $section = drupalorg_crosssite_section();

    if (isset($node->book['bid']) && ($section === 'documentation' || $section === 'community')) {
      // Prepend information about the page.
      $node->content['body']['#prefix'] = drupalorg_handbook_before_body($node);
      // Mark the taxonomy terms as rendered so they don't display on the node.
      foreach ($node->taxonomy as $term_id => $dummy) {
        $node->taxonomy[$term_id]->rendered = TRUE;
      }
      if ($section === 'documentation') {
        $node->extra_footer = theme('drupalorg_handbook_footer_line');
      }
    }
    elseif ($node->type == 'book_listing') {
      // Mark the taxonomy terms as rendered so they don't display on the node.
      foreach ($node->taxonomy as $term_id => $dummy) {
        $node->taxonomy[$term_id]->rendered = TRUE;
      }
    }
  }
  elseif (($op == 'update' || $op == 'insert') && !empty($node->book) && !empty($node->book['bid'])) {
    // Remove all cached versions of recently updated data (home).
    cache_clear_all('drupalorg_handbook_recent_updates_', 'cache', TRUE);
  }
}

/**
 * Implementation of hook_link().
 *
 * Adds links to the bottom of documentation pages.
 */
function drupalorg_handbook_link($type, $object, $teaser = FALSE) {
  if ($type === 'node' && isset($object->book['bid'])) {
    return array('report' => drupalorg_handbook_moderate_link_info($object));
  }
}

/**
 * Returns the link information for the Report to moderator link.
 *
 * @param $node
 *   The node to make the link for.
 *
 * @return
 *   An array for the link (suitable for theme('link')), or NULL if the user
 *   does not have permission to create issues.
 */
function drupalorg_handbook_moderate_link_info($node) {
  if (!user_access('create project issues') || (drupalorg_crosssite_section() !== 'documentation')) {
    return NULL;
  }
  return array(
    'title' => t('Report to moderator'),
    'href' => 'node/add/project-issue/webmasters',
    'query' => array(
      'categories' => 'task',
      'component' => 'Spam',
      'title' => t('Moderation report for !title', array('!title' => $node->title)),
      'body' => t('I am reporting !url to moderators because:', array('!url' => url('node/' . $node->nid, array('absolute' => TRUE)))),
    ),
  );
}

/**
 * Creates a list of who recently updated a page, and call to edit.
 *
 * @param $node
 *   The node object.
 *
 * @return
 *   HTML for the list of contributors with call to edit.
 *
 * @see handbook-contributors.tpl.php
 */
function drupalorg_handbook_before_body($node) {
  $format = 'F j, Y';
  $modified = t('Last updated @changed.', array('@changed' => format_date($node->changed, 'custom', $format)));
  $created = '';
  $contributors = '';
  $edit_link = '';
  if (drupalorg_crosssite_section() === 'documentation') {
    $created = t('Created by !author on @created.', array('!author' => theme('username', $node), '@created' => format_date($node->created, 'custom', $format)));
    // Make a list of the 4 most recent different revision authors, not including
    // the original author.
    $contributor_list = array();
    foreach (node_revision_list($node) as $revision) {
      if (!isset($contributor_list[$revision->uid]) && $revision->uid !== $node->uid) {
        $contributor_list[$revision->uid] = theme('username', $revision);
      }
      if (count($contributor_list) >= 4) {
        break;
      }
    }
    if (!empty($contributor_list)) {
      $contributors = t('Edited by !contributors.', array('!contributors' => implode(', ', $contributor_list)));
    }

    if (node_access('update', $node)) {
      $edit_link = t('You can <a href="!url">edit this page</a>', array('!url' => url('node/' . $node->nid . '/edit'))) . (empty($contributor_list) ? '.' : t(', too.'));
    }
    elseif (!user_is_logged_in()) {
      $edit_link = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination())) . '.';
    }
  }
  return theme('drupalorg_handbook_contributors', $created, $modified, $contributors, $edit_link);
}

/**
 * Gathers meta-data information for the book page sidebar.
 *
 * @return
 *   HTML for the book page sidebar.
 */
function drupalorg_handbook_meta_data() {
  static $about;

  if (!isset($about)) {
    $about = array('status' => '');
    $node = menu_get_object();
    $vocabularies = taxonomy_get_vocabularies();

    foreach ($node->taxonomy as $term_id => $term) {
      if (isset($vocabularies[$term->vid])) {
        switch ($term->vid) {
          case 31:
            // Page status vocabulary: build status line.
            $class = 'page-ok';
            switch ($term_id) {
              case 126: // Incomplete.
              case 128: // Needs updating.
              case 18960: // Needs tech review.
              case 18962: // Needs copy/style review.
              case 18964: // Needs dividing.
                $class = 'page-needs-work';
                break;

              case 127: // Insecure.
              case 129: // Deprecated.
                $class = 'page-major-problem';
                break;
            }
            $about['status'] = '<p class="page-status ' . $class . '"><span>' . check_plain($term->name) . '</span></p>';
            break;

          case 60:
            // Book availability: use as status line.
            $class = 'page-ok';
            switch ($term_id) {
              case 38418: // Out of print
              case 38420: // Upcoming
                $class = 'page-needs-work';
                break;

              case 38416: // Canceled
                $class = 'page-major-problem';
                break;
            }
            $about['status'] = '<p class="page-status ' . $class . '"><span>' . check_plain($term->name) . '</span></p>';
            break;

          case 54:
            // Keywords vocabulary: print a link, separate section.
            $keywords[] = l($term->name, taxonomy_term_path($term));
            break;

          default:
            // Any other vocabulary: print the name.
            $vocab_name = check_plain($vocabularies[$term->vid]->name);
            $about[$vocab_name][] = check_plain($term->name);
            break;
        }
      }
    }
    if (!empty($keywords)) {
      // Keywords at the end.
      $about[t('Keywords')] = $keywords;
    }
  }

  return $about;
}

/**
 * List usernames with site maintainer role.
 */
function drupalorg_handbook_site_maintainers() {
  $output = 'If you have been around for a while, and you want to help maintain Drupal.org and are willing to accept the added responsibilities that come with it, sign up on the <a href="http://drupal.org/mailing-lists">Infrastructure team</a> list.';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name
    FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid
    WHERE r.rid = 3 OR r.rid = 4 OR r.rid = 9
    ORDER BY u.name "); // 3 = site maintainer, 4 = administrator
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

/**
 * Collect and cache revision maintainers (those who made revisions to books).
 *
 * If the page visited is node/263594/filter, then filter is used as an input
 * to strtotime(), to limit to revisions after that date/time.
 */
function drupalorg_handbook_revision_maintainers() {
  $filter = check_plain(arg(2));
  $cache_key = 'node_263594-' . $filter;
  if ($cache = cache_get($cache_key)) {
    return $cache->data;
  }

  $since = 0;
  $output = '';
  if ($filter) {
    $trial = strtotime($filter);
    if ($trial) {
      $since = $trial;
      $output .= '<p>' . t('Contributions since !filter', array('!filter' => $filter)) . '</p>';
    }
  }

  $result = db_query("SELECT u.uid, u.name, COUNT(nr.vid) AS pages
    FROM {node} n INNER JOIN {node_revisions} nr ON n.nid = nr.nid INNER JOIN {users} u ON u.uid = nr.uid
    WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0 AND nr.timestamp > %d
    GROUP BY u.name
    ORDER BY pages DESC", $since);

  $list = array();
  $total = 0;
  $count = 0;
  while ($contributor = db_fetch_object($result)) {
    $list[] = theme('username', $contributor) ." (". format_plural($contributor->pages, "@count revision", "@count revisions") .")";
    $total += $contributor->pages;
    $count++;
  }

  $output .= '<p>' . format_plural($count, '@count contributor', '@count contributors') . '</p>';
  $output .= '<p>' . format_plural($total, '@count total revision', '@count total revisions') . '</p>';
  $output .= theme('item_list', $list);
  cache_set($cache_key, $output, 'cache', 300);
  return $output;
}

/**
 * API function to get recent update information for the documentation pages.
 */
function drupalorg_handbook_get_recent_updates($limit = 50) {
  return db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.changed, r.log, u.uid, u.name
    FROM {node} n
    INNER JOIN {book} b ON n.nid = b.nid INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {users} u ON u.uid = r.uid
    WHERE n.status = 1
    ORDER BY n.changed DESC"), 0, $limit);
}

/**
 * License and quick links blocks for docs.
 */
function drupalorg_handbook_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'license' => array(
          'info' => t('Handbook License'),
          'cache' => BLOCK_CACHE_PER_PAGE,
        ),
        'meta-sidebar' => array(
          'info' => t('Documentation status'),
          'cache' => BLOCK_NO_CACHE,
        ),
        'about-page' => array(
          'info' => t('Documentation about'),
          'cache' => BLOCK_NO_CACHE,
        ),
        'book-listing-info' => array(
          'info' => t('Book listings information'),
          'cache' => BLOCK_NO_CACHE,
        ),
        'book-listing-link' => array(
          'info' => t('Book listing add link'),
          'cache' => BLOCK_NO_CACHE,
        ),
      );

    case 'view':
      $section = drupalorg_crosssite_section();
      $node = menu_get_object();
      switch ($delta) {
        case 'license':
          if ($section === 'documentation') {
            return array(
              'content' => t('Drupal’s online documentation is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. PHP code is distributed under the <a href="@gpl_url">GNU General Public License</a>. Comments on documentation pages are used to improve content and then deleted.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'), '@gpl_url' => url('http://www.gnu.org/licenses/old-licenses/gpl-2.0.html'))),
            );
          }
          break;

        case 'meta-sidebar':
          if ((($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) || (isset($node) && $node->type == 'book_listing')) {
            $about = drupalorg_handbook_meta_data();
            $links = array();
            if (node_access('update', $node) && $node->type !== 'book_listing') {
              $links['edit'] = t('<a href="!url">Edit</a> this page', array('!url' => url('node/' . $node->nid . '/edit')));
            }
            elseif (!user_is_logged_in() && $node->type !== 'book_listing') {
              $links['edit'] = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination()));
            }
            $report_link = drupalorg_handbook_moderate_link_info($node);
            if (isset($report_link)) {
              $links['report'] = l($report_link['title'], $report_link['href'], array('query' => $report_link['query']));
            }

            $title =  (isset($node) && $node->type == 'book_listing') ? t('Book status') : t('Page status');
            return array(
              'subject' => $title,
              'content' => $about['status'] . '<p>' . implode('<br />', $links) . '</p>',
            );
          }
          break;

        case 'about-page':
          if ((($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) || (isset($node) && $node->type == 'book_listing')) {
            $about = drupalorg_handbook_meta_data();
            unset($about['status']);
            if (!empty($about)) {
              $title =  (isset($node) && $node->type == 'book_listing') ? t('About this book') : t('About this page');
              return array(
                'subject' => $title,
                'content' => theme('drupalorg_handbook_meta_sidebar', $about),
              );
            }
          }
          break;

       case 'book-listing-info':
          if ((isset($node) && $node->type == 'book_listing') ||
            drupalorg_crosssite_child_of('node/add/book-listing') ||
            drupalorg_crosssite_child_of('books')) {
            return array(
              'subject' => '',
              'content' => drupalorg_handbook_book_listing_block(),
            );
          }
          break;

       case 'book-listing-link':
          if ((isset($node) && $node->type == 'book_listing') ||
            drupalorg_crosssite_child_of('node/add/book-listing')) {
            return array(
              'subject' => '',
              'content' => drupalorg_handbook_book_link_block(FALSE),
            );
          }
          elseif (drupalorg_crosssite_child_of('books')) {
            return array(
              'subject' => '',
              'content' => drupalorg_handbook_book_link_block(TRUE),
            );
          }
          break;
     }
  }
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_handbook_theme($existing, $type, $theme, $path) {
  return array(
    'drupalorg_handbook_footer_line' => array(
      'arguments' => array(),
    ),
    'drupalorg_handbook_contributors' => array(
      'arguments' => array(
        'created' => '',
        'updated' => '',
        'contributors' => '',
        'edit_link' => '',
      ),
      'template' => 'handbook-contributors',
    ),
    'drupalorg_handbook_meta_sidebar' => array(
      'arguments' => array(
        'about' => array(),
      ),
      'template' => 'handbook-meta-sidebar',
    ),
  );
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_handbook_preprocess_drupalorg_home(&$vars) {
  // Represents the number of results to retrieve. Also utilized for cache field name.
  $count = 5;
  if ($cache = cache_get('drupalorg_handbook_recent_updates_' . $count)) {
    $recent_updates = $cache->data;
  }
  else {
    $result = drupalorg_handbook_get_recent_updates($count);
    $recent_updates = '';
    while ($node = db_fetch_object($result)) {
      // Fake the created time for the theme function, so we can easily theme it.
      $node->created = $node->changed;
      $recent_updates .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>';
    }
    $recent_updates .= '<p>' . l(t('More documentation…'), 'documentation') . '</p>';
    cache_set('drupalorg_handbook_recent_updates_' . $count, $recent_updates);
  }
  $vars['tab_content_docs'] = $recent_updates;
}

/**
 * Returns HTML for a footer line for a documentation page.
 *
 * @ingroup themeable
 */
function theme_drupalorg_handbook_footer_line() {
  return '<p class="support"><strong>' . t('Looking for support? Visit the !forumlink, or join #drupal-support in !irclink.',
    array(
     '!forumlink' => l(t('Drupal.org forums'), 'forum'),
     '!irclink' => l(t('IRC'), 'node/108355'),
    )) . '</strong></p>';
}

/**
 * Implements hook_form_FORM_ID_alter() for comment_form().
 *
 * Adds a disclaimer if a book node is being commented on.
 */
function drupalorg_handbook_form_comment_form_alter(&$form, $form_state) {
  // Make sure we are on a form to add a new comment (not edit existing),
  // and that the node ID is set.
  if (isset($form['#parameters'][2]['nid']) && !isset($form['#parameters'][2]['cid'])) {
    $node = node_load($form['#parameters'][2]['nid']);
    if (isset($node) && isset($node->book['bid'])) {
      // This is a node in a book. Display disclaimer.
      $form['drupalorg-disclaimer'] = array(
        '#type' => 'markup',
        '#weight' => -2,
        '#value' => '<p>' . t('Note:') . '</p>' .
          '<ul>' .
          '<li>' . t('Is your comment an addition, problem report, or example? Instead of adding a comment, edit the page content directly. Or, if you are unsure of the correct edits, add a comment here, and then edit the page to update the page status. Be aware that comments are removed after page edits are made.') . '</li>' .
          '<li>' . t('Is your comment a question or request for support? Take it to the <a href="!forums">forums</a>. Questions are not answered here, and comments not providing useful information are removed.', array('!forums' => url('forum'))) . '</li>' .
          '</ul>',
      );
    }
  }
}

/**
 * Returns block content for the book listing sidebar block.
 */
function drupalorg_handbook_book_listing_block() {
  $content = '';

  $content .= '<p>' . t('Drupal.org’s online content is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. Book descriptions are generally copyrighted by the book author or publisher, and are added to this web site with permission.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'))) . '</p>';

  return $content;
}

/**
 * Returns block content for the book add link sidebar block.
 */
function drupalorg_handbook_book_link_block($include_add_link) {
  $content = '';

  if ($include_add_link && user_access('create book_listing content')) {
    $content .= '<p>' . l(t('Add book listing'), 'node/add/book-listing', array('attributes' => array('class' => 'action-button'))) . '</p>';
  }

  $content .= '<p>' . l(t('Book listing guidelines'), 'node/1691562') . '</p>';

  return $content;
}


/**
 * Implementation of template_preprocess_content_field().
 *
 * Turn ISBN-10 field into affiliate link to purchase from Amazon.
 * Rewrite or unset Packt purchase link (unset if not to packtpub.com)
 */
function drupalorg_handbook_preprocess_content_field(&$variables){
  if ($variables['field_name'] == 'field_book_isbn_10') {
    $amazon_link = '<a class="amazon-link" '
      . ' title="Ordering via this link benefits the Drupal Association"'
      . ' href="http://www.amazon.com/dp/' . $variables['items'][0]['view']
      . '/?tag=drupal0a-20" rel="nofollow">Order from Amazon.com</a>';
    $variables['items'][0]['view'] = $amazon_link;
  }
  if ($variables['field_name'] == 'field_book_purchase_link') {
    if (!strpos($variables['items'][0]['url'], 'packtpub')) {
      unset($variables['items'][0]['view']);
    }
    else {
      $packt_link = '<a class="packt-link" '
        . ' title="Ordering via this link benefits the Drupal Association"'
        . ' href="' . $variables['items'][0]['url'] . '" rel="nofollow">'
        . 'Order from Packt</a>';
      $variables['items'][0]['view'] = $packt_link;
    }
  }
}
