<?php

/**
 * @file
 *   Customizations and blocks for the handbook pages.
 */

/**
 * Implements hook_node_view().
 */
function drupalorg_handbook_node_view($node, $view_mode = 'full') {
  if ($view_mode == 'full') {
    $section = drupalorg_crosssite_section();

    if (isset($node->book['bid']) && ($section === 'documentation' || $section === 'community')) {

      // Prepend information about the page.
      $node->content['body']['#prefix'] = drupalorg_handbook_before_body($node);

      // Mark the taxonomy items as rendered so they don't display on the node.
      // These are elements of $node->content that are named
      // 'taxonomy_vocabulary_*'.
      foreach ($node->content as $key => $value) {
        if (strpos($key, 'taxonomy_vocabulary_') === 0) {
          hide($node->content[$key]);
        }
      }

      // Add the extra footer line.
      if ($section === 'documentation') {
        $node->content['extra_footer'] = array(
          '#markup' => theme('drupalorg_handbook_footer_line'),
          '#weight' => 150,
        );
      }

      // Add a "report to moderator" link.
      $node->content['links']['drupalorg_report'] = array(
        '#theme' => 'links__node__drupalorg',
        '#links' => array(
          'report' => drupalorg_handbook_moderate_link_info($node),
        ),
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
    elseif ($node->type == 'book_listing') {
      // Mark the taxonomy items as rendered so they don't display on the node.
      // These are elements of $node->content that are named
      // 'taxonomy_vocabulary_*'.
      foreach ($node->content as $key => $value) {
        if (strpos($key, 'taxonomy_vocabulary_') === 0) {
          hide($node->content[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function drupalorg_handbook_node_access($node, $op, $account) {
  if ($op == 'update') {
    // The documentation team lock pages by setting the body filter format to
    // a format which only privileged accounts have access to. This behaviour
    // worked in D6 but not D7, so we need to workaround this by restricting
    // node editing access based on the body filter format.
    // @see http://drupal.org/node/1824490
    if (isset($node->body)) {
      foreach ($node->body as $langcode => $items) {
        foreach ($items as $delta => $item) {
          // filter_access() only checks the ->format member, which $item
          // provides, so using it directly saves calling filter_format_load().
          if (!filter_access((object)$item, $account)) {
            // The user doesn't have permissions to use the body filter format,
            // so deny access to edit the page.
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }
}

/**
 * Returns the link information for the Report to moderator link.
 *
 * @param $node
 *   The node to make the link for.
 *
 * @return
 *   An array for the link (suitable for theme('link')), or NULL if the user
 *   does not have permission to create issues.
 */
function drupalorg_handbook_moderate_link_info($node) {
  if (!user_access('create project_issue content') || (drupalorg_crosssite_section() !== 'documentation')) {
    return NULL;
  }
  return array(
    'title' => t('Report to moderator'),
    'href' => 'node/add/project-issue/documentation',
    'query' => array(
      'categories' => 'task',
      'component' => 'Correction/Clarification',
      'title' => t('Moderation report for !title', array('!title' => $node->title)),
      'body' => t('I am reporting !url to moderators because:', array('!url' => url('node/' . $node->nid, array('absolute' => TRUE)))),
    ),
  );
}

/**
 * Creates a list of who recently updated a page, and call to edit.
 *
 * @param $node
 *   The node object.
 *
 * @return
 *   HTML for the list of contributors with call to edit.
 *
 * @see handbook-contributors.tpl.php
 */
function drupalorg_handbook_before_body($node) {
  $format = 'F j, Y';
  $modified = t('Last updated @changed.', array('@changed' => format_date($node->changed, 'custom', $format)));
  $created = '';
  $contributors = '';
  $edit_link = '';
  if (drupalorg_crosssite_section() === 'documentation') {
    $created = t('Created on @created.', array('@created' => format_date($node->created, 'custom', $format)));
    // Make a list of the 4 most recent different revision authors.
    $contributor_list = array();
    foreach (node_revision_list($node) as $revision) {
      if (!isset($contributor_list[$revision->uid])) {
        $contributor_list[$revision->uid] = theme('username', array('account' => $revision));
      }
      if (count($contributor_list) >= 4) {
        break;
      }
    }
    if (!empty($contributor_list)) {
      $contributors = t('Edited by !contributors.', array('!contributors' => implode(', ', $contributor_list)));
    }

    if (node_access('update', $node)) {
      $edit_link = t('You can <a href="!url">edit this page</a>', array('!url' => url('node/' . $node->nid . '/edit'))) . (empty($contributor_list) ? '.' : t(', too.'));
    }
    elseif (!user_is_logged_in()) {
      $edit_link = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination())) . '.';
    }
  }
  return theme('drupalorg_handbook_contributors', array('created' => $created, 'updated' => $modified, 'contributors' => $contributors, 'edit_link' => $edit_link));
}

/**
 * Gathers meta-data information for the book page sidebar.
 *
 * @return
 *   HTML for the book page sidebar.
 */
function drupalorg_handbook_meta_data() {
  static $about;

  if (!isset($about)) {
    $about = array('status' => '');
    $node = menu_get_object();
    $vocabularies = taxonomy_get_vocabularies();

    if (!$node) {
      return $about;
    }

    foreach (field_info_instances('node', $node->type) as $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['module'] === 'taxonomy' && count($node->{$field['field_name']}) > 0) {
        foreach (field_available_languages('node', $field) as $langcode) {
          foreach ($node->{$field['field_name']}[$langcode] as $item) {
            $term = taxonomy_term_load($item['tid']);

            if (isset($vocabularies[$term->vid])) {
              switch ($term->vid) {
                case 31:
                  // Page status vocabulary: build status line.
                  $class = 'page-ok';
                  switch ($term->tid) {
                    case 126: // Incomplete.
                    case 128: // Needs updating.
                    case 18960: // Needs tech review.
                    case 18962: // Needs copy/style review.
                    case 18964: // Needs dividing.
                      $class = 'page-needs-work';
                      break;

                    case 127: // Insecure.
                    case 129: // Deprecated.
                      $class = 'page-major-problem';
                      break;
                  }
                  $about['status'] = '<p class="page-status ' . $class . '"><span>' . check_plain($term->name) . '</span></p>';
                  break;

                case 60:
                  // Book availability: use as status line.
                  $class = 'page-ok';
                  switch ($term->tid) {
                    case 38418: // Out of print
                    case 38420: // Upcoming
                      $class = 'page-needs-work';
                      break;

                    case 38416: // Canceled
                      $class = 'page-major-problem';
                      break;
                  }
                  $about['status'] = '<p class="page-status ' . $class . '"><span>' . check_plain($term->name) . '</span></p>';
                  break;

                case 54:
                  // Keywords vocabulary: print a link, separate section.
                  $keywords[] = l($term->name, 'taxonomy/term/' . $term->tid);
                  break;

                default:
                  // Any other vocabulary: print the name.
                  $vocab_name = check_plain($vocabularies[$term->vid]->name);
                  $about[$vocab_name][] = check_plain($term->name);
                  break;
              }
            }
          }
        }
      }
    }

    if (!empty($keywords)) {
      // Keywords at the end.
      $about[t('Keywords')] = $keywords;
    }
  }

  return $about;
}

/**
 * Implements hook_block_info().
 */
function drupalorg_handbook_block_info() {
  return array(
    'license' => array(
      'info' => t('Handbook License'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'meta-sidebar' => array(
      'info' => t('Documentation status'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'about-page' => array(
      'info' => t('Documentation about'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'book-listing-info' => array(
      'info' => t('Book listings information'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'book-listing-link' => array(
      'info' => t('Book listing add link'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_handbook_block_view($delta) {
  $section = drupalorg_crosssite_section();
  $node = menu_get_object();
  switch ($delta) {
    case 'license':
      if ($section === 'documentation') {
        return array(
          'subject' => '',
          'content' => t('Drupal’s online documentation is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. PHP code is distributed under the <a href="@gpl_url">GNU General Public License</a>. Comments on documentation pages are used to improve content and then deleted.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'), '@gpl_url' => url('http://www.gnu.org/licenses/old-licenses/gpl-2.0.html'))),
        );
      }
      break;

    case 'meta-sidebar':
      if ((($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) || (isset($node) && $node->type == 'book_listing')) {
        $about = drupalorg_handbook_meta_data();
        $links = array();
        if (node_access('update', $node) && $node->type !== 'book_listing') {
          $links['edit'] = t('<a href="!url">Edit</a> this page', array('!url' => url('node/' . $node->nid . '/edit')));
        }
        elseif (!user_is_logged_in() && $node->type != 'book_listing') {
          $links['edit'] = l(t('Log in to edit this page'), 'user', array('query' => drupal_get_destination()));
        }
        $report_link = drupalorg_handbook_moderate_link_info($node);
        if (isset($report_link)) {
          $links['report'] = l($report_link['title'], $report_link['href'], array('query' => $report_link['query']));
        }

        return array(
          'subject' => (isset($node) && $node->type == 'book_listing') ? t('Book status') : t('Page status'),
          'content' => $about['status'] . '<p>' . implode('<br />', $links) . '</p>',
        );
      }
      break;

    case 'about-page':
      if ((($section === 'documentation' || $section === 'community') && isset($node) && isset($node->book['bid'])) || (isset($node) && $node->type == 'book_listing')) {
        $about = drupalorg_handbook_meta_data();
        unset($about['status']);
        if (!empty($about)) {
          return array(
            'subject' => (isset($node) && $node->type == 'book_listing') ? t('About this book') : t('About this page'),
            'content' => theme('drupalorg_handbook_meta_sidebar', array('about' => $about)),
          );
        }
      }
      break;

    case 'book-listing-info':
      if ((isset($node) && $node->type == 'book_listing') ||
        drupalorg_crosssite_child_of('node/add/book-listing') ||
        drupalorg_crosssite_child_of('books')) {
        return array(
          'subject' => '',
          'content' => drupalorg_handbook_book_listing_block(),
        );
      }
      break;

    case 'book-listing-link':
      if ((isset($node) && $node->type == 'book_listing') ||
        drupalorg_crosssite_child_of('node/add/book-listing')) {
        return array(
          'subject' => '',
          'content' => drupalorg_handbook_book_link_block(FALSE),
        );
      }
      elseif (drupalorg_crosssite_child_of('books')) {
        return array(
          'subject' => '',
          'content' => drupalorg_handbook_book_link_block(TRUE),
        );
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function drupalorg_handbook_theme($existing, $type, $theme, $path) {
  return array(
    'drupalorg_handbook_footer_line' => array(
      'variables' => array(),
    ),
    'drupalorg_handbook_contributors' => array(
      'variables' => array(
        'created' => '',
        'updated' => '',
        'contributors' => '',
        'edit_link' => '',
      ),
      'template' => 'handbook-contributors',
    ),
    'drupalorg_handbook_meta_sidebar' => array(
      'variables' => array(
        'about' => array(),
      ),
      'template' => 'handbook-meta-sidebar',
    ),
  );
}

/**
 * Returns HTML for a footer line for a documentation page.
 *
 * @ingroup themeable
 */
function theme_drupalorg_handbook_footer_line() {
  return '<p class="support"><strong>' . t('Looking for support? Visit the !forumlink, or join #drupal-support in !irclink.',
    array(
    '!forumlink' => l(t('Drupal.org forums'), 'forum'),
    '!irclink' => l(t('IRC'), 'node/108355'),
  )) . '</strong></p>';
}

/**
 * Implements hook_form_FORM_ID_alter() for comment_form().
 *
 * Adds a disclaimer if a book node is being commented on.
 */
function drupalorg_handbook_form_comment_form_alter(&$form, $form_state) {
  // Make sure we are on a form to add a new comment (not edit existing),
  // and that the node is a book node.
  if(isset($form['#node']->book['bid']) && !isset($form_state['comment']->cid)) {
    // This is a node in a book. Display disclaimer.
    $form['drupalorg-disclaimer'] = array(
      '#weight' => -2,
      '#markup' => '<div class="messages warning">' .
      '<p>' . t('<strong>Is your comment an addition, problem report, or example?</strong><br />Instead of adding a comment, edit the page content directly. If you are unsure of the correct edits, add a comment here and then edit the page to update the page status. Once a solution for the page has been agreed upon, edit the page accordingly and read <a href="!incorporating_comments">incorporating comments</a> on how to remove the related comment(s).', array('!incorporating_comments' => url('node/135589'))) . '</p>' .
      '<p>' . t('<strong>Is your comment a question or request for support?</strong><br />Take it to the <a href="!forums">forums</a>. Questions are not answered here, and comments not providing useful information may be removed at any time.', array('!forums' => url('forum'))) . '</p>' .
      '</div>',
    );
  }
}

/**
 * Returns block content for the book listing sidebar block.
 */
function drupalorg_handbook_book_listing_block() {
  $content = '';

  $content .= '<p>' . t('Drupal.org’s online content is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. Book descriptions are generally copyrighted by the book author or publisher, and are added to this web site with permission.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'))) . '</p>';

  return $content;
}

/**
 * Returns block content for the book add link sidebar block.
 */
function drupalorg_handbook_book_link_block($include_add_link) {
  $content = '';

  if ($include_add_link && user_access('create book_listing content')) {
    $content .= '<p>' . l(t('Add book listing'), 'node/add/book-listing', array('attributes' => array('class' => 'action-button'))) . '</p>';
  }

  $content .= '<p>' . l(t('Book listing guidelines'), 'node/1691562') . '</p>';

  return $content;
}


/**
 * Implementation of template_preprocess_content_field().
 *
 * Turn ISBN-10 field into affiliate link to purchase from Amazon.
 * Rewrite or unset Packt purchase link (unset if not to packtpub.com)
 */
function drupalorg_handbook_process_field(&$variables) {
  $element = $variables['element'];
  if ($element['#field_name'] == 'field_book_isbn_10' && isset($variables['items'][0]['#markup'])) {
   $amazon_link = '<a class="amazon-link" '
      . ' title="Ordering via this link benefits the Drupal Association"'
      . ' href="http://www.amazon.com/dp/' . $variables['items'][0]['#markup']
      . '/?tag=drupal0a-20" rel="nofollow">Order from Amazon.com</a>';
    $variables['items'][0]['#markup'] = $amazon_link;
  }
  if ($element['#field_name'] == 'field_book_purchase_link' && isset($element['#items'][0]['url'])) {
    if (!strpos($element['#items'][0]['url'], 'packtpub')) {
      unset($variables['element']);
      unset($variables['items']);
    }
    else {
      $packt_link = '<a class="packt-link" '
        . ' title="Ordering via this link benefits the Drupal Association"'
        . ' href="' . $element['#items'][0]['url'] . '" rel="nofollow">'
        . 'Order from Packt</a>';
      $variables['items'][0]['#markup'] = $packt_link;
    }
  }
}
