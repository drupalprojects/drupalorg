<?php

/**
 * @file
 *   A dashboard showing community health metrics over time.
 */

/**
 * Implements hook_menu().
 */
function drupalorg_metrics_menu() {
  return array(
    'metrics' => array(
      'title' => 'Drupal.org Metrics',
      'page callback' => 'drupalorg_metrics_page',
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Page callback.
 */
function drupalorg_metrics_page() {
  $map = array(
    'nodes' => t('Nodes created by month'),
    'users' => t('Users created by month'),
    'comments' => t('Comments created by month'),
    'commits' => t('Commits created by month'),
    'committers' => t('Committers by month'),
  );
  $counts = cache_get('drupalorg_metrics_counts', 'drupalorg');
  $output = '';
  foreach ($counts->data as $type => $points) {
    $graph = theme('flot_graph', array(
      'element' => array('style' => 'width:940px;height:400px'),
      'data' => array(new flotData($points)),
      'options' => array(
        'xaxis' => array('mode' => 'time', 'ticks' => 9),
        'series' => array(
          'lines' => array('show' => 'true'),
          'points' => array('show' => 'true'),
        ),
        'grid' => array(
          'borderwidth' => 1,
        ),
      ),
    ));
    $output .= '<h2 id="' . $type . '">' . $map[$type] . '</h2>' . $graph;
    $links[] = array(
      'title' => $map[$type],
      'href' => 'metrics',
      'fragment' => $type,
    );
  }
  return theme('links', array('links' => $links)) . $output;
}

/**
 * Record and cache stats.
 */
function drupalorg_metrics_record_stats($start_year, $end_year) {
  if (lock_acquire('drupalorg_metrics_record_stats', 5)) {
    for ($year = $start_year; $year <= $end_year; $year++) {
      for ($month = 1; $month <= 12; $month++) {
        $start = mktime(0, 0, 0, $month, 1, $year);
        $end = mktime(0, 0, 0, $month + 1, 1, $year);
        // Don't record the current month or future months.
        if ($end > $_SERVER['REQUEST_TIME']) {
          break;
        }
        // Javascript timestamps are in milliseconds since epoch.
        $start_js = $start * 1000;

        $counts['nodes'][] = array($start_js, db_query("SELECT COUNT(*) FROM node WHERE created >= :created1 AND created < :created2", array(':created1' => $start, ':created2' => $end))->fetchField());
        $counts['users'][] = array($start_js, db_query("SELECT COUNT(*) FROM users WHERE status = :status AND created >= :created1 AND created < :created2", array(':status' => 1, ':created1' => $start, ':created2' => $end))->fetchField());
        $counts['comments'][] = array($start_js, db_query("SELECT COUNT(*) FROM comment WHERE status = :status AND created >= :timestamp1 AND created < :timestamp2", array(':status' => COMMENT_PUBLISHED, ':timestamp1' => $start, ':timestamp2' => $end))->fetchField());
        $counts['commits'][] = array($start_js, db_query("SELECT COUNT(DISTINCT(revision)) FROM versioncontrol_operations WHERE author_date >= :date1 AND author_date < :date2 AND author <> :author", array(':date1' => $start, ':date2' => $end, ':author' => 'tggm@no-reply.drupal.org'))->fetchField());
        // @todo There is a difference between authors and commiters in git and
        // in versioncontrol. Maybe it's time to reflect that on metrics too?
        // For now, use "authors", keeping original behaviour.
        $counts['committers'][] = array($start_js, db_query("SELECT COUNT(DISTINCT(author_uid)) FROM versioncontrol_operations WHERE author_date >= :date1 AND author_date < :date2", array(':date1' => $start, ':date2' => $end))->fetchField());
      }
    }
    cache_set('drupalorg_metrics_counts', $counts, 'drupalorg');
    lock_release('drupalorg_metrics_record_stats');
  }
}
