<?php

/**
 * Implements hook_menu().
 */
function drupalorg_git_varnish_menu() {
  $items = array();

  $items['drupalorg/drupalorg-ssh-user-key'] = array(
    'title' => 'User SSH key auth',
    'page callback' => 'drupalorg_git_varnish_ssh_user_key',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-sshkey-check'] = array(
    'title' => 'SSH key verification',
    'page callback' => 'drupalorg_git_varnish_sshkey_check',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-vcs-auth-check-user-pass'] = array(
    'title' => 'User pass auth',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_check_user_pass',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-vcs-auth-fetch-user-hash'] = array(
    'title' => 'User pass fetch',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_fetch_user_hash',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/pushctl-state'] = array(
    'title' => 'Fetch project vcs auth data',
    'page callback' => 'drupalorg_git_varnish_pushctl_state',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/vcs-auth-data'] = array(
    'title' => 'Fetch project vcs auth data',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_data',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Only allow any of this data to be published if this drupal instance has the
 * internal flag set.
 * @return bool
 */
function drupalorg_git_varnish_access_callback() {
  if (variable_get('drupalorg_is_internal_varnish_instance', FALSE)) {
    return TRUE;
  }
  return FALSE;
}

function drupalorg_git_varnish_pushctl_state() {
  echo (int) variable_get('drupalorg_git_gateway_pushctl', 0);
  exit;
}

function drupalorg_git_varnish_sshkey_check() {
  $fingerprint = $_GET['fingerprint'];

  if ($key = sshkey_load_by_fingerprint($fingerprint)) {
    if ($key->entity_type == 'user') {
      $user = user_load($key->entity_id);
      if (!empty($user->roles[DRUPALORG_GIT_GATEWAY_RID])) {
        echo 'true';
        exit;
      }
    }
  }

  echo 'false';
  exit;
}

function drupalorg_git_varnish_ssh_user_key() {
  $username = $_GET['username'];
  $fingerprint = $_GET['fingerprint'];

  if ($key = sshkey_load_by_fingerprint($fingerprint)) {
    if ($username == user_load($key->entity_id)->git_username) {
      echo 'true';
      exit;
    }
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_check_user_pass() {
  $password = $_GET['password'];
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('git_username', $_GET['username'])
    ->range(0, 1)
    ->execute();
  if (isset($result['user']) && ($account = user_load(reset($result['user'])->uid)) && isset($account->pass)) {
    $len = strlen($account->pass);
    $password = substr($password, 0, $len);
    if ($len > 20 && $password == $account->pass) {
      echo 'true';
      exit;
    }
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_fetch_user_hash() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('git_username', $_GET['username'])
    ->range(0, 1)
    ->execute();
  if (isset($result['user']) && ($account = user_load(reset($result['user'])->uid)) && isset($account->pass)) {
    echo json_encode($account->pass);
    exit;
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_data() {
  $project_uri = $_GET['project_uri'];

  // If the project_uri does not correspond to a project, try looking for a
  // mis-matched repository name.
  if (project_get_nid_from_machinename($project_uri) === FALSE) {
    foreach (versioncontrol_repository_load_multiple(array(), array('name' => array($project_uri))) as $repository) {
      if (isset($repository->project_nid) && $project = project_load($repository->project_nid)) {
        $project_uri = $project->field_project_machine_name[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  echo json_encode(versioncontrol_project_get_auth_data($project_uri));
  exit;
}

/**
 * Implements hook_user_update().
 */
function drupalorg_git_varnish_user_update(&$edit, $account, $category) {
  if (!empty($account->git_username)) {
    // Clear the cache for both ssh keys and passwords, just to be safe.
    $host = _drupalorg_git_varnish_get_host();
    $commands = drupalorg_git_varnish_clear_user_cmds($account->uid);
    $commands[] = "purge req.http.host == $host && req.url ~ ^/drupalorg/drupalorg-[a-z-]+.username={$account->git_username}&(password|fingerprint)=";
    $commands[] = "purge req.http.host == $host && req.url ~ ^/drupalorg/drupalorg-vcs-auth-fetch-user-hash.username={$account->git_username}$";

    _varnish_terminal_run($commands);
  }
}

function drupalorg_git_varnish_clear_user_cmds($uid) {
  $commands = array();
  // FIXME this needs improving when sandboxes get properly namespaced.
  $select = db_select('versioncontrol_project_projects', 'vpp')
    ->fields('vpp', array('nid'));
  $vaa_alias = $select->addJoin('INNER', 'versioncontrol_auth_account', 'vaa', 'vpp.repo_id = vaa.repo_id');
  $nids = $select->condition($vaa_alias . '.uid', $uid)
    ->execute()->fetchAll(PDO::FETCH_COLUMN);

  $host = _drupalorg_git_varnish_get_host();
  $purge_base = "purge req.http.host == $host && ";
  foreach (node_load_multiple($nids) as $project) {
    $machine_name = field_get_items('node', $project, 'field_project_machine_name');
    $commands[] = $purge_base . 'req.url ~ ^/drupalorg/vcs-auth-data.project_uri=' . $machine_name[0]['value'] . '$';
  }

  return $commands;
}

/**
 * Implements hook_node_update().
 */
function drupalorg_git_varnish_node_update($node) {
  drupalorg_git_varnish_node_change($node);
}

/**
 * Implements hook_node_insert().
 */
function drupalorg_git_varnish_node_insert($node) {
  drupalorg_git_varnish_node_change($node);
}

/**
 * Implements hook_node_delete().
 */
function drupalorg_git_varnish_node_delete($node) {
  drupalorg_git_varnish_node_change($node);
}

function drupalorg_git_varnish_node_change($node) {
  if (project_node_is_project($node)) {
    $project = $node;
  }
  elseif (project_release_node_is_release($node)) {
    $project = node_load(project_release_get_release_project_nid($node));
    if ($project === FALSE) {
      // The release node was orpaned.
      return;
    }
  }
  else {
    return;
  }

  $machine_name = field_get_items('node', $project, 'field_project_machine_name');
  _varnish_terminal_run(array(
    'purge req.http.host == ' . _drupalorg_git_varnish_get_host() . ' && req.url ~ ^/drupalorg/vcs-auth-data.project_uri=' . $machine_name[0]['value'] . '$',
  ));
}

/**
 * Implements hook_drupalorg_pushctl_changed().
 */
function drupalorg_git_varnish_drupalorg_pushctl_changed($pushctl) {
  $host = _drupalorg_git_varnish_get_host();
  $command = "purge req.http.host == $host && req.url == /drupalorg/pushctl-state";
  _varnish_terminal_run(array($command));
}

/**
 * Implements hook_sshkey_insert().
 */
function drupalorg_git_varnish_sshkey_insert($key) {
  $commands = drupalorg_git_varnish_clear_sshkey_cmds($key);
  _varnish_terminal_run($commands);
}

/**
 * Implements hook_sshkey_update().
 */
function drupalorg_git_varnish_sshkey_update($key) {
  $commands = drupalorg_git_varnish_clear_sshkey_cmds($key);
  _varnish_terminal_run($commands);
}

/**
 * Implements hook_sshkey_delete().
 */
function drupalorg_git_varnish_sshkey_delete($key) {
  $commands = drupalorg_git_varnish_clear_sshkey_cmds($key);
  _varnish_terminal_run($commands);
}

function drupalorg_git_varnish_clear_sshkey_cmds($key) {
  if ($key->entity_type == 'user') {
    $commands = drupalorg_git_varnish_clear_user_cmds($key->entity_id);
  }
  $host = _drupalorg_git_varnish_get_host();
  $commands[] = "purge req.http.host == $host && req.url ~ ^/drupalorg/drupalorg-ssh.+fingerprint={$key->fingerprint}";
  return $commands;
}

/**
 * Implements hook_project_promote_sandbox().
 */
function drupalorg_git_varnish_project_promote_sandbox($project) {
  // This will probably cause some redundant cache clearing, but oh well.
  $host = _drupalorg_git_varnish_get_host();
  $machine_name = field_get_items('node', $project, 'field_project_machine_name');
  $commands = array(
    "purge req.http.host == $host && req.url ~ ^/drupalorg/vcs-auth-data.project_uri=" . $machine_name[0]['value'] . '$',
    // And also clear the old sandbox uri.
    "purge req.http.host == $host && req.url ~ ^/drupalorg/vcs-auth-data.project_uri={$project->nid}$",
  );
  _varnish_terminal_run($commands);
}

/**
 * Implements hook_project_maintainer_save().
 */
function drupalorg_git_varnish_project_maintainer_save($nid, $uid, $permissions) {
  _drupalorg_git_varnish_project_maintainer_update($nid);
}

/**
 * Implements hook_project_maintainer_remove().
 */
function drupalorg_git_varnish_project_maintainer_remove($nid, $uid) {
  _drupalorg_git_varnish_project_maintainer_update($nid);
}

/**
 * Clear varnish cache for a project when its maintainers list is updated.
 */
function _drupalorg_git_varnish_project_maintainer_update($nid) {
  static $nids = array();
  // This function is likely to get hit multiple times on a given operation, so
  // we ensure it only runs - only one purge is necessary.
  if (in_array($nid, $nids)) {
    return;
  }
  $nids[] = $nid;

  // @todo Use field api?
  $uri = db_query('SELECT field_project_machine_name_value FROM {field_data_field_project_machine_name} WHERE entity_id = :entity_id AND entity_type = :entity_type AND deleted = 0', array(':entity_id' => $nid, ':entity_type' => 'node'))->fetchField();

  $host = _drupalorg_git_varnish_get_host();
  $commands = array(
    'purge req.http.host == ' . $host . ' && req.url ~ ^/drupalorg/vcs-auth-data.project_uri=' . $uri . '$',
  );

  _varnish_terminal_run($commands);
}

/**
 * Retrieves the host url that varnish will request.
 */
function _drupalorg_git_varnish_get_host() {
  return variable_get('drupalorg_git_varnish_http.host', 'git-dev.drupal.org:8080');
}
