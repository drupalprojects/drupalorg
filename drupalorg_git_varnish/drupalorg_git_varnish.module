<?php

/**
 * Implements hook_menu().
 */
function drupalorg_git_varnish_menu() {
  $items = array();

  $items['drupalorg/drupalorg-ssh-user-key'] = array(
    'title' => 'User SSH key auth',
    'page callback' => 'drupalorg_git_varnish_ssh_user_key',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-sshkey-check'] = array(
    'title' => 'SSH key verification',
    'page callback' => 'drupalorg_git_varnish_sshkey_check',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-vcs-auth-check-user-pass'] = array(
    'title' => 'User pass auth',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_check_user_pass',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/drupalorg-vcs-auth-fetch-user-hash'] = array(
    'title' => 'User pass fetch',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_fetch_user_hash',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg/vcs-auth-data'] = array(
    'title' => 'Fetch project vcs auth data',
    'page callback' => 'drupalorg_git_varnish_vcs_auth_data',
    'access callback' => 'drupalorg_git_varnish_access_callback', // we're restricting in apache conf, this is always TRUE
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Only allow any of this data to be published if this drupal instance has the
 * internal flag set.
 * @return bool
 */
function drupalorg_git_varnish_access_callback() {
  if (variable_get('drupalorg_is_internal_varnish_instance', FALSE)) {
    return TRUE;
  }
  return FALSE;
}

function drupalorg_git_varnish_sshkey_check() {
  $fingerprint = $_GET['fingerprint'];

  if ($key = sshkey_load_by_fingerprint($fingerprint)) {
    if ($key->entity_type == 'user') {
      $user = user_load($key->entity_id);
      if (!empty($user->roles[DRUPALORG_GIT_GATEWAY_RID])) {
        echo 'true';
        exit;
      }
    }
  }

  echo 'false';
  exit;
}

function drupalorg_git_varnish_ssh_user_key() {
  $username = $_GET['username'];
  $fingerprint = $_GET['fingerprint'];

  if ($key = sshkey_load_by_fingerprint($fingerprint)) {
    if ($username == user_load($key->entity_id)->git_username) {
      echo 'true';
      exit;
    }
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_check_user_pass() {
  $password = $_GET['password'];
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('git_username', $_GET['username'])
    ->range(0, 1)
    ->execute();
  if (isset($result['user']) && ($account = user_load(reset($result['user'])->uid)) && isset($account->pass)) {
    $len = strlen($account->pass);
    $password = substr($password, 0, $len);
    if ($len > 20 && $password == $account->pass) {
      echo 'true';
      exit;
    }
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_fetch_user_hash() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->propertyCondition('git_username', $_GET['username'])
    ->range(0, 1)
    ->execute();
  if (isset($result['user']) && ($account = user_load(reset($result['user'])->uid)) && isset($account->pass)) {
    echo json_encode($account->pass);
    exit;
  }
  echo 'false';
  exit;
}

function drupalorg_git_varnish_vcs_auth_data() {
  $project_uri = $_GET['project_uri'];

  // If the project_uri does not correspond to a project, try looking for a
  // mis-matched repository name.
  if (project_get_nid_from_machinename($project_uri) === FALSE) {
    foreach (versioncontrol_repository_load_multiple(array(), array('name' => array($project_uri))) as $repository) {
      if (isset($repository->project_nid) && $project = project_load($repository->project_nid)) {
        $project_uri = $project->field_project_machine_name[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  echo json_encode(versioncontrol_project_get_auth_data($project_uri));
  exit;
}
