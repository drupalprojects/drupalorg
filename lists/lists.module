<?php

/**
 * @file
 *   Drupal.org mailing list subscription helper.
 *
 *   How to configure mailman mailing lists with this module (there is no admin
 *   interface for this at this time):
 *
 *   1) Configure mailman lists as necessary.  It should be configured so that
 *   only messages from the drupal website mailing address are allowed to post
 *   to the mailing list.  (Posting to specific forums will generate an email
 *   sent from the drupal.org website to mailman, which will then be sent to
 *   everyone subscribed to the mailman list.)
 *
 *   2) Update function _lists_get_mailman_lists() with list configuration.  The
 *   individual list password should be stored directly in the database as a
 *   variable to avoid distributing it to everyone via source code or
 *   settings.php).
 *
 *   3) Create a Forum container named "Newsletters", then create forums for
 *   each mailman-powered newsletter within this new container.  For the current
 *   lists, this means adding the following lists:
 *     • Security newsletter
 *     • Drupal newsletter
 *     • Maintainer newsletter
 *
 *   4) Update function _lists_get_forum_tids(), adding a correlation between
 *   the tid of each forum and the list's key in _lists_get_mailman_lists().
 */

/**
 * Static definition of all mailman managed Drupal mailing lists.
 */
function _lists_get_mailman_lists() {
  // passwords need to be set in variable table in order to be able to
  // administer these lists.
  $lists = array(
    'security' => array(
      'name' => 'Security announcements',
      'description' => 'A low volume mailing list where all security issues affecting Drupal and Drupal contributed modules are publically announced.',
      'allow_sub' => TRUE,
      'mail' => variable_get('lists_security_mail', ''),
      'pass' => variable_get('lists_security_pass', ''),
      'url' => variable_get('lists_security_url', ''),
    ),
  );
  return $lists;
}

/**
 * List of all forums that are mailman mailing lists.
 */
function _lists_get_forum_tids() {
  return variable_get('lists_forum_tids', array());
}

/**
 * Implements hook_permission().
 */
function lists_permission() {
  return array(
    'post to newsletter' => array(
      'title' => t('post to newsletter'),
      'description' => t('Post to newsletter forums'),
    ),
  );
}

/**
 * Implements hook_user_categories().
 */
function lists_user_categories() {
  return array(array('name' => 'newsletter', 'title' => t('My newsletters'), 'weight' => 10));
}

/**
 * Implements hook_menu_alter().
 *
 * See why we need this hack in lists_user().
 */
function lists_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/newsletter']['page callback'] = 'drupal_get_form';
  $callbacks['user/%user_category/edit/newsletter']['page arguments'] = array('lists_mailman_user_form', 1);
}

/**
 * Form constructor for the per-user mailman subscription form.
 *
 * @ingroup forms
 * @see lists_mailman_user_form_submit()
 */
function lists_mailman_user_form($form, &$form_state, $account = FALSE) {
  drupal_set_message(t('<strong>Looking for other newletters?</strong> New newsletters are <a href="!url">configured on your user profile</a>. (This page is being phased out.)', array('!url' => url('user/' . $GLOBALS['user']->uid . '/edit', array('fragment' => 'edit-field-subscribe-to')))), 'warning');
  $form = array();

  $form['newsletter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Newsletter subscriptions'),
    '#description' => t('Select the newsletter(s) which you want to subcribe or unsubcribe.'),
    '#collapsible' => FALSE,
  );

  $lists = _lists_get_mailman_lists();
  foreach ($lists as $list => $info) {
    $default_value = _lists_mailman_user_subscribed($info, $account);
    $form['newsletter'][$list] = array(
      '#type' => 'checkbox',
      '#title' => $info['name'],
      '#description' => $info['description'],
      '#disabled' => !$info['allow_sub'],
      '#default_value' => $default_value,
    );
  }
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Subscribe/unsubscribe from mailman mailing lists.
 */
function lists_mailman_user_form_submit($form, &$form_state) {
  $account = user_load($form_state['values']['uid']);
  $lists = _lists_get_mailman_lists();
  foreach ($lists as $list => $data) {
    $old = (int) $form['newsletter'][$list]['#default_value'];
    $new = (int) $form_state['values'][$list];

    if (!empty($data['allow_sub']) && ($old != $new)) {
      if ($new) {
        _lists_mailman_subscribe($data, $account, TRUE);
      }
      else {
        _lists_mailman_unsubscribe($data, $account, TRUE);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function lists_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'forum_node_form') {
    $lists_forum_tids = array_keys(_lists_get_forum_tids());
    $tid = arg(3);
    if (!user_access('post to newsletter')) {
      // See if user is trying to post to a forum for which they do not have
      // permission.  If so, redirect them back to the forum in question and
      // notify them they lack permission.
      if (in_array($tid, $lists_forum_tids)) {
        drupal_set_message(t('You do not have permission to post to this forum.'));
        drupal_goto("forum/$tid");
      }

      // See if user has permission to post to mailing lists (generating emails
      // to potentially large numbers of users).  If not, remove these forums
      // as a selectable forum option.
      if (isset($form['taxonomy_forums'])) {
        $langcode = $form['taxonomy_forums']['#language'];
        foreach ($form['taxonomy_forums'][$langcode]['#options'] as $tid => $name) {
          if (in_array($tid, $lists_forum_tids)) {
            unset($form['taxonomy_forums'][$langcode]['#options'][$tid]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function lists_node_update($node) {
  global $user;

  if ($node->status && user_access('post to newsletter')) {
    // Only generate mail for configured forum types.
    $generate_mail = FALSE;
    $lists_forum_tids = array_keys(_lists_get_forum_tids());
    if ($taxonomy_forums = field_get_items('node', $node, 'taxonomy_forums')) {
      foreach ($taxonomy_forums as $item) {
        if (in_array($item['tid'], $lists_forum_tids)) {
          $generate_mail = TRUE;
          $forum_tid = $item['tid'];
          break;
        }
      }
    }

    // User has permission to generate emails, so send the node to mailman.
    if ($generate_mail) {
      // There's no reason I can see for sending a mailing multiple times, but
      // since we're tracking whether or not something is sent anyway...
      $sent = db_query('SELECT nid FROM {lists_mailman} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
      if (!$sent) {
        $lists = _lists_get_mailman_lists();
        $lists_forum_tids = _lists_get_forum_tids();
        $list = $lists[$lists_forum_tids[$forum_tid]];
        $language = language_default();
        $params = array('node' => $node);
        drupal_mail('lists', 'mailman_newsletter', $list['mail'], $language, $params);
        $nid = db_insert('lists_mailman') // Table name no longer needs {}
          ->fields(array(
            'nid' =>  $node->nid,
            'uid' => $user->uid,
            'timestamp' => REQUEST_TIME,
          ))
          ->execute();
        drupal_set_message(t('Mail sent to !email.', array('!email' => $list['mail'])));
      }
      // Force comments to be disabled for these posts.  David doesn't like this.
      // This is an ugly kludge.
      db_update('node')
        ->fields(array(
          'comment' => COMMENT_NODE_CLOSED,
        ))
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
}

/**
 * Implements hook_mail().
 */
function lists_mail($key, &$message, $params) {
  if ($key == 'mailman_newsletter') {
    // Just copy over the subject and body as provided.
    $message['subject'] = $params['node']->title;
    $body = field_get_items('node', $params['node'], 'body');
    $message['body'][] = drupal_html_to_text('<p>' . t('View online: !url', array('!url' => url('node/' . $params['node']->nid, array('absolute' => TRUE)))) . '</p>' . $body[0]['value']);
  }
}

/**
 * Helper function to check if the provided email address is susbcribed.
 *
 * Some code borrowed from the mailman_api module.
 */
function _lists_mailman_user_subscribed($list, $account) {
  $query = array(
    'findmember' => $account->mail,
    'findmember_btn' => 'Search...',
  );
  $url = url($list['url'] . '/members', array('query' => $query));
  $result = lists_mailman_query($url, $list);

  if ($result) {
    // replace '@' with '--at--' to match the mailman internal representation so
    // we don't match our own search query which would always result in a match.
    return (bool) strpos(strtolower($result->data), str_replace('@', '--at--', drupal_strtolower($account->mail)));
  }
  else {
    return false;
  }
}

/**
 * Helper function to subscribe a user to a mailman mailing list.
 *
 * Some code borrowed from the mailmain_api module.
 */
function _lists_mailman_subscribe($list, $account, $show_message = FALSE) {
  $query = array(
    'subscribe_or_invite' => variable_get('lists_mailman_invite', 0),
    'send_welcome_msg_to_this_batch' => variable_get('lists_mailman_notify', 0),
    'notification_to_list_owner' => variable_get('lists_mailman_notify_admin', 0),
    'subscribees_upload' => $account->mail,
  );
  $url = url($list['url'] . '/members/add', array('query' => $query));
  $result = lists_mailman_query($url, $list);
  if ($result !== FALSE) {
    watchdog('lists', t('User %email subscribed to !list mailman list.', array('%email' => $account->mail, '!list' => $list['name'])));
    if ($show_message) {
      drupal_set_message(t('Subscribed to %list.', array('%list' => $list['name'])));
    }
  }
  else {
    if ($show_message) {
      drupal_set_message(t('Failed to subscribe %email to %list. Please try again later.', array('%email' => $account->mail, '%list' => $list['name'])));
    }
  }
}

/**
 * Helper function to subscribe a user to a mailman mailing list.
 *
 * Some code borrowed from the mailmain_api module.
 */
function _lists_mailman_unsubscribe($list, $account, $show_message = FALSE) {
  $query = array(
    'send_unsub_ack_to_this_batch' => variable_get('lists_mailman_notify', 0),
    'send_unsub_notifications_to_list_owner' => variable_get('lists_mailman_notify_admin', 0),
    'unsubscribees_upload' => $account->mail,
  );
  $url = url($list['url'] . '/members/remove', array('query' => $query));
  $result = lists_mailman_query($url, $list);
  if ($result !== FALSE) {
    watchdog('lists', t('User %email unsubscribed from !list mailman list.', array('%email' => $account->mail, '!list' => $list['name'])));
    if ($show_message) {
      drupal_set_message(t('%email unsubscribed from %list.', array('%email' => $account->mail, '%list' => $list['name'])));
    }
  }
  else {
    if ($show_message) {
      drupal_set_message(t('Failed to unsubscribe %email from %list.  Please try again later.', array('%email' => $account->mail, '%list' => $list['name'])));
    }
  }
}

/**
 * Connect to admin interface for mailman mailing list and run a request.
 *
 * Break out adminpw so we don't log it on errors to minimize the
 * exposure of this value.
 *
 * Some code borrowed from the mailmain_api module.
 */
function lists_mailman_query($url, $list) {
  $result = drupal_http_request($url . '&adminpw=' . urlencode($list['pass']));

  // Provide debug information if connection to mailman fails.
  if (!is_object($result) || !isset($result->code) || $result->code != '200') {
    watchdog('lists', t('Mailman HTTP request error (!code) for !list: %error<br />url=%url', array('!code' => (int) $result->code, '!list' => $list['name'], '%error' => $result->error, '%url' => $url)));
    return FALSE;
  }

  // Provide debug information if connection to mailman succeeds but the list is invalid.
  elseif (is_object($result) && strpos($result->data, '>No such list')) {
    watchdog('lists', t('Mailman list !list does not exist.<br />url=%url', array('!list' => $list['name'], '%url' => $url)));
    return FALSE;
  }

  // All all right, so return full page reply.
  return $result;
}
