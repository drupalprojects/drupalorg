<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function drupalorg_versioncontrol_ctools_plugin_directory($module, $plugin) {
  if ($module == 'versioncontrol' || $module == 'versioncontrol_release') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_versioncontrol_code_arrival().
 *
 * When something changes in the project, we need to purge cgit.
 */
function drupalorg_versioncontrol_versioncontrol_code_arrival(VersioncontrolRepository $repository, VersioncontrolEvent $event){
  // Ignore events for disabled projects and non-Git repos.
  if (!$repository instanceof VersioncontrolGitRepository) {
    return;
  }
  // Purges everything in cgit for this project if it changes.

  $project = node_load($repository->project_nid);

  $reponame = $cgit_url_name = $repository->name;

  if ($project->field_project_type[LANGUAGE_NONE][0]['value'] === 'sandbox') {
    $cgit_url_name = preg_replace(['#^/var/git/repositories/#', '#^project/#', '#\.git$#', '#/#'], ['', '', '', '-'], $repository->root);
  }
  drupalorg_fastly_purge_key($cgit_url_name);

  foreach ($event as $ref) {
    if (VERSIONCONTROL_GIT_REFTYPE_BRANCH == $ref->reftype) {

      $url = variable_get('git_base_url', 'git://git.drupal.org/project/') . escapeshellcmd($reponame) . '.git';
      $tag = escapeshellcmd($ref->getLabel()->name);

      $work_tree = '/tmp/do_' . $reponame . '_' . time();
      $esc_work_tree = escapeshellarg($work_tree);
      $command = "git clone --depth 1 --branch $tag $url $esc_work_tree 2>&1";
      exec($command, $output, $status);
      if ($status) {
        watchdog('drupalorg_versioncontrol', 'Failed to checkout git repository: %cmd; output=%output', [
          '%cmd' => $command,
          '%output' => implode(' ', $output)
        ]);
        return FALSE;
      }
      // Invoke a hook so other projects can respond to the repo
      module_invoke_all('drupalorg_versioncontrol_repo_changes', $repository, $ref, $esc_work_tree);
      // remove the created repository.
      $command = 'rm -rf ' . $esc_work_tree;
      exec($command, $output, $status);
      if ($status) {
        watchdog('drupalorg_versioncontrol', 'Failed to remove repository: %cmd; output=%output', [
          '%cmd' => $command,
          '%output' => implode(' ', $output)
        ]);
      }
    }
  }
  return TRUE;
}

/**
 * Return total number of commits in a given interval.
 *
 * @param $interval
 *   Interval in seconds.
 *
 * @return
 *   Total number of commits for the requested repository (or site-wide) in
 *   the specified time interval.
 */
function drupalorg_versioncontrol_get_total_commits($interval) {
  return db_query('SELECT count(vc_op_id) FROM {versioncontrol_operations} WHERE author_date > :author_date', array('author_date' => time() - $interval))->fetchField();
}

function drupalorg_versioncontrol_node_insert($node) {
  // Operate only on node types beginning with 'project'.
  if (!project_node_is_project($node)) {
    return;
  }

  if (project_promote_project_is_sandbox($node)) {
    $top_path = 'sandbox/' . user_load($node->uid)->git_username;
  }
  else {
    $top_path = 'project';
  }
  $top_path .= '/' . $node->field_project_machine_name[LANGUAGE_NONE][0]['value'];
  $repo_root = variable_get('drupalorg_git_basedir', '/var/git') . '/repositories/' . $top_path . '.git';

  $description = 'For more information about this repository, visit the project page at ' . url('node/' . $node->nid, array('absolute' => TRUE));

  $data = new stdClass();
  $data->name = $node->field_project_machine_name[LANGUAGE_NONE][0]['value'];
  $data->root = $repo_root;
  $data->vcs = 'git';
  $data->plugins = array(
    'auth_handler' => 'account', // We can't rely on the $conf default for this b/c vc_project doesn't respect it
  );
  $data->project_nid = $node->nid;
  $data->cron = 0;

  $backend = versioncontrol_get_backends('git');
  $repo = $backend->buildEntity('repo', $data);

  // Grab the auth handler just so we know the class is loaded.
  $repo->getAuthHandler();

  $auth_data = array(
    'access' => VersioncontrolAuthHandlerMappedAccounts::ALL,
    'branch_create' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'branch_update' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'branch_delete' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'tag_create' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'tag_update' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'tag_delete' => VersioncontrolAuthHandlerMappedAccounts::DENY,
    'per-label' => array()
  );

  $job = array(
    'operation' => array(
      // Create the repo on disk.
      'init' => array(),
      // Save repo record to db, creating a repo_id.
      'save' => array(),
      // Save user auth data.
      'setUserAuthData' => array($node->uid, $auth_data),
      // Set the project description.
      'setDescription' => array($description),
    ),
    'repository' => $repo,
  );

  drupal_register_shutdown_function(array(DrupalQueue::get('versioncontrol_repomgr'), 'createItem'), $job);
  drupal_set_message(t('The Git repository for this project has been enqueued for creation. It should be available in a few seconds.'));
}

function drupalorg_versioncontrol_node_delete($node) {
  if (isset($node->versioncontrol_project) && $node->versioncontrol_project['repo'] instanceof VersioncontrolGitRepository) {
    $repo = $node->versioncontrol_project['repo'];
    $job = array(
      'operation' => 'delete',
      'repository' => $repo,
    );

    $queue = DrupalQueue::get('versioncontrol_repomgr');
    if (!$queue->createItem($job)) {
      $error_info = array(
        '%nid' => $node->nid,
      );
      drupal_set_message(t('Failed to enqueue Git repository for deletion.'), 'error');
      watchdog('drupalorg', t("Failed to enqueue repository deletion job for node '%nid'.", $error_info));
    }
    else {
      drupal_set_message(t('Git repository enqueued for deletion.'));
    }
  }
}

/**
 * Implements hook_project_promote_sandbox().
 *
 * Project has been promoted to a full project, relocate it on disk.
 */
function drupalorg_versioncontrol_project_promote_sandbox($project) {
  if (empty($project->versioncontrol_project['repo']) || !$project->versioncontrol_project['repo'] instanceof VersioncontrolGitRepository) {
    $error_info = array(
      '%nid' => $project->nid,
    );
    watchdog('drupalorg', t("Trying to enqueue sandbox promotion job for node '%nid', but no repo attached to node.", $error_info));
    return;
  }

  $repo = $project->versioncontrol_project['repo'];
  // Update the name to the new project shortname.
  $repo->name = $project->field_project_machine_name[LANGUAGE_NONE][0]['value'];
  // Just in case, until dbtng fixes hook_query_alter().
  $repo->project_nid = $project->nid;

  $job = array(
    'operation' => array(
      // Relocate the repo on disk and update the repo root.
      'move' => array(variable_get('drupalorg_git_basedir', '/var/git') . '/repositories/project/' . $project->field_project_machine_name[LANGUAGE_NONE][0]['value'] . '.git'),
      // The repository needs to be reinit-ed with project hooks, replacing the old sandbox hooks.
      // FIXME replacing the config file means we lose any custom settings. Make this more robust.
      'reInit' => array(array('hooks', 'config')),
      // Update the description
      'setDescription' => array('For more information about this repository, visit the project page at ' . url('node/' . $project->nid, array('absolute' => TRUE))),
      // Save the updated repo entry to the db.
      'save' => array(),
    ),
    'repository' => $repo,
  );

  $queue = DrupalQueue::get('versioncontrol_repomgr');
  if (!$queue->createItem($job)) {
    $error_info = array(
      '%machinename' => $project->field_project_machine_name[LANGUAGE_NONE][0]['value'],
    );
    watchdog('drupalorg', t("Failed to enqueue promotion of sandbox '%machinenname'.", $error_info));
  }
}

/**
 * Implements views hook_views_default_views_alter().
 */
function drupalorg_versioncontrol_views_default_views_alter(&$views) {
  // Link #123 pattern on operation messages to issues at drupal.org
  $views_with_tracker_url = array(
    // versioncontrol default views (commitlog)
    'commitlog_repository_commits',
    'commitlog_individual_commit',
    'commitlog_global_commits',
    'commitlog_user_commits',
    // versioncontrol_git default views
    'vc_git_individual_commit',
    // versioncontrol_project default views
    'vc_git_project_commit_view',
    'vc_git_project_global_commits',
    'vc_git_project_user_commits',
    'vc_project_commit_view',
    'vc_project_global_commits',
    'vc_project_user_commits',
  );
  foreach ($views_with_tracker_url as $view_name) {
    if (isset($views[$view_name])) {
      if (isset($views[$view_name]->display['default']->display_options['fields']['message'])) {
        $views[$view_name]->display['default']->display_options['fields']['message']['issue_tracker_url'] = '/node/%issue_id';
      }
      // Use views_litepager and remove inner file listings, except on individual commit views.
      if ($view_name != 'commitlog_individual_commit' && $view_name != 'vc_git_individual_commit') {
        if (isset($views[$view_name]->display['default']->display_options)) {
          $views[$view_name]->display['default']->display_options['pager']['type'] = 'lite';
        }
        if (isset($views[$view_name]->display['default']->display_options['fields']['view'])) {
          unset($views[$view_name]->display['default']->display_options['fields']['view']);
        }
      }
      // Disable paging completely on the global commit view because it
      // really doesn't scale.
      if ($view_name == 'vc_git_project_global_commits') {
        $views[$view_name]->display['default']->display_options['pager']['type'] = 'some';
        $views[$view_name]->display['default']->display_options['pager']['options'] = array(
          'items_per_page' => '50',
          'offset' => '0',
        );
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function drupalorg_versioncontrol_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'project_release_node_form' && !empty($form['error']) && !empty($form['retry'])) {
    $project = node_load(project_release_get_release_project_nid($form['#node']));
    $msg = '<strong>' . t('No valid branches or tags found.') . '</strong>';
    $msg .= '<p>' . t('Your release needs to have a tag or branch that follows the <a href="http://drupal.org/node/1015226">naming conventions</a> and have no other release attached to it.') . '</p>';
    $msg .= '<p>' . t('Valid release <strong>tag</strong> examples:') . '</p>';
    $msg .= theme('item_list', array('items' => array('7.x-1.2', '7.x-2.0-alpha2', '7.x-2.0-beta3')));
    $msg .= '<p>' . t('Valid release <strong>branch</strong> examples:') . '</p>';
    $msg .= theme('item_list', array('items' => array('7.x-1.x', '6.x-2.x')));
    $msg .= '<p>' . t('For more help, see <a href="http://drupal.org/node/1066342">Creating a Tag or Branch in Git</a> or the <a href="@git_instructions_url">Git instructions</a> page for your project.', array('@git_instructions_url' => url('node/' . $project->nid . '/git-instructions'))) . '</p>';
    $msg .= '<p>' . t('Once you have added a valid branch or tag, <a href="@retry">try again</a>.', array('@retry' => url('node/add/project-release/' . $project->nid))) . '</p>';
    $form['error']['#markup'] = $msg;
    unset($form['retry']);
  }
}

/**
 * Implements hook_versioncontrol_project_issue_git_issue_notification_project_issue_nids_alter().
 */
function drupalorg_versioncontrol_versioncontrol_project_issue_git_issue_notification_project_issue_nids_alter(&$valid_issue_nids, $context) {
  $ref = $context['ref'];
  $repository = $ref->getRepository();
  if (!versioncontrol_project_repository_has_project($repository)) {
    // Nothing to do.
    return;
  }
  $project_node = node_load($repository->project_nid);
  if ($project_node->type == 'project_core') {
    // Core.
    $valid_branch_name_regex = '/^(\d+)(\.(\d+))?\.x$/';
  }
  else {
    // Contrib.
    $valid_branch_name_regex = '/^((\d+)(\.(\d+))?\.x)-(\d+)\.x$/';
  }
  if (preg_match($valid_branch_name_regex, $ref->refname)) {
    if ($ref->eventCreatedMe()) {
      // Do not allow new release branches to notify when they are initially pushed.
      $valid_issue_nids = array();
    }
    // Allow notifications on any issue if the branch looks like a release branch.
    return;
  }
  // Only allow non-release branches notifications if the project issue nid is
  // in the refname.
  foreach ($valid_issue_nids as $key => $valid_issue_nid) {
    if (!preg_match('/\b' . preg_quote($valid_issue_nid, '/') . '\b/', $ref->refname)) {
      unset($valid_issue_nids[$key]);
    }
  }
}
