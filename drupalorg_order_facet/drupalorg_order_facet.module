<?php

/**
 * Implements hook_block_info().
 */
function drupalorg_order_facet_block_info() {
  return array(
    'ds_created' => array(
      'info' => t('New content'),
      'direction' => 'desc',
      'cache' => DRUPAL_NO_CACHE,
    ),
    'iss_project_release_usage' => array(
      'info' => t('Most installed'),
      'direction' => 'desc',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_order_facet_block_view($delta = '') {
  $env_id = apachesolr_default_environment();
  if (apachesolr_has_searched($env_id) && ($query = apachesolr_current_query($env_id))) {
    $blocks = drupalorg_order_facet_block_info();
    // Replace 'content' with 'Modules', 'Themes', etc.
    foreach ($query->getFilters() as $filter) {
      if ($filter['#name'] === 'bundle') {
        $blocks[$delta]['info'] = str_replace('content', drupalorg_project_node_type_label($filter['#value'], 'plural'), $blocks[$delta]['info']);
        break;
      }
    }
    $results = drupalorg_order_facet_build($delta, $blocks[$delta], $query);
    if (!empty($results)) {
      return array(
        'subject' => $blocks[$delta]['info'],
        'content' => $results,
      );
    }
  }
}

/**
 * Generate an order facet.
 */
function drupalorg_order_facet_build($sort, $info, $query, $more = TRUE) {
  // Generate a new query based on the executed one.
  $order_query = clone $query;
  $order_query->setSolrSort($sort, $info['direction']);

  // Retrieve the query values first so everything is formatted correctly,
  // and we only have relevant values in the url.
  $query_values = $order_query->getSolrsortUrlQuery();
  $f = array();
  foreach ($order_query->getFilters() as $filter) {
    if ($filter['#name'] === 'bundle') {
      // Find project node type.
      $type = $filter['#value'];
    }
    else {
      // Keep track of filters.
      if ($filter['#name'] === 'im_project_release_api_tids') {
        // Use "drupal_core" facet alias.
        $f[] = variable_get('project_solr_project_release_api_tids_alias', 'drupal_core') . ':' . $filter['#value'];

        // Sort by usage for the specific API version.
        if ($sort === 'iss_project_release_usage') {
          $order_query->setAvailableSort('iss_project_release_usage_' . $filter['#value'], array('title' => t('Usage for version'), 'default' => 'desc'));
          $order_query->setSolrSort('iss_project_release_usage_' . $filter['#value'], $info['direction']);
        }
      }
      else {
        $f[] = $filter['#name'] . ':' . $filter['#value'];
      }
    }
  }
  // Match up filters to form array.
  $dummy = array();
  $form = project_solr_browse_projects_form(array(), $dummy, node_type_load($type));
  foreach (element_children($form['f']) as $element) {
    if ($intersect = array_intersect($f, array_keys($form['f'][$element]['#options']))) {
      $query_values['f'][$element] = reset($intersect);
    }
  }

  // Execute the Solr query.
  $order_query->addParams(array(
    'fl' => 'id,nid,title,url',
    'start' => 0,
    'rows' => 4,
  ));
  $response = $order_query->search();

  $items = array();
  if ($response->response->numFound > 0) {
    foreach ($response->response->docs as $doc) {
      // $doc->label is already sanitized, do not double encode.
      $items[] = l($doc->label, $doc->url, array('html' => TRUE));
    }
  }

  if ($items && $more) {
    // Add the "more" link.
    $items[] = array(
      'data' => '<strong>' . l(t('More @title', ['@title' => $info['info']]), $order_query->getPath(), ['query' => $query_values]) . '</strong>',
    );
  }
  return array('#theme' => 'item_list', '#items' => $items, '#attributes' => array('class' => 'flat'));
}
