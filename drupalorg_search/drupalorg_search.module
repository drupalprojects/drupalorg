<?php

/**
 * @file
 *   Drupal.org search customizations.
 */

/**
 * Implementation of hook_facetapi_facet_info().
 */
function drupalorg_search_facetapi_facet_info($searcher_info) {
  $facets = array();
  if ('apachesolr' == $searcher_info['adapter']) {
    if (isset($searcher_info['types']['node'])) {
      $facets['ss_meta_type'] = array(
        'name' => 'ss_meta_type',
        'label' => t('Meta type'),
        'description' => t('Filter by the meta type.'),
        'field' => 'ss_meta_type',
        'query types' => array('meta_type'),
        'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE),
        'map callback' => 'drupalorg_crosssite_meta_types',
      );
    }
  }

  return $facets;
}

/**
 * Implements hook_facetapi_query_types().
 */
function drupalorg_search_facetapi_query_types() {
  $path = drupal_get_path('module', 'drupalorg_search') . '/plugins/facetapi';
  return array(
    'meta_type' => array(
      'handler' => array(
        'class' => 'ApacheSolrFacetapiMetaType',
        'parent' => 'query_type_term',
        'file' => 'query_type_meta_type.inc',
        'path' => $path,
        'adapter' => 'apachesolr',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_widgets().
 */
function drupalorg_search_facetapi_widgets() {
  $path = drupal_get_path('module', 'drupalorg_search') . '/plugins/facetapi';
  return array(
    'facetapi_constant' => array(
      'handler' => array(
        'label' => t('Constant'),
        'class' => 'FacetapiWidgetConstant',
        'query types' => array('term', 'meta_type'),
        'path' => $path,
        'file' => 'widget_constant.inc',
        'requirements' => array(
          'facetapi_requirement_facet_property' => array('name' => 'ss_meta_type')
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_apachesolr_query_prepare().
 *
 * Add project sorts whenever we have an ss_meta_type of theme or module.
 */
function drupalorg_search_apachesolr_query_prepare(&$query) {
  if (isset($_GET['solrsort'])) {
    list($sort, $direction) = explode(' ', $_GET['solrsort']);
    $query->setSolrsort($sort, $direction);
  }
}

/**
 * Implements hook_block_info().
 *
 * Declare all the blocks provided by drupalorg_search.
 */
function drupalorg_search_block_info() {
  $blocks = array(
    'drupalorg_search_navigation' => array(
      'info' => t('Drupalorg Search: Navigation'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'drupalorg_search_alternate' => array(
      'info' => t('Drupalorg Search: Alternate Searches'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Render the content for the requested drupalorg_search block.
 */
function drupalorg_search_block_view($delta) {
  switch ($delta) {
    case 'drupalorg_search_navigation':
      $env_id = apachesolr_default_environment();
      if (apachesolr_has_searched($env_id) && ($query = apachesolr_current_query($env_id))) {
        $searcher = $query->getSearcher();
        if ($response = apachesolr_static_response_cache($searcher)) {
          if ($project_type = drupalorg_search_get_project_type($query, $response)) {
            return ['content' => drupal_get_form('drupalorg_browse_projects_form', $project_type, 'search/' . arg(1))];
          }
          else {
            return ['content' => drupal_get_form('drupalorg_search_sort_form')];
          }
        }
      }
      break;

    case 'drupalorg_search_alternate':
      // Pull any existing search terms to use in our links.
      $env_id = apachesolr_default_environment();
      if (apachesolr_has_searched($env_id) && ($query = apachesolr_current_query($env_id))) {
        $search_term = $query->getParam('q');
      }
      elseif (isset($_GET['text'])) { // For advanced issues.
        $search_term = $_GET['text'];
      }
      else { // For other search pages.
        $search_term = arg(2);
      }

      // Provide selections for all the site-search options.
      $searches = array(
        'site' => 'Posts',
        'drupalorg' => 'IRC Nicks',
        'user' => 'Users',
      );
      $items = array();
      foreach ($searches as $module => $title) {
        $items[$module] = l(t($title), 'search/' . $module . ($search_term ? '/' . $search_term : ''));
      }
      $items['issues'] = l(t('Advanced Issues'), 'project/issues/search', array('query' => array('text' => $search_term)));

      // Remove our current search (since the list should simply be other options).
      if (arg(0) == 'search' && arg(1)) {
        unset($items[arg(1)]);
      }

      $block = array(
        'title' => t('or search forâ€¦'),
        'content' => theme('item_list', array('items' => $items)),
      );
      return $block;
  }
}

/**
 * Get the project type (if any) in a given Solr search.
 *
 * This function loops over all of the active facets in the given Solr query
 * response. If one of the facets selected a "meta_type" for the search, and
 * the meta_type is either "module" or "theme", it returns with that.
 *
 * @param $response
 *   The ApacheSolr response object for the currently active search.
 *
 * @return
 *   The node type object corresponding to search's meta_type of "module" or
 *   "theme", otherwise NULL.
 */
function drupalorg_search_get_project_type($query, $response) {
  $fq = $query->getFilters();
  if (isset($fq)) {
    // Depending on how many facets are in the currently active filter, fq
    // might either be a single value or an array. If there's a single facet,
    // we turn it into an array so the rest of this function can always assume
    // it needs to iterate.
    if (!is_array($fq)) {
      $fq = array($fq);
    }
    foreach ($fq as $filter) {
      if ($filter['#name'] == 'ss_meta_type') {
        if (in_array($filter['#value'], array('module', 'theme'))) {
          $meta_type_rules = drupalorg_crosssite_get_meta_type_rules();
          $meta_type_rules = array_flip($meta_type_rules['type']);
          return node_type_get_type($meta_type_rules[$filter['#value']]);
        }
      }
    }
  }
}

/**
 * This generates a form containing sort selection and a submit button.
 *
 * Generate a form with a sort selection to allow ordering page content
 * based on the available sorting methods.
 */
function drupalorg_search_sort_form($form, &$form_state) {
  $form = array();

  // Add the sort selection field to our form.
  $form['solrsort'] = array(
    '#type' => 'select',
    '#title' => t('Sort by'),
    '#options' => array(
      'score asc' => t('Relevancy'),
      'sort_label asc' => t('Title'),
      'sort_name asc' => t('Author'),
      'ds_created desc' => t('Created date'),
      'ds_project_latest_release desc' => t('Last release'),
      'ds_project_latest_activity desc' => t('Last build'),
    ),
    '#default_value' => isset($_GET['solrsort']) ? $_GET['solrsort'] : 'score asc'
  );
  if (module_exists('project_usage')) {
    $form['solrsort']['#options']['iss_project_release_usage desc'] = t('Most installed');
  }

  // Use GET instead of POST to avoid double bootstrapping.
  $form['#method'] = 'GET';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  return $form;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function drupalorg_search_ctools_plugin_api($module, $api) {
  if ($module == 'apachesolr' && $api == 'apachesolr_environments') {
    return array('version' => 1);
  }
  if ($module == 'apachesolr_search' && $api == 'apachesolr_search_defaults') {
    return array('version' => 3);
  }
  if ($module == 'facetapi' && $api == 'facetapi_defaults') {
    return array('version' => 1);
  }
}
