<?php
// $Id$

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * Profile field ID for country.
 */
define('DRUPALORG_COUNTRY_PID', 17);

/**
 * Profile field ID for languages.
 */
define('DRUPALORG_LANGUAGES_PID', 48);

/**
 * Major version number for core project listings.
 */
define('DRUPALORG_DOWNLOAD_MAJOR_VERSION', 7);  // 7.x

/**
 * TID for API compatibility for project listings.
 */
define('DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID', 103);  // 7.x

// == Core hooks ===============================================================

function drupalorg_perm() {
  return array('manage drupalorg ads');
}

function drupalorg_init() {
  global $user, $conf;

  // Use the dashboard as the home page if the user selected it.
  if ($user->uid !== 0 && isset($user->drupalorg_set_home) && $_SERVER['REQUEST_URI'] === url('')) {
    drupal_goto('user/' . $user->uid . '/dashboard');
  }

  // Use URL aliasing to get links to the About Drupal page right in book
  // navigation, but serve the drupalorg-generated page.
  if ($_GET['q'] === 'node/1') {
    $_GET['q'] = 'about';
  }

  drupal_add_js(drupal_get_path('module', 'drupalorg') .'/js/general.js');

  // Add forum ads & tracking
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($forum_ads[$node->tid])) {
    $forum_id = $node->tid;
  }
  if (!is_null($forum_id)) {
    // Tracking
    $term = taxonomy_get_term($forum_id);
    $conf['googleanalytics_codesnippet_before'] .= "pageTracker._setCustomVar(1, 'Forum', '" . check_plain($term->name) . "', 3);";

    // Ads
    if (!empty($forum_ads[$forum_id])) {
      $block = (object) module_invoke('google_admanager', 'block', 'view', $forum_ads[$forum_id]);
      $block->region = 'right';
      $block->delta = $delta;
      $block->module = 'google_admanager';
      drupal_set_content($block->region, theme('block', $block));
    }
  }

  // Temporary message about the Solr index being rebuilt.
  if (variable_get('drupalorg_warn_search_index_rebuild', FALSE)) {
    if (arg(0) == 'search' || arg(0) == 'download' || arg(0) == 'start' ||
        (arg(0) == 'project' && (arg(1) == 'modules' || arg(1) == 'themes' || arg(1) == 'installation profiles' || arg(1) == 'theme engines'))) {
      drupal_set_message(t('We are rebuilding the search index for the update to drupal.org. The search results may produce broken or out-of-date results until the index is fully rebuilt. We will remove this message when the indexing is complete. Do not report any search errors at this time.'));
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function drupalorg_menu() {
  $items['start'] = array(
    'title' => 'Get Started with Drupal',
    'page callback' => 'drupalorg_start',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'drupalorg_download',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['home'] = array(
    'title' => 'Drupal - Open Source CMS',
    'page callback' => 'drupalorg_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['about'] = array(
    'title' => 'About Drupal',
    'page callback' => 'drupalorg_about',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['community'] = array(
    'title' => 'Community & Support',
    'page callback' => 'drupalorg_community',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['getting-involved'] = array(
    'title' => 'Getting Involved',
    'page callback' => 'drupalorg_getting_involved',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['drupal-7.0'] = array(
    'title' => t('Drupal 7 - Easier and more powerful than ever'),
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_d7_announcement', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Redirect some legacy paths related to the security listings.
  $items['security-contrib'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib'),
    'type' => MENU_CALLBACK,
  );
  $items['security-contrib/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa/rss.xml'),
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg_set_home_js'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_set_home'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/drupalorg'] = array(
    'title' => 'Drupal.org settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_settings_form'),
  );
  $items['admin/settings/drupalorg-ads'] = array(
    'title' => 'Drupal.org ad settings',
    'access arguments' => array('manage drupalorg ads'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_ad_settings_form'),
  );

  return $items;
}

function drupalorg_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'get_involved' => array('info' => t('Ways to Get Involved')),
        'set_home' => array(
          'info' => t('Set user home page'),
          'cache' => BLOCK_NO_CACHE,
        ),
        'drupalorg_activity' => array('info' => t('Drupal.org Activity')),
        'add_to_dashboard' => array(
          'info' => t('Add to Dashboard links'),
          'cache' => BLOCK_CACHE_PER_USER | BLOCK_CACHE_PER_PAGE,
        ),
        'find_local' => array('info' => t('Find Groups Near You')),
      );

    case 'view':
      switch ($delta) {
        case 'get_involved':
          return array(
            'subject' => t('Ways to Get Involved'),
            'content' => t('<p><a href="/forum">Forums</a> – Get advice and give advice.</p>
<p><a href="/irc">IRC</a> – Start chatting now with other community members.</p>
<p><a href="/developing/modules">Modules</a> – Build a module that other Drupal users can enjoy.</p>
<p><a href="/theme-guide">Themes</a> – Feeling creative? Design a theme for other people to customize their site with.</p>
<p><a href="http://localize.drupal.org">Translations</a> – Fluent in French or a speaker of Spanish? Translate Drupal for other users around the world.</p>
<p><a href="http://groups.drupal.org/event">Events</a> – Come to a Drupal event and have fun with the community.</p>
<p><a href="http://association.drupal.org/civicrm/contribute/transact">Donate</a> – Whether you want to say thanks or ensure there is a secure future for Drupal, every little bit helps and is gratefully received.</p>
<p><a href="/contribute/documentation">Documentation</a> – Join the Drupal Documentation Team, and build your skills while improving Drupal\'s documentation.</p>
<p><a href="/community-initiatives">Projects</a> – Get involved with an active longer-term project, such as improving <a href="/community-initiatives/drupal-core">Drupal core</a> or <a href="/community-initiatives/documentation">documentation processes and infrastructure</a>.</p>'),
          );

        case 'set_home':
          global $user;
          if ($user->uid) {
            return array('content' => drupal_get_form('drupalorg_set_home'));
          }
        case 'drupalorg_activity':
          return array(
            'subject' => t('Drupal.org Activity'),
            'content' => drupalorg_activity_block(),
          );

        case 'add_to_dashboard':
          global $user;
          if ($user->uid) {
            $item = menu_get_item();
            $blocks = array();
            switch ($item['path']) {
              case 'node/%':
                if ($item['page_arguments'][0]->type === 'project_project') {
                  $blocks[] = array('Issues for ' . $item['page_arguments'][0]->title, 'project_issue', 'issue_cockpit', array('nid' => $item['page_arguments'][0]->nid));
                }
                break;

              case 'news':
                $blocks[] = array('Drupal News', 'drupalorg_news', 'drupal-news');
                break;

              case 'aggregator/categories/%':
                $blocks[] = array($item['page_arguments'][0]['title'], 'aggregator', 'category-' . $item['page_arguments'][0]['cid']);
                break;

              case 'user/%/track':
                if ($item['map'][1]->uid === $user->uid) {
                  $blocks[] = array('Your Posts', 'tracker2', 'user');
                }
                break;

              case 'project/issues/user':
                $blocks[] = array('Your Issues', 'views', 'a512ec6dea837b33a2b010c2af17ed85');
                break;

              case 'getting-involved':
                $blocks[] = array('Contributor Links', 'drupalorg_project', '0');
                break;
            }
            if (count($blocks) > 0) {
              $page = homebox_get_page('dashboard');
              $content = '';
              foreach ($blocks as $block) {
                $options = array('attributes' => array('class' => 'add'));
                if (isset($block[3])) {
                  $options['query'] = $block[3];
                }
                $content .= homebox_add_link(t('Add @name to Dashboard', array('@name' => $block[0])), $page, $block[1], $block[2], $options);
              }
              return array('content' => $content);
            }
          }
          break;

        case 'find_local':
          return array(
            'subject' => t('Find Groups Near You'),
            'content' => t('<a href="http://groups.drupal.org/">Groups.Drupal.org</a> has <a href="http://groups.drupal.org/og/all?keys=&amp;gt_tid[]=141">regional groups</a> from all over the world.'),
          );
      }
      break;
  }
}

/**
 * Overall quick stats for drupal.org.
 */
function drupalorg_activity_block() {
  $items = array();
  $stats = drupalorg_get_activity();
 	$items[] = t('<strong>@accounts</strong> people with CVS accounts', array('@accounts' => $stats['number_of_cvs_accounts']));
 	$items[] = t("<strong>@commits</strong> CVS commits this week", array('@commits' => $stats['number_of_cvs_commits']));
 	$items[] = t("<strong>@users</strong> users on drupal.org", array('@users' => $stats['number_of_users']));
 	$items[] = t("<strong>@sites</strong> sites running Drupal", array('@sites' => $stats['sites']));
 	$items[] = t("<strong>@docs</strong> Documentation team members", array('@docs' => $stats['docs']));
 	$items[] = t("<strong>@comments</strong> comments and issue followups", array('@comments' => $stats['comments']));

  $output = theme('item_list', $items);
  return $output;
}

/*
 * If we do not have data or our data was generated an hour ago,
 * try to generate it again.
 */
function drupalorg_get_activity($_force = FALSE){
  if (!$_force && ($cache = cache_get('drupalorg_front_counter_data', 'drupalorg'))) {
    $stats = $cache->data;
  }
  elseif (lock_acquire('drupalorg_get_activity', 5)) {
    $stats = array();

    // CVS: retrieve info via API.
    $stats['number_of_cvs_accounts'] = number_format(cvs_get_total_accounts());
    $stats['number_of_cvs_commits'] = number_format(cvs_get_total_commits(NULL, 7*24*60*60));

    // Issue comments this week
    $followups = db_result(db_query("SELECT COUNT(distinct c.nid) FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.type = 'project_issue' AND n.status = 1 AND c.timestamp > %d", strtotime("1 week ago")));
    $stats['number_of_issue_comments'] = number_format($followups);

    // Projects this week
    $new_modules = db_result(db_query("SELECT COUNT(distinct p.nid) FROM {project_projects} p INNER JOIN {node} n ON p.nid = n.nid INNER JOIN {term_node} tn ON tn.nid = n.nid AND tn.tid = 14 WHERE n.created > %d", strtotime("1 week ago")));
    $stats['number_of_new_modules'] = number_format($new_modules);

    // All Modules
    $modules = db_result(db_query("SELECT COUNT(distinct p.nid) FROM {project_projects} p INNER JOIN {term_node} tn ON p.nid = tn.nid WHERE tn.tid = 14"));
    // TODO would be nice to limit to D6 & D7
    //$modules = db_result(db_query("SELECT COUNT(distinct prn.pid) FROM node n INNER JOIN project_release_nodes prn ON n.nid = prn.nid INNER JOIN term_node tn on prn.pid = tn.nid WHERE tn.tid = 14 AND prn.version_api_tid IN (87, 103)"));
    $stats['number_of_modules'] = number_format($modules);

    // All Themes
    $themes = db_result(db_query("SELECT COUNT(distinct p.nid) FROM {project_projects} p INNER JOIN {term_node} tn ON p.nid = tn.nid WHERE tn.tid = 15"));
    // TODO would be nice to limit to D6 & D7
    //$themes = db_result(db_query("SELECT COUNT(distinct prn.pid) FROM node n INNER JOIN project_release_nodes prn ON n.nid = prn.nid INNER JOIN term_node tn on prn.pid = tn.nid WHERE tn.tid = 15 AND prn.version_api_tid IN (87, 103)"));
    $stats['number_of_themes'] = number_format($themes);

    // Users: Count them.
    $stats['number_of_users'] = number_format(db_result(db_query('SELECT COUNT(*) FROM {users} WHERE uid > 0 AND status = 1 AND login > 0')));

    // Country: A single text field, so we can filter it in SQL.
    $stats['number_of_countries'] = number_format(db_result(db_query("SELECT COUNT(DISTINCT value) FROM {profile_values} WHERE fid = %d AND value NOT IN ('', '<not specified>')", DRUPALORG_COUNTRY_PID)));

    // Languages: Get all the distinct combinations and then filter that down.
    $languages = array();
    $result_languages = db_query('SELECT DISTINCT value FROM {profile_values} WHERE fid = %d', DRUPALORG_LANGUAGES_PID);
    while ($language_profile = db_fetch_object($result_languages)) {
      $languages = array_merge($languages, explode('; ', $language_profile->value));
    }
    $languages = array_unique($languages);
    $stats['number_of_languages'] = count($languages);

    // Sites: use project API.
    $stats['sites'] = number_format(project_usage_get_project_total_usage(3060));

    // Docs team: count users with role.
    $stats['docs'] = number_format(db_result(db_query("SELECT COUNT(*) FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.rid WHERE u.status = 1 AND r.rid = 5")));

    // Comments: count comments.
    $stats['comments'] = number_format(db_result(db_query("SELECT COUNT(*) FROM {comments} WHERE status = 0")));

    cache_set('drupalorg_front_counter_data', $stats, 'drupalorg');
    lock_release('drupalorg_get_activity');
  }
  else {
    $stats = FALSE;
  }
  return $stats;
}

function drupalorg_set_home() {
  global $user;
  $items = array();
  if ($user->drupalorg_set_home) {
    $message = t('Use Default Homepage');
  }
  else {
    $message = t('Make this your Homepage');
  }

  $items[] = array(
    '#value' => l(t($message), $_GET['q'], array('attributes' => array('class' => 'add'))),
  );
  $items['submit'] = array(
    '#type' => 'submit',
    '#value' => $message,
    '#drupalorg_set_home' => $user->drupalorg_set_home ? NULL : TRUE,
    '#ahah' => array(
      'path' => 'drupalorg_set_home_js',
      'event' => 'click',
      'wrapper' => 'drupalorg-set-home',
      'method' => 'replaceWith',
    ),
  );

  return $items;
}

function drupalorg_set_home_submit($form, $form_state) {
  global $user;

  $user = user_save($user, array('drupalorg_set_home' => $form_state['clicked_button']['#drupalorg_set_home']));

  $_POST['form_id'] = NULL;
  print drupal_json(array(
    'status' => TRUE,
    'data' => drupal_get_form('drupalorg_set_home'),
  ));
  exit;
}

// == Major landing pages ======================================================

/**
 * Page callback for the frontpage.
 */
function drupalorg_home() {
  $return[] = update_sql('DELETE FROM {url_alias} WHERE pid = 162'); // news
  jquery_ui_add('ui.tabs');
  drupal_add_js(drupal_get_path('module', 'drupalorg') .'/js/home.js');

  return theme('drupalorg_home');
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$variables) {
  if ($variables['is_front']) {
    /* Temporary, http://drupal.org/node/1016076
    $variables['mission'] = '<h2>Come for the software, stay for the community</h2>
    <p class="standfirst">Drupal is an open source content management platform powering millions of websites and applications. It’s built, used, and supported by an active and diverse community of people around the world.</p>';
    */
    $variables['mission'] = '<h2><a href="/drupal-7.0">We’re celebrating the launch of Drupal 7</a></h2>
    <p class="standfirst">Now easier to use, more flexible and more scalable, Drupal is an open source content management platform powering millions of websites and applications. <a href="/drupal-7.0">Learn more about Drupal 7</a></p>';
  }

  $router = menu_get_item();
  if ($router['path'] == 'drupal-7.0') {
    // Hide the page title on the D7 release announcement
    unset($variables['title']);
  }
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_preprocess_drupalorg_home(&$variables) {
  $variables['theme_images_directory'] = drupal_get_path('theme', variable_get('theme_default', 'bluecheese')) .'/images';

  // == Things we made with drupal
  $things = drupalorg_get_most_recent_things_we_made(4);
  $thing = $things[array_rand($things)];
  $image = theme('image', $thing['image_url'], $thing['title'], $thing['title'], NULL, FALSE);
  $caption = '<div class="caption">' . $thing['title'] . '</div>';
  $variables['things_we_made'] = '<div class="things-we-made-wrapper">' . l($image . $caption, 'node/' . $thing['nid'], array('html' => TRUE)) . '</div>';

  $variables['map_content'] = drupalorg_map_content();

  // == Forums tab data/markup
  $sql = db_rewrite_sql("SELECT mv.entity_id AS nid, mv.node_title AS title, n.created, n.uid, u.name FROM {mv_drupalorg_node_by_vocabulary} mv INNER JOIN {node} n ON n.nid = mv.entity_id INNER JOIN {users} u ON u.uid = n.uid WHERE mv.term_vid = 1 AND n.status = 1 ORDER BY mv.node_nid DESC");
  $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, 5);
  $recent_forums = '';
  while ($node = db_fetch_object($result)) {
    $recent_forums .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>';
  }
  $recent_forums .= '<p>' . l(t('More forums…'), 'forum') .'</p>';
  $variables['tab_content_forums'] = $recent_forums;

  // == Counters for users

  // Retrieve or rebuild stats cache
  $stats = drupalorg_get_activity();
  $variables += $stats;

  // PSA ad
  $slots = _google_admanager_get_ad_slots();
  $variables['psa'] = theme('google_admanager_block', variable_get('google_admanager_account', ''), 'Redesign_home');
}

function drupalorg_map_content($_force = FALSE) {
  if (!$_force && $cache = cache_get('drupalorg_map_content', 'drupalorg')) {
    $output = $cache->data;
  }
  else {
    $output = '<div class="homepage-pin homepage-pin-commit homepage-pin-west"><span class="latitude">' . variable_get('drupalcon_latitude', 41.836944) . '</span><span class="longitude">' . variable_get('drupalcon_longitude', -87.684444) . '</span><div class="content drupalcon">' . variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011') . '</div></div>';
    $queries = array(
      db_rewrite_sql("SELECT DISTINCT nr.nid, nr.title, hug.latitude, hug.longitude, u.name, u.uid, 'doc' type, 'updated' verb FROM {node_revisions} nr INNER JOIN {node} n ON nr.nid = n.nid INNER JOIN {book} b ON b.nid = n.nid INNER JOIN {html5_user_geolocation} hug ON hug.uid = n.uid INNER JOIN {users} u ON u.uid = nr.uid WHERE n.status = 1 AND u.status = 1 ORDER BY nr.timestamp DESC"),
      db_rewrite_sql("SELECT DISTINCT n.nid, n.title, hug.latitude, hug.longitude, u.name, u.uid, 'forum' type, 'posted' verb FROM {node} n INNER JOIN {html5_user_geolocation} hug ON hug.uid = n.uid INNER JOIN {users} u ON u.uid = n.uid WHERE n.type = 'forum' AND n.status = 1 AND u.status = 1 ORDER BY n.created DESC"),
      "SELECT DISTINCT cm.cid, cm.message title, hug.latitude, hug.longitude, u.name, u.uid, 'commit' type, 'committed' verb FROM {cvs_messages} cm INNER JOIN {html5_user_geolocation} hug ON hug.uid = cm.uid INNER JOIN {users} u ON u.uid = cm.uid WHERE u.status = 1 ORDER BY cm.created DESC",
    );
    $map = array();
    foreach ($queries as $q => $query) {
      $n = 0;
      $result = db_query_range($query, 0, 10);
      while ($row = db_fetch_object($result)) {
        // Trim to maximum.
        $row->title = truncate_utf8(trim($row->title), 45);
        // If at max.
        if (drupal_strlen($row->title) === 45) {
          // Truncate at space in the last 10 characters.
          if (preg_match('/\s/', drupal_substr($row->title, 35))) {
            $row->title = preg_replace('/\s[^\s]*$/', '…', $row->title);
          }
          else {
            $row->title .= '…';
          }
        }
        // Set link.
        if ($row->type === 'commit') {
          $row->link = l($row->title, 'cvs', array('query' => array('commit' => $row->cid)));
        }
        else {
          $row->link = l($row->title, 'node/' . $row->nid);
        }
        // Add for round-robin sorting.
        $map[$n++ * count($queries) + $q] = $row;
      }
    }
    ksort($map);
    foreach ($map as $row) {
      $output .= '<div class="homepage-pin homepage-pin-' . $row->type . ' homepage-pin-' . ($row->longitude > 0 ? 'east' : 'west') . '"><span class="latitude">' . $row->latitude . '</span><span class="longitude">' . $row->longitude . '</span><div class="content">' . t('!name @verb<br />!page', array('!name' => theme('username', $row), '@verb' => $row->verb, '!page' => $row->link)) . '</div></div>';
    }

    cache_set('drupalorg_map_content', $output, 'drupalorg');
  }

  return $output;
}

/**
 * Page callback for the getting started page.
 */
function drupalorg_start() {
  return theme('drupalorg_start');
}

/**
 * Page callback for the about Drupal page.
 */
function drupalorg_about() {
  return theme('drupalorg_about');
}

/**
 * Implementation of template_preprocess_drupalorg_about().
 */
function drupalorg_preprocess_drupalorg_about(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
}

/**
 * Implementation of template_preprocess_drupalorg_start().
 */
function drupalorg_preprocess_drupalorg_start(&$variables) {
  $variables['theme_images_directory'] = drupal_get_path('theme', variable_get('theme_default', 'bluecheese')) .'/images';

  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');
  $variables['drupalorg_featured_install_profiles'] = variable_get('drupalorg_featured_install_profiles', '');

  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_MODULE_TID,
  )));
  $variables['most_popular_modules'] = drupalorg_order_facet_content('sort_most_installed');

  project_solr_run_project_query('project/themes', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_THEME_TID,
  )));
  $variables['most_popular_themes'] = drupalorg_order_facet_content('sort_most_installed');
}

/**
 * Page callback for the download page.
 */
function drupalorg_download() {
  return theme('drupalorg_download');
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');
  $variables['drupalorg_featured_install_profiles'] = variable_get('drupalorg_featured_install_profiles', '');

  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_MODULE_TID,
  )));

  // Since we control what facets we're building, we can just utilize the
  // delta as the unique key for the sake of brevity (both here and in the
  // $variables array).
  $facets = array(
    'sort_most_installed' => 'drupalorg_order_facet',
    'sort_created' => 'drupalorg_order_facet',
  );
  // Render and save the facet blocks.
  foreach ($facets as $delta => $module) {
    $variables[$delta] = drupalorg_block_render($module, $delta);
  }

  $variables['version_form'] = drupal_get_form('project_solr_version_form', 'download', t('Show only modules for Drupal version'));

  // Rendering the block directly from views doesn't work nicely here, since
  // the resulting markup is harder to use with bluecheese. Plus, we're doing
  // some magic to ensure that the version filter impacts this block as well.
  // So, we just load the view object, do some magic, run the view, fetch the
  // results and render those ourselves. This also lets us add our 'View full
  // index' link directly as another li in the list (as bluecheese expects)
  // instead of having it in its own div.
  $view = views_get_view('project_index');
  $view->set_display('block_1');
  $view->set_arguments(array('modules'));
  // See if the version filter was used, and if so, have it impact the view.
  if (!empty($_GET['filters'])) {
    $matches = array();
    if (preg_match('/drupal_core:(\d+)/', $_GET['filters'], $matches)) {
      $core_version = $matches[1];
      $filters = $view->display_handler->get_option('filters');
      $filters['tid']['value'] = array($core_version);
      $filters['tid']['exposed'] = FALSE;
      $view->display_handler->set_option('filters', $filters);
    }
  }
  $view->pre_execute();
  $view->execute();
  $results = $view->result;
  foreach ($results as $result) {
    $modules[] = l($result->node_title, 'node/' . $result->nid);
  }
  $modules[] = '<a href="/project/modules/index" class="all">View full index</a>';
  $module_index = '<h2>' . t('Module Index') . '</h2>';
  $module_index .= theme('item_list', $modules, NULL, 'ul', array('class' => 'flat'));
  $variables['module_index'] = $module_index;
}

/**
 * Page callback for the community page.
 */
function drupalorg_community() {
  return theme('drupalorg_community');
}

/**
 * Implementation of template_preprocess_drupalorg_community().
 */
function drupalorg_preprocess_drupalorg_community(&$variables) {
  // "How can we help you?" form at the top of /community.
  $variables['help_form'] = '';
  if (module_exists('drupalorg_search')) {
    $variables['help_form'] = drupal_get_form('drupalorg_search_help_form');
  }
  // "Recent activity" list at the bottom of /community.
  $variables['recent_activity'] = '';
  if (module_exists('tracker2')) {
    // Load the tracker2.pages.inc file so we have access to the tracker2_query function.
    module_load_include('inc', 'tracker2', 'tracker2.pages');
    $variables['recent_activity'] = theme('drupalorg_recent_activity', tracker2_query(variable_get('drupalorg_recent_activity_pager', 10)));
  }
}

/**
 * Page callback for the getting involved page.
 */
function drupalorg_getting_involved() {
  return theme('drupalorg_getting_involved');
}

/**
 * Implementation of template_preprocess_drupalorg_getting_involved().
 */
function drupalorg_preprocess_drupalorg_getting_involved(&$variables) {
  // First, build and render a teaser of the old docs node.
  $docs_node = node_load(281873);
  unset($docs_node->taxonomy); // Looks funny here.
  unset($docs_node->title); // Looks funny here.
  $docs_node = node_build_content($docs_node, TRUE, FALSE);
  $content = drupal_render($docs_node->content);

  $variables['docs_node'] = $docs_node->teaser;
  $variables['docs_more'] = l(t('Getting Involved Guide'), 'node/281873');

  // Load the book navigation for the docs node, if needed.
  //$variables['docs_nav'] = theme('book_navigation', $docs_node->book);

  // Then, show the view for community spotlight.
  $view = views_get_view('drupalorg_community_spotlight');
  $variables['spotlight_title'] = t($view->display['default']->display_options['title']);
  $variables['spotlight'] = $view->preview('block_1');
}

/**
 * Implementation of template_preprocess_drupalorg_d7_announcement().
 */
function drupalorg_preprocess_drupalorg_d7_announcement(&$variables) {
  global $conf;
  $languages = array(
    'ca' => 'Catalan',
    'zh-hans' => 'Chinese (simplified)',
    'zh-hant' => 'Chinese (traditional)',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'fi' => 'Finnish',
    'fr' => 'French',
    'de' => 'German',
    'el' => 'Greek',
    'he' => 'Hebrew',
    'hu' => 'Hungarian',
    'id' => 'Indonesian',
    'it' => 'Italian',
    'ko' => 'Korean',
    'lt' => 'Lithuanian',
    'nb' => 'Norwegian (Bokmål)',
    'pt' => 'Portuguese (Portugal)',
    'pt-br' => 'Portuguese (Brazil)',
    'ru' => 'Russian',
    'sr' => 'Serbian',
    'sl' => 'Slovene',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'th' => 'Thai',
    'uk' => 'Ukrainian',
    'vi' => 'Vietnamese',
  );

  // Valid language?
  if (isset($languages[$variables['language']])) {
    include './' . drupal_get_path('module', 'drupalorg') . '/translations/drupalorg-d7-announcement.' . $variables['language'] . '.php';
    $conf['locale_custom_strings_' . $variables['language']] = $strings;
    drupal_set_title(t(drupal_get_title(), array(), $variables['language']));
  }
  else {
    $variables['language'] = 'en';
  }
  if ($variables['language'] === 'he') {
    $variables['rtl'] = TRUE;
  }

  $variables['language_list'] = array();
  unset($languages[$variables['language']]);
  foreach ($languages as $code => $name) {
    if ($code === 'en') {
      $variables['language_list'][] = l($name, 'drupal-7.0');
    }
    else {
      $variables['language_list'][] = l($name, 'drupal-7.0/' . $code);
    }
  }
  $variables['language_list'] = implode(', ', $variables['language_list']);

  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/jquery.cycle.all.min.js', 'module');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/d7-announcement.js', 'module');
  drupal_add_css(drupal_get_path('module', 'drupalorg') .'/drupalorg-d7-announcement.css', 'theme');
}

/**
 * Theme function for the presentation of results on /community in the
 * "Recent Activity" section.
 *
 * @param $nodes array
 *  An array of node objects, keyed by nid.
 */
function theme_drupalorg_recent_activity($nodes) {
  if (!empty($nodes)) {
    // Display the data.
    $rows = array();
    foreach ($nodes as $node) {
      $rows[] =
        '<h6>' . l($node->title, "node/$node->nid") .' '. theme('mark', node_mark($node->nid, $node->changed)) . '</h6>' .
        '<p class="submitted">' . t('Last activity: ') . t('!time', array('!time' => format_date($node->last_activity, 'custom', 'F d, Y'))) . '</p>';
    }
  }
  else {
    $rows[] = t('No posts available.');
  }
  $output = '<div id="recent-activity">';
  $output .= theme('item_list', $rows);
  $output .= l(t('More recent activity…'), 'tracker');
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_start' => array(
      'template' => 'drupalorg-start',
    ),
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_home' => array(
      'template' => 'drupalorg-home',
    ),
    'drupalorg_about' => array(
      'template' => 'drupalorg-about',
    ),
    'drupalorg_community' => array(
      'template' => 'drupalorg-community',
    ),
    'drupalorg_getting_involved' => array(
      'template' => 'drupalorg-getting-involved',
    ),
    'drupalorg_recent_activity' => array(
      'arguments' => array('nodes' => array()),
    ),
    'drupalorg_hosting_page' => array(
      'template' => 'drupalorg-hosting-page',
    ),
    'drupalorg_d7_announcement' => array(
      'arguments' => array(
        'language' => 'en',
      ),
      'template' => 'drupalorg-d7-announcement',
    ),
  );
}

// == Altering existing behavior ===============================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // List of forms to check for overrides, and the corresponding permissions.
  $override_forms = array(
    'book_node_form'       => 'revert revisions',
    'forum_node_form'      => 'administer nodes',
    'page_node_form'       => 'administer nodes',
    'story_node_form'      => 'administer nodes',
  );
  // Override the access for attachments if it's a forbidden form,
  // and the user does not have sufficient permissions.
  if (in_array($form_id, array_keys($override_forms)) && !user_access($override_forms[$form_id])) {
    if (isset($form['attachments']['#access'])) {
      $form['attachments']['#access'] = FALSE;
    }
  }

  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }

  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }

  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }

  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }

  // Add extra choices to the dblog settings selector
  if ($form_id == 'dblog_admin_settings') {
    $form['dblog_row_limit']['#options'] = drupal_map_assoc(array(100, 1000, 10000, 100000, 250000, 500000, 1000000));
  }
}

// == User form functionality ==================================================

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_result(db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER('%s')", $match[1] .'+%%@'. $match[3])) > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 * @todo Headers are blocked by some providers so this is not accurate.
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = '%s' AND status = %d", 'homepage', 0);
    $masks = array();
    while ($mask = db_fetch_object($result)) {
      // Build masks array for preg_matching.
      $masks[] = '@'. strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) .'@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
    // Did not work due to several hosts rewriting headers.
    /*if (!user_access('administer users')) {
      // Check for Drupal-ness of website. Try only once.
      $response = drupal_http_request($form_state['values']['homepage'], array(), 'GET', NULL, 1);
      if ($response->headers['Expires'] != 'Sun, 19 Nov 1978 05:00:00 GMT') {
        form_set_error('homepage', t("Your website does not seem to be a Drupal site. If you think we are wrong, please open an issue in the webmasters' queue."));
      }
    }*/
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

/**
 * Add support for searching for users based on the fixed IRC nickname field.
 *
 * @todo Possibly remove as part of search migration.
 */
function drupalorg_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('IRC nicks');
      }
    case 'search':
      if (user_access('access user profiles')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $result = pager_query("SELECT u.name, u.uid FROM {profile_values} pv INNER JOIN {users} u ON pv.uid = u.uid WHERE pv.fid = 35 AND LOWER(pv.value) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array('title' => $account->name, 'link' => url('user/'. $account->uid, array('html' => TRUE)));
        }
        return $find;
      }
  }
}

/**
 * Implementation of hook_views_api().
 */
function drupalorg_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'drupalorg'),
  );
}

/**
 * Implement hook_views_default_views_alter().
 */
function drupalorg_views_default_views_alter(&$views) {
  $path = drupal_get_path('module', 'drupalorg');
  require_once("$path/drupalorg.views_default.inc");
  _drupalorg_views_default_views_alter($views);
}

/**
* Return an array of the most recently created projects with the given taxonomy term.
*
* @return
*   An array of of the most recent case study images created projects. The array includes the node
*   ID and node title and image url.
*/
function drupalorg_get_most_recent_things_we_made($limit = 4) {

  $cached = cache_get('things_we_made');

  if ($cached->data) {
    $things = $cached->data;
  }
  else {
    // Obtain our case studies
    // We will pad the results to try to make sure we have enough images
    $things = array();
    $result = db_query('SELECT n.nid, n.title, nr.body FROM {node} n LEFT JOIN {term_node} tn ON n.nid = tn.nid AND n.vid = tn.vid LEFT JOIN {node_revisions} nr ON nr.nid = n.nid AND nr.vid = n.vid WHERE tn.tid = 25 AND n.status = 1 AND n.promote = 1 ORDER BY n.created DESC LIMIT %d', $limit * 2);

    // Find the images in the case study
    while ($thing = db_fetch_object($result)) {
      $image_url = '';
      $has_image = preg_match("/http:\/\/[^\'\"]*\.(png|jpg|jpeg)/", $thing->body, $image_url);
      if ($has_image) {
        $things[] = array(
          'nid' => $thing->nid,
          'title' => $thing->title,
          'image_url' => $image_url[0],
        );
      }

      // Stop looking if we have met our limit
      if (count($things) == $limit) {
        break;
      }
    }
    cache_set('things_we_made', $things);
  }

  return $things;
}

/*
 * Returns a link to the latest recommended release for the Drupal project.
 *
 * @param $text
 *   Text to be used for the button in addition to the version string
 *
 * @return
 *   HTML string with link to the release node.
 */
function drupalorg_download_drupal_link_button($text) {
  $release = project_release_get_current_recommended(3060, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID, DRUPALORG_DOWNLOAD_MAJOR_VERSION, 'recommended');
  // Assumes a drupal-$version alias exists for the given Drupal version, which
  // has been the tradition. Just keep that tradition, and this works wonders.
  return l('<span>'. check_plain("$text $release->version") .'</span>', 'project/drupal', array('html' => TRUE, 'attributes' => array('class' => 'link-button')));
}

/**
 * Default dashboard content.
 *
 * @todo this is totally provisional at this point.
 */
function drupalorg_homebox() {
  return array(
    'dashboard' => array(
      'title' => 'Dashboard',
      'path' => 'dashboard',
      'menu' => 0,
      'enabled' => 1,
      'auto_save' => 1,
      'regions' => 3,
      'cache' => 1,
      'full' => 0,
      'custom' => 0,
      'roles' => array(
        0 => 'authenticated user',
      ),
      'color' => 0,
      'colors' => array(
        0 => '#e4f0f8',
        1 => '#c4d5b4',
        2 => '#ecc189',
        3 => '#ec8989',
        4 => '#6b6b70',
        5 => '#4b97e5',
      ),
      'widths' => array(),
      'blocks' => array(
        // Column 1
        'drupalorg_news_drupal-news' => array(
          'module' => 'drupalorg_news',
          'delta' => 'drupal-news',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -33,
        ),
        'aggregator_category-2' => array(
          'module' => 'aggregator',
          'delta' => 'category-2',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Planet Drupal',
          'weight' => -31,
        ),
        // Column 2
        /* Waiting on #874790
        'views_flag_bookmarks-block' => array(
          'module' => 'views',
          'delta' => 'flag_bookmarks-block',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),*/
        'tracker2_user' => array(
          'module' => 'tracker2',
          'delta' => 'user',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Posts',
          'weight' => 1,
        ),
        'views_a512ec6dea837b33a2b010c2af17ed85' => array(
          'module' => 'views',
          'delta' => 'a512ec6dea837b33a2b010c2af17ed85',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Issues',
          'weight' => 2,
        ),
        // Column 3
        'project_issue_issue_cockpit' => array(
          'module' => 'project_issue',
          'delta' => 'issue_cockpit',
          'nid' => 3060,
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -32,
        ),
        'drupalorg_project_0' => array(
          'module' => 'drupalorg_project',
          'delta' => '0',
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
      ),
    ),
  );
}

/**
 * Render the HTML for a given block.
 *
 * This function takes a module and a delta, loads the block info from the DB,
 * invokes the function to compute the block content, and then renders the
 * block to HTML via theme('block'). This is basically a heavily pared back
 * implementation of block_list() for a single block.
 *
 * @param string $module
 *   The module that defines the block we're rendering.
 *
 * @param string $delta
 *   The delta of the block that we're rendering.
 *
 * @return
 *   The rendered HTML for the given block.
 *
 * @see block_list()
 * @see theme_block()
 */
function drupalorg_block_render($module, $delta) {
  // Load the title, since that can be modified administratively.
  global $theme;
  $title = db_result(db_query("SELECT title FROM {blocks} WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $module, $delta, $theme));

  $block_output = module_invoke($module, 'block', 'view', $delta);
  // Make sure our block gave us any output at all.
  if (empty($block_output) || !is_array($block_output)) {
    return '';
  }
  foreach ($block_output as $k => $v) {
    $block->$k = $v;
  }

  // Set the module and delta so that the blocks contain
  // at least the minimum of expected information.
  $block->module = $module;
  $block->delta = $delta;

  if (isset($block->content) && $block->content) {
    // Override default block title if a custom display title is present.
    if ($title) {
      // Check plain admin-generated titles, but not titles set in code.
      $block->subject = $title == '<none>' ? '' : check_plain($title);
    }
    if (!isset($block->subject)) {
      $block->subject = '';
    }
  }
  return theme('block', $block);
}

function drupalorg_settings_form() {
  $form = array();

  $form['featured'] = array(
    '#type' => 'fieldset',
    '#title' => t('Featured projects')
  );
  $form['featured']['drupalorg_featured_translations'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured translations'),
    '#default_value' => variable_get('drupalorg_featured_translations', ''),
    '#rows' => 5,
  );
  $form['featured']['drupalorg_featured_install_profiles'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured install profiles'),
    '#default_value' => variable_get('drupalorg_featured_install_profiles', ''),
    '#rows' => 5,
  );

  $form['drupalcon'] = array(
    '#type' => 'fieldset',
    '#title' => t('DrupalCon'),
  );
  $form['drupalcon']['drupalcon_latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon latitude'),
    '#default_value' => variable_get('drupalcon_latitude', 41.836944),
  );
  $form['drupalcon']['drupalcon_longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon longitude'),
    '#default_value' => variable_get('drupalcon_longitude', -87.684444),
  );
  $form['drupalcon']['drupalcon_message'] = array(
    '#type' => 'textarea',
    '#title' => t('DrupalCon map bubble'),
    '#default_value' => variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011'),
  );

  return system_settings_form($form);
}

function drupalorg_ad_settings_form() {
  $form = array();

  $slots = array_merge(array(0 => t('No ad')), _google_admanager_get_ad_slots());
  $ads = variable_get('drupalorg_forum_ad', array());
  $form['drupalorg_forum_ad'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forum ads'),
    '#description' => t('Configure available <a href="!url">ad units</a>', array('!url' => url('admin/settings/google_admanager'))),
    '#tree' => TRUE,
  );
  foreach (taxonomy_get_tree(1) as $term) {
    $form['drupalorg_forum_ad'][$term->tid] = array(
      '#type' => 'select',
      '#title' => check_plain($term->name),
      '#options' => $slots,
      '#default_value' => isset($ads[$term->tid]) ? $ads[$term->tid] : 0,
    );
  }

  return system_settings_form($form);
}

/**
 * Add notes to ads.
 */
function drupalorg_preprocess_block(&$variables) {
  if ($variables['block']->module === 'google_admanager') {
    $variables['block']->content .= '<div class="gam-suffix"><a href="http://association.drupal.org/advertising">Advertising</a> helps build a successful ecosystem around Drupal.</div>';

    if ($variables['block']->delta === md5('Redesign_books')) {
      $variables['block']->content = '<div class="gam-prefix"><h3><a href="/books">Drupal Books</a></h3>
        <p>There are many useful books about Drupal. Here are just a few of our recommendations:</p></div>'
        . $variables['block']->content;
    }
    elseif ($variables['block']->delta === md5('Security_books')) {
      $variables['block']->content = '<div class="gam-prefix"><p>There are many useful <a href="/books">books about Drupal</a>. Here are two that discuss security:</p></div>'
        . $variables['block']->content;
    }
  }
}

function drupalorg_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Add hosting page ads
  if ($op === 'view' && $node->nid == 21785) {
    // Add Ads after teaser
    $filtered_teaser = check_markup($node->teaser, $node->format, FALSE);
    $node->content['body']['#value'] = str_replace($filtered_teaser, $filtered_teaser . theme('drupalorg_hosting_page'), $node->content['body']['#value']);
  }
}

/**
 * @group CVS Applications
 * @{
 */

/**
 * The node nid of Drupal.Org's CVS Applications project node.
 */
define('DRUPALORG_CVS_APP_PROJECT_NID', 525912);

/**
 * Hook into the CVS application form submit handler.
 */
function drupalorg_form_cvs_application_form_alter(&$form) {
  array_unshift($form['#submit'], 'drupalorg_cvs_app_submit');
}

/**
 * FormAPI submit handler
 *
 * @param $form
 *  Array, the FormAPI array
 * @param $form_state
 *  Array, FormAPI state array.
 *
 * This submit handler automatically creates a project issue when the user
 * applies for CVS account.
 */
function drupalorg_cvs_app_submit($form, &$form_state) {
  global $user;

  // Easy to use link to the user's CVS form.
  $user_cvs_edit_link = l('CVS edit link for '. $user->name, 'user/'. $user->uid .'/edit/cvs');

  // Automagically create a project issue in the Drupal CVS Applications project.
  $node = new stdClass();
  $node->type = 'project_issue';
  $node->uid = $user->uid;
  $node->comment = 2; // Allow follow-ups.
  $node->pid = variable_get('drupalorg_cvs_app_project_nid', DRUPALORG_CVS_APP_PROJECT_NID);
  $node->sid = variable_get('drupalorg_cvs_app_project_sid', 16); // Status is "active (needs more info)".
  $node->component = variable_get('drupalorg_cvs_app_project_component', 'Miscellaneous');
  $node->category = variable_get('drupalorg_cvs_app_project_task', 'task');
  $node->priority = variable_get('drupalorg_cvs_app_project_priority', 2); // Normal.
  $node->title = $user->name .' ['. $form_state['values']['cvs_user'] .']'; // Set title to username of applicant (helps when ordering the summary).
  $node->body = $user_cvs_edit_link ."\n\n<p />". $form_state['values']['motivation'];

  // Create the project issue node.
  node_save($node);

  // Save the issue nid, used during the email generation phase.
  _drupalorg_cvs_app_issue_nid($node->nid);
}

/**
 * Implementation of hook_mail_alter()
 */
function drupalorg_mail_alter(&$message) {
  global $base_url;

  $find = array(
    'cvs_cvs_email_submit_applicant',
    'cvs_cvs_email_submit_admin',
  );

  if (in_array($message['id'], $find)) {
    // Find and replace the project issue of the project issue.
    $message['body'] = str_replace('%cvs-project-issue', $base_url .'/node/'. _drupalorg_cvs_app_issue_nid(), $message['body']);
  }
}

/**
 * Used to store a variable statically between hook calls.
 *
 * @param $nid
 *   Integer, node nid number to save.
 */
function _drupalorg_cvs_app_issue_nid($nid = FALSE) {
  static $stored_nid;
  if ($nid !== FALSE) {
    $stored_nid = $nid;
  }
  return $stored_nid;
}

/**
 * @}
 */

/**
 * Implementation of hook_user().
 */
function drupalorg_user($op, &$edit, &$account, $category = NULL) {
  if ($op === 'view') {
    global $user;

    // Column layout for profile pages.
    $content = array(
      'column_1' => array(
        '#weight' => 0,
        '#prefix' => '<div class="grid-8 alpha">',
        '#suffix' => '</div>',
      ),
      'column_2' => array(
        '#weight' => 1,
        '#prefix' => '<div class="grid-4 omega">',
        '#suffix' => '</div>',
      ),
    );

    // Get the membership display content
    $membership = drupalorg_civimembership_load($account);
    $placeholders = array(
      '@username' => $account->name,
    );
    if ($membership != FALSE) {
      $placeholders['@membership_type'] = drupal_strtolower($membership->membership_type);
      $placeholders['!link'] = check_url('http://association.drupal.org/civicrm/contribute/transact?reset=1&id=' . $membership->entity_id);
      $placeholders['@expires'] = format_date(strtotime($membership->end_date), 'custom', 'M jS, Y');
    }

    if ($membership != FALSE && ($membership->status === 'New' || $membership->status === 'Current')) {
      $content['column_2']['membership'] = array(
        '#prefix' => '<div class="clear-block"><div class="grid-1 alpha"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association-' . $placeholders['@membership_type'] . '.png') . '" class="left" alt="' . t('Drupal Association @membership_type member', $placeholders) . '" /></div><div class="grid-3 omega"><p>',
        '#value' => t('@username is an <a href="http://association.drupal.org/membership">@membership_type member</a> of the <a href="http://association.drupal.org/">Drupal Association</a>, which fosters and supports the Drupal software project, the community and its growth.', $placeholders),
        '#suffix' => '</p></div></div>',
      );
    }

    if ($account->uid === $user->uid) {
      if ($membership == FALSE) {
        $membership_personal = t('<a href="http://association.drupal.org/">Drupal Association</a> memberships pay for improvements to Drupal.org. Please consider purchasing a <a href="http://association.drupal.org/membership">membership</a>.');
      }
      else {
        switch ($membership->status) {
          case 'New':
          case 'Current':
          case 'Pending':
            $membership_personal = t('Thank you for being a <a href="http://association.drupal.org/">Drupal Association</a> member. Your support helps to fund improvements to Drupal.org. Your <a href="!link">membership</a> expires on @expires.', $placeholders);
            break;

          case 'Grace':
          case 'Expired':
            $membership_personal = t('Thank you for purchasing a membership. Your support has helped us to improve Drupal.org. Your ongoing support via a <a href="!link">membership</a> would be appreciated.', $placeholders);
            break;

          case 'Deceased':
            $membership_personal = t('Thank you for purchasing a membership. Your support has helped us to improve Drupal.org.', $placeholders);
            break;
        }
      }
      $content['column_2']['membership_personal'] = array(
        '#prefix' => '<p>',
        '#value' => $membership_personal,
        '#suffix' => '</p>',
        '#weight' => 1,
      );
    }

    $content['column_1'] = array_merge($content['column_1'], $account->content);
    $account->content = $content;
  }
}

/**
 * Load a user's CiviCRM memberships from a remote CiviCRM instance.
 *
 * @param $account
 *   A fully-loaded account object representing the user who's membership
 *   details should be returned.
 *
 * @param $reset
 *   Reset the static cache of memberships loaded during this request.
 *
 * @return
 *   An object containing the current membership.
 */
function drupalorg_civimembership_load($account, $reset = FALSE) {
  static $member_cache;
  global $db_url;

  if (!is_array($db_url) || !isset($db_url['association_civicrm'])) {
    return;
  }

  if (!isset($member_cache[$account->uid]) || $reset) {
    if (!$reset && ($cache = cache_get($account->uid, 'cache_drupalorg_civimembership')) && !empty($cache->data)) {
      $member_cache[$account->uid] = $cache->data;
    }
    else {
      // Check if a record exists in CiviCRM for this particular user.
      $remote_drupal_uid = db_result(db_query("SELECT slave_uid FROM {bakery_user} WHERE slave = 'http://association.drupal.org/' AND uid = %d", $account->uid));

      // Get external CiviCRM DB DSN.
      $previous_dsn = db_set_active('association_civicrm');

      $contact_id = db_result(db_query("SELECT contact_id FROM {civicrm_uf_match} WHERE uf_id = %d", $remote_drupal_uid));

      // If a matching contact is found in CiviCRM.
      $membership = FALSE;
      if ($contact_id) {
        $membership = db_fetch_object(db_query_range("SELECT cm.id as membership_id, cm.membership_type_id, cmt.name as membership_type, cm.end_date, cms.name as status, cmb.entity_id FROM {civicrm_membership} cm LEFT JOIN {civicrm_membership_type} cmt ON cm.membership_type_id = cmt.id LEFT JOIN {civicrm_membership_status} cms ON cm.status_id = cms.id LEFT JOIN {civicrm_membership_block} cmb ON cm.membership_type_id = cmb.membership_types WHERE cm.contact_id = %d GROUP BY cm.contact_id, cm.id ORDER BY cm.end_date DESC", $contact_id, 0, 1));
      }

      // Change the DSN back to default Drupal $db_url.
      db_set_active($previous_dsn);

      $member_cache[$account->uid] = $membership;
      cache_set($account->uid, $membership, 'cache_drupalorg_civimembership', time() + (60 * 60 * 24));
    }
  }

  return $member_cache[$account->uid];
}

/**
 * Implementation of hook_flush_caches().
 */
function drupalorg_flush_caches() {
  return array('cache_drupalorg_civimembership');
}
