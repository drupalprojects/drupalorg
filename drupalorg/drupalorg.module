<?php

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * The node ID of the Drupal core project.
 */
define('DRUPALORG_CORE_NID', 3060);

/**
 * Profile field ID for country.
 */
define('DRUPALORG_COUNTRY_PID', 17);

/**
 * Profile field ID for languages.
 */
define('DRUPALORG_LANGUAGES_PID', 48);

/**
 * Major version number for core project listings.
 */
define('DRUPALORG_DOWNLOAD_MAJOR_VERSION', 7); // 7.x

/**
 * TID for API compatibility for project listings.
 */
define('DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID', 103); // 7.x

/**
 * Implements hook_init().
 */
function drupalorg_init() {
  global $user, $conf;

  // Use the dashboard as the home page if the user selected it.
  if ($user->uid !== 0 && !empty($user->data['drupalorg_set_home']) && $_SERVER['REQUEST_URI'] === url('')) {
    drupal_goto('user/' . $user->uid . '/dashboard');
  }

  // Add tracking
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($node->taxonomy_forums) && is_array($node->taxonomy_forums)) {
    foreach ($node->taxonomy_forums as $langcode => $items) {
      foreach ($items as $item) {
        if (isset($forum_ads[$item['tid']])) {
          $forum_id = $item['tid'];
        }
      }
    }
  }

  if (isset($forum_id) && $forum_id) {
    // Tracking
    $term = taxonomy_term_load($forum_id);
    $conf['googleanalytics_codesnippet_before'] .= "_gaq.push(['_setCustomVar', 1, 'Forum', '" . check_plain($term->name) . "', 3]);"; // 3 is page-level
  }

  // Temporary message about the Solr index being rebuilt.
  if (variable_get('drupalorg_warn_search_index_rebuild', FALSE)) {
    if (arg(0) == 'search' || arg(0) == 'download' || arg(0) == 'start' ||
        (arg(0) == 'project' && (arg(1) == 'modules' || arg(1) == 'themes' || arg(1) == 'distributions' || arg(1) == 'theme engines'))) {
      drupal_set_message(t('We are rebuilding the search index for the update to drupal.org. The search results may produce broken or out-of-date results until the index is fully rebuilt. We will remove this message when the indexing is complete. Do not report any search errors at this time.'));
    }
  }
}

/**
 * Implements hook_page_build().
 */
function drupalorg_page_build(&$page) {
  // Add forum ads.
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($node->taxonomy_forums) && is_array($node->taxonomy_forums)) {
    foreach ($node->taxonomy_forums as $langcode => $items) {
      foreach ($items as $item) {
        if (isset($forum_ads[$item['tid']])) {
          $forum_id = $item['tid'];
        }
      }
    }
  }

  if (isset($forum_id) && $forum_id && !empty($forum_ads[$forum_id])) {
    $page['sidebar_second']['google_ad'] = array(
      '#markup' => drupalorg_crosssite_ad_block($forum_ads[$forum_id], FALSE),
    );
  }
}

/**
 * Implements hook_menu().
 */
function drupalorg_menu() {
  // Custom 403 page handler to provide better messages and help.
  $items['drupalorg-403'] = array(
    'title' => 'Access denied',
    'page callback' => 'drupalorg_403_page',
    'access callback' => 1,
    'type' => MENU_CALLBACK,
  );

  $items['start'] = array(
    'title' => 'Get Started with Drupal',
    'page callback' => 'drupalorg_start',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_download'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['project/project_module/categories'] = array(
    'title' => 'Module Categories',
    'page callback' => 'drupalorg_module_categories_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['home'] = array(
    'title' => 'Drupal - Open Source CMS',
    'page callback' => 'drupalorg_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['community'] = array(
    'title' => 'Community & Support',
    'page callback' => 'drupalorg_community',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['getting-involved'] = array(
    'title' => 'Getting Involved',
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_getting_involved'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['drupal-7.0'] = array(
    'title' => t('Drupal 7 - Easier and more powerful than ever'),
    'page callback' => 'drupalorg_d7_announce_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Redirect some legacy paths related to the security listings.
  $items['security-contrib'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib'),
    'type' => MENU_CALLBACK,
  );
  $items['security-contrib/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa/rss.xml'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/drupalorg'] = array(
    'title' => 'Drupal.org settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_settings_form'),
  );
  $items['admin/config/system/drupalorg-ads'] = array(
    'title' => 'Drupal.org ad settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_ad_settings_form'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function drupalorg_menu_alter(&$menu) {
  // As the forum topic is prepopulated based on the forum key in the URL (see
  // drupalorg_form_alter()) accessing the node/add/forum page directly throws
  // an error. As such direct access to this page should be denied access. To
  // access this form, users will need to go to node/add/form/<forum id>
  if (isset($menu['node/add/forum'])) {
    $menu['node/add/forum/%'] = $menu['node/add/forum'];
    $menu['node/add/forum/%']['page arguments'] = array('forum', 3);
    $menu['node/add/forum']['access callback'] = FALSE;
  }
  // Prevent abuse of heavy page callbacks by anonymous users, like spiders.
  if (isset($menu['profile'])) {
    $menu['profile']['access callback'] = 'user_is_logged_in';
    $menu['profile']['access arguments'] = array();
    $menu['profile/autocomplete']['access callback'] = 'user_is_logged_in';
    $menu['profile/autocomplete']['access arguments'] = array();
  }
}

/**
 * Implements hook_field_access().
 *
 * This takes care of several file access tweaks:
 * - Forbids access to upload files on forum, page, and story nodes, except
 *   for people with 'administer nodes' permission.
 * - Forbids node owners from changing an organization's visibility.
 * - Forbids node owners from changing a case study's status.
 */
function drupalorg_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'edit') {
    // We are not interested in anything but edit permissions. Returning TRUE
    // means "we are not interested" (only FALSE return values are significant).
    return TRUE;
  }

  switch ($op) {
    case 'edit':
      switch ($entity_type) {
        case 'node':
          // Handle the case of file uploads on certain node types.
          if ($field['type'] == 'file' && isset($entity->type) && in_array($entity->type, array('forum', 'page', 'story'))) {
            return user_access('administer nodes', $account);
          }

          // Handle the case of the organization/status fields.
          switch ($field['field_name']) {
            case 'field_organization_list_rule':
            case 'field_organization_training_list':
            case 'field_organization_hosting_level':
            case 'field_organization_hosting_last':
            case 'field_organization_hosting_by':
            case 'field_organization_security':
            case 'field_organization_issue':
            case 'field_org_training_issue':
            case 'field_status':
            case 'field_organization_technologies':
              if (isset($entity->uid) && $entity->uid === $account->uid) {
                // People cannot edit their own nodes for these fields.
                return FALSE;
              }
              // For other users' nodes, allow administrators to edit.
              return user_access('administer nodes', $account);

            case 'field_project_has_releases':
              // Always allow admins to configure releases. Otherwise restrict
              // access to maintainers with 'administer releases' permission on
              // the project.
              return (!empty($entity->project['maintainers'][$account->uid]['permissions']['administer releases'])
                || $entity->uid == $account->uid
                || user_access('administer nodes'));

            case 'field_project_has_issue_queue':
              // Always allow admins to configure issue tracking. Otherwise
              // restrict access to maintainers with 'maintain issues'
              // permission on the project.
              return (!empty($entity->project['maintainers'][$account->uid]['permissions']['maintain issues'])
                || $entity->uid == $account->uid
                || user_access('administer nodes'));
          }
      }
  }

  // All other cases: we don't care about this field/operation.
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function drupalorg_block_info() {
  return array(
    'set_home' => array(
      'info' => t('Set user home page'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'drupalorg_activity' => array('info' => t('Drupal.org Activity')),
    'add_to_dashboard' => array(
      'info' => t('Add to Dashboard links'),
      'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
    ),
    'tracker_user' => array(
      'info' => t('Your posts'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'security_issues' => array(
      'info' => t('Your Security Issues'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'marketplace_services' => array(
      'info' => t('Marketplace services menu'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'org_memberships' => array(
      'info' => t('Organization Membership Badges'),
      'weight' => -50,
      'cache' => DRUPAL_CACHE_PER_PAGE,
      'status' => 1,
      'region' => 'right',
      'visibility' => 1,
      'pages' => 'profile/profile_current_company_organization/*',
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_block_view($delta, $block = NULL) {
  switch ($delta) {
    case 'set_home':
      if (user_is_logged_in()) {
        return array('content' => drupal_get_form('drupalorg_set_home'));
      }
      break;

    case 'drupalorg_activity':
      return array(
        'subject' => t('Drupal.org Activity'),
        'content' => drupalorg_activity_block(),
      );

    case 'security_issues':
      return array(
        'subject' => t('Your Security Issues'),
        'content' => '<p id="drupalorg-security-issues-placeholder">' . t('Loading…') . '</p>',
      );

    case 'add_to_dashboard':
      if (user_is_logged_in()) {
        global $user;
        $item = menu_get_item();
        $blocks = array();
        switch ($item['path']) {
          case 'node/%':
            $node = menu_get_object();
            if (project_node_is_project($node)) {
              $blocks[] = array('Issues for ' . $node->title, 'project_issue', 'issue_cockpit', array('nid' => $node->nid));
            }
            elseif ($node->nid === '24572') {
              $blocks[] = array('Documentation Team links', 'menu', 'menu-documentation-t');
            }
            break;

          case 'news':
            $blocks[] = array('Drupal News', 'drupalorg_news', 'drupal-news');
            break;

          case 'aggregator/categories/%':
            // Planet Drupal and Drupal talk only.
            if ($item['page_arguments'][0]['cid'] == 2 || $item['page_arguments'][0]['cid'] == 1) {
              $blocks[] = array($item['page_arguments'][0]['title'], 'aggregator', 'category-' . $item['page_arguments'][0]['cid']);
            }
            break;

          case 'user/%/track':
            if ($item['map'][1]->uid === $user->uid) {
              $blocks[] = array('Your Posts', 'drupalorg', 'tracker_user');
            }
            break;

          case 'project/issues/user':
            $blocks[] = array('Your Issues', 'views', '1764f77afedbacb7539d78cc3f1d414f');
            break;

          case 'getting-involved':
            $blocks[] = array('Contributor Links', 'drupalorg_project', 'bingo-block');
            break;
        }
        if (count($blocks) > 0) {
          $page = homebox_get_page('dashboard');
          $content = '';
          foreach ($blocks as $block) {
            $options = array('attributes' => array('class' => array('add')));
            if (isset($block[3])) {
              $options['query'] = $block[3];
            }
            $content .= homebox_add_link(t('Add @name to dashboard', array('@name' => $block[0])), $page, $block[1], $block[2], $options);
          }
          return array('content' => $content);
        }
      }
      break;

    case 'tracker_user':
      global $user;

      $query = db_select('tracker_user', 't');
      $query->condition('t.uid', $user->uid);

      // This array acts as a placeholder for the data selected later
      // while keeping the correct order.
      $nodes = $query
        ->addTag('node_access')
        ->fields('t', array('nid', 'changed'))
        ->condition('t.published', 1)
        ->orderBy('t.changed', 'DESC')
        ->range(0, empty($block->count) ? 15 : $block->count)
        ->execute()
        ->fetchAllAssoc('nid');

      if (empty($nodes)) {
        $content = '<p>' . t('No content available.') . '</p>';
      }
      else {
        // Now, get the data and put into the placeholder array.
        $result = db_query('SELECT n.nid, n.title, n.type, n.changed, n.uid, u.name, l.comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.nid IN (:nids)', array(':nids' => array_keys($nodes)), array('target' => 'slave'));
        foreach ($result as $node) {
          $node->last_activity = $nodes[$node->nid]->changed;
          $nodes[$node->nid] = $node;
        }

        // Display the data.
        $content = array(
          '#sorted' => TRUE,
          'tracker' => array(
            '#items' => array(),
            '#theme' => 'item_list',
          ),
          'more' => array(
            '#theme' =>'more_link',
            '#url' => 'user/' . $user->uid . '/track',
            '#title' => t('Track posts'),
          ),
        );
        foreach ($nodes as $node) {
          $comments = '';
          if ($node->comment_count) {
            $comments = '<br />' . format_plural($node->comment_count, '1 comment', '@count comments');
            if ($new = comment_num_new($node->nid)) {
              $query = db_select('comment', 'c')
                ->fields('c', array('cid'))
                ->condition('c.nid', $node->nid)
                ->condition('c.created', max(node_last_viewed($node->nid), NODE_NEW_LIMIT), '>')
                ->condition('c.status', COMMENT_PUBLISHED)
                ->orderBy('c.cid')
                ->range(0, 1);
              $uri = entity_uri('comment', comment_load($query->execute()->fetchField()));
              $comments .= ', ' . l(format_plural($new, '1 new', '@count new'), $uri['path'], $uri['options']);
            }
          }
          $content['tracker']['#items'][] = l($node->title, 'node/' . $node->nid) . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . $comments;
        }
      }
      return array(
        'subject' => t('Your Posts'),
        'content' => $content,
      );
      break;

    case 'marketplace_services':
      // Custom block to set the active link. The links are not first class
      // menu items, so menu module does not figure it out. There isn't a
      // great place to alter and other trickery would be too tricky.
      $item = menu_get_item();
      if ($item['href'] === 'drupal-services') {
        $tree = menu_tree_page_data('menu-service-providers');
        $args = $item['page_arguments'];
        $name = array_shift($args);
        $display_id = array_shift($args);
        if ($view = views_get_view($name)) {
          $view->set_arguments($args);
          $view->build($display_id);
          foreach (array_keys($tree) as $key) {
            if ($tree[$key]['link']['href'] === arg(0) . '/' . $view->args[0]) {
              $tree[$key]['link']['in_active_trail'] = TRUE;
            }
          }
        }
        return array('content' => menu_tree_output($tree));
      }
      break;

    case 'org_memberships':
      $org_name = arg(2);
      $block = array('content' => NULL);
      if (drupalorg_has_civimembership($org_name, 'Supporting Partner Premium')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_prem_sp_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Premium Supporting Partner')))));
      }
      elseif (drupalorg_has_civimembership($org_name, 'Supporting Partner')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_sup_partner_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Supporting Partner')))));
      }
      elseif (drupalorg_has_civimembership($org_name, 'Technology Supporter')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Technology Supporter')))));
      }
      elseif (drupalorg_has_civimembership($org_name, 'Premium Technology Supporter')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_prem_tech_sp_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Technology Supporter')))));
      }
      elseif (drupalorg_has_civimembership($org_name, 'Inaugural Technology Supporter')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_inaug_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Inaugural Technology Supporter')))));
      }
      elseif (drupalorg_has_civimembership($org_name, 'Inaugural Premium Technology Supporter')) {
        return array('content' => l('<br /><img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_prem_techsupp_inaug_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Inaugural Premium Technology Supporter')))));
      }
      if (drupalorg_has_civimembership($org_name, 'Organization')) {
        return array('content' => $block['content'] . l('<img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association_org_member_badge.svg" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association Organization Member')))));
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK.
 * Used to set default classes.
 */
function drupalorg_preprocess_block(&$vars) {
  /* Set shortcut variables. Hooray for less typing! */
  $block_id = $vars['block']->module . '-' . $vars['block']->delta;
  $classes = &$vars['classes_array'];
  $title_classes = &$vars['title_attributes_array']['class'];
  switch ($block_id) {

    // Featured/all navigation block on Marketplace Services page.
    case 'drupalorg-marketplace_services':
      $vars['block_html_id'] = 'marketplace-services-quicknav';
      $classes[] = 'marketplace-quicknav';
      break;
  }
}

/**
 * Implementation of hook_homebox_block_keys(). The only configurable block is
 * tracker_user, with a count field.
 */
function drupalorg_homebox_block_keys($block) {
  return array('count');
}

/**
 * Implementation of hook_homebox_block_edit_form(). The only configurable
 * block is tracker_user, with a count field.
 */
function drupalorg_homebox_block_edit_form($block) {
  return array(
    'count' => array(
      '#type' => 'textfield',
      '#title' => t('Number of posts to show'),
      '#default_value' => isset($block->count) ? $block->count : 15,
      '#size' => 5,
      '#required' => TRUE,
      '#element_validate' => array('drupalorg_validate_int'),
    ),
  );
}

/**
 * Validate for a positive integer.
 */
function drupalorg_validate_int($element) {
  if (!preg_match('/^[0-9]+$/', $element['#value']) || (int) $element['#value'] <= 0) {
    form_error($element, t('Number of posts must be a positive integer.'));
  }
}

/**
 * Overall quick stats for drupal.org.
 */
function drupalorg_activity_block() {
  $items = array();
  $stats = drupalorg_get_activity();
  $items[] = t('<strong>@accounts</strong> people with Git accounts', array('@accounts' => $stats['number_of_git_accounts']));
  $items[] = t("<strong>@commits</strong> Git commits this week", array('@commits' => $stats['number_of_git_commits']));
  $items[] = t("<strong>@users</strong> users on drupal.org", array('@users' => $stats['number_of_users']));
  $items[] = t("<strong>@sites</strong> sites running Drupal", array('@sites' => $stats['sites']));
  $items[] = t("<strong>@comments</strong> comments and issue followups", array('@comments' => $stats['comments']));

  $output = theme('item_list', array('items' => $items));
  return $output;
}

/*
 * Returns data on recent activity in the Drupal project.
 *
 * If we do not have data or our data was generated an hour ago,
 * try to generate it again.
 */
function drupalorg_get_activity($_force = FALSE) {
  if (!$_force && ($cache = cache_get('drupalorg_front_counter_data', 'drupalorg'))) {
    $stats = $cache->data;
  }
  elseif (lock_acquire('drupalorg_get_activity', 5)) {
    $stats = array();

    // GIT: retrieve info via API.
    $stats['number_of_git_accounts'] = number_format(drupalorg_git_gateway_get_total_accounts());
    $stats['number_of_git_commits'] = number_format(drupalorg_versioncontrol_get_total_commits(7 * 24 * 60 * 60));

    // Issue comments this week
    $followups = db_query("SELECT COUNT(distinct c.nid) FROM {node} n INNER JOIN {comment} c ON n.nid = c.nid WHERE n.type = :type AND n.status = :status AND c.created > :created", array(':type' => 'project_issue', ':status' => 1, ':created' => strtotime("1 week ago")))->fetchField();
    $stats['number_of_issue_comments'] = number_format($followups);

    // All Modules.
    $modules = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_module' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    // TODO would be nice to limit to D6 & D7
    $stats['number_of_modules'] = number_format($modules);

    // All Themes.
    $themes = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_theme' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    // TODO would be nice to limit to D6 & D7
    $stats['number_of_themes'] = number_format($themes);

    // All Distributions.
    $distributions = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_distribution' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    $stats['number_of_distributions'] = number_format($distributions);

    // Users: Count them.
    $stats['number_of_users'] = number_format(db_query('SELECT COUNT(*) FROM {users} WHERE uid > :uid AND status = :status AND login > :login', array(':uid' => 0, ':status' => 1, ':login' => 0))->fetchField());

    // Country: A single text field, so we can filter it in SQL.
    $stats['number_of_countries'] = number_format(db_query("SELECT COUNT(DISTINCT value) FROM {profile_value} WHERE fid = :fid AND value NOT IN ('', '<not specified>')", array(':fid' => DRUPALORG_COUNTRY_PID))->fetchField());

    // Languages: Get all the distinct combinations and then filter that down.
    $languages = array();
    $result_languages = db_query('SELECT DISTINCT value FROM {profile_value} WHERE fid = :fid', array(':fid' => DRUPALORG_LANGUAGES_PID));
    foreach ($result_languages as $language_profile) {
      $languages = array_merge($languages, explode('; ', $language_profile->value));
    }
    $languages = array_unique($languages);
    $stats['number_of_languages'] = count($languages);

    // Sites: use project API.
    $stats['sites'] = number_format(project_usage_get_project_total_usage(DRUPALORG_CORE_NID));

    // Comments: count comments.
    $stats['comments'] = number_format(db_query("SELECT COUNT(*) FROM {comment} WHERE status = :status", array(':status' => 1))->fetchField());

    // Sites made with Drupal.
    if (module_exists('drupalorg_case_studies')) {
      $stats['sites_made'] = array();
      $view = views_get_view('drupalorg_casestudies');
      if (!empty($view)) {
        $view->preview('block_1');
        // Ensure the derivative gets generated
        $style = 'grid-4';
        foreach ($view->result as $result) {
          $uri = $result->field_field_mainimage[0]['rendered']['#item']['uri'];
          $destination = image_style_path($style, $uri);
          if (!file_exists($destination)) {
            image_style_create_derivative(image_style_load($style), $uri, $destination);
          }
        }
        foreach ($view->style_plugin->rendered_fields as $row) {
          $stats['sites_made'][] = implode('', $row);
        }
      }
    }
    cache_set('drupalorg_front_counter_data', $stats, 'drupalorg');
    lock_release('drupalorg_get_activity');
  }
  else {
    $stats = array();
  }
  return $stats;
}

/**
 * Set home link for Your Dashboard page.
 */
function drupalorg_set_home() {
  global $user;
  return array(
    '#prefix' => '<div id="drupalorg-set-home-wrapper">',
    '#suffix' => '</div>',
    'set_home' => array(
      '#type' => 'radios',
      '#options' => array(
        TRUE => t('Make this your Homepage'),
        FALSE => t('Use Default Homepage'),
      ),
      '#default_value' => isset($user->data['drupalorg_set_home']) ? $user->data['drupalorg_set_home'] : TRUE,
      '#ajax' => array(
        'callback' => 'drupalorg_set_home_callback',
        'wrapper' => 'drupalorg-set-home-wrapper',
      ),
    ),
  );
}

/**
 * AJAX callback for drupalorg_set_home().
 */
function drupalorg_set_home_callback($form, $form_state) {
  global $user;
  user_save($user, array('data' => array('drupalorg_set_home' => $form_state['values']['set_home'])));
  return $form;
}

/**
 * Get rid of jQuery UI theme noise.
 */
function drupalorg_library_alter(&$libraries, $module) {
  if ($module === 'system' && isset($libraries['ui']) && arg(0) !== 'admin') {
    unset($libraries['ui']['css']['misc/ui/jquery.ui.theme.css']);
  }
}

/**
 * Page callback for the frontpage.
 */
function drupalorg_home() {
  drupal_add_library('system', 'ui.tabs');
  drupal_add_js(drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/home.js');
  drupal_set_title(t('Drupal - Open Source CMS'));

  return theme('drupalorg_home');
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$variables) {
  $router = menu_get_item();
  if ($router['path'] == 'drupal-7.0') {
    // Hide the page title on the D7 release announcement
    unset($variables['title']);
  }
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_preprocess_drupalorg_home(&$variables) {
  $variables['things_we_made'] = '';
  $variables['map_content'] = drupalorg_map_content();

  // Get content for the Recent Forum Posts tab.
  $result = db_query_range('SELECT f.nid, f.title, f.created, u.uid, u.name FROM {forum_index} f INNER JOIN {node} n ON n.nid = f.nid INNER JOIN {users} u ON u.uid = n.uid ORDER BY f.nid DESC', 0, 5);
  $recent_forums = '';
  foreach ($result as $node) {
    $recent_forums .= '<h6>' . l($node->title, 'node/' . $node->nid) . '</h6><p class="submitted">' . t('Posted by !author on @created.', array('!author' => theme('username', array('account' => $node)), '@created' => format_date($node->created, 'custom', 'F j, Y \a\t g:ia'))) . '</p>';
  }

  $recent_forums .= '<p>' . l(t('More forums…'), 'forum') . '</p>';
  $variables['tab_content_forums'] = $recent_forums;

  // Retrieve or rebuild stats cache.
  $variables += drupalorg_get_activity();

  // Pick a random site made with Drupal from the cache.
  if (!empty($variables['sites_made'])){
    $variables['things_we_made'] = $variables['sites_made'][array_rand($variables['sites_made'])];
  }

  $variables['psa'] = theme('google_admanager_block', array('id' => variable_get('google_admanager_account', ''), 'ad_slot' => 'Redesign_home'));
}

/**
 * Get HTML for home page map.
 */
function drupalorg_map_content($_force = FALSE) {
  if (!$_force && $cache = cache_get('drupalorg_map_content', 'drupalorg')) {
    $output = $cache->data;
  }
  else {
    $map = array(
      0 => array(
        'type' => 'commit', // For the pin color.
        'message' => variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011'),
        'latitude' => variable_get('drupalcon_latitude', 41.836944),
        'longitude' => variable_get('drupalcon_longitude', -87.684444),
      ),
    );
    $views = array('drupalorg_handbook_map', 'drupalorg_forum_map', 'drupalorg_commit_map');
    foreach ($views as $q => $view) {
      $view = views_get_view($view);
      $view->preview();
      $fields = array(
        'message' => NULL,
        'latitude' => NULL,
        'longitude' => NULL,
      );
      foreach ($view->field as $id => $handler) {
        if (array_key_exists($handler->ui_name(), $fields)) {
          $fields[$handler->ui_name()] = $id;
        }
      }
      foreach ($view->style_plugin->rendered_fields as $n => $row) {
        $map[$n * count($views) + $q + 1]['type'] = $view->get_title();
        foreach ($fields as $field => $id) {
          $map[$n * count($views) + $q + 1][$field] = $row[$id];
        }
      }
    }
    ksort($map);
    $output = '';
    foreach ($map as $row) {
      $output .= theme('drupalorg_map_pin', $row);
    }

    cache_set('drupalorg_map_content', $output, 'drupalorg');
  }

  return $output;
}

/**
 * Generates HTML to plot a map pin.
 */
function drupalorg_preprocess_drupalorg_map_pin(&$variables) {
  $variables['classes_array'][] = 'homepage-pin';
  $variables['classes_array'][] = 'homepage-pin-' . $variables['type'];
  $variables['classes_array'][] = 'homepage-pin-' . ($variables['longitude'] > 0 ? 'east' : 'west');
}

/**
 * Page callback for the getting started page.
 */
function drupalorg_start() {
  return theme('drupalorg_start');
}

/**
 * Implementation of template_preprocess_drupalorg_start().
 */
function drupalorg_preprocess_drupalorg_start(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');

  // Create and cache a solr query for use by block elements.
  $env_id = apachesolr_default_environment();
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'bundle',
    'value' => 'project_module',
  )));
  $query = apachesolr_current_query($env_id);
  $list = drupalorg_order_facet_build('iss_project_release_usage', array('direction' => 'desc'), $query, FALSE);
  $variables['most_popular_modules'] = drupal_render($list);

  project_solr_run_project_query('project/themes', array(array(
    'key' => 'bundle',
    'value' => 'project_theme',
  )));
  $query = apachesolr_current_query($env_id);
  $list = drupalorg_order_facet_build('iss_project_release_usage', array('direction' => 'desc'), $query, FALSE);
  $variables['most_popular_themes'] = drupal_render($list);
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');

  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'bundle',
    'value' => 'project_module',
  )));

  // Since we control what facets we're building, we can just utilize the
  // delta as the unique key for the sake of brevity (both here and in the
  // $variables array).
  $facets = array(
    'iss_project_release_usage' => 'drupalorg_order_facet',
    'ds_created' => 'drupalorg_order_facet',
  );
  // Render and save the facet blocks.
  foreach ($facets as $delta => $module) {
    $block = drupalorg_block_render($module, $delta);
    $variables[$delta] = drupal_render($block);
  }

  $form = drupal_get_form('project_solr_version_form', 'download', t('Show only modules for Drupal version'));
  $variables['version_form'] = drupal_render($form);

  // Rendering the block directly from views doesn't work nicely here, since
  // the resulting markup is harder to use with bluecheese. Plus, we're doing
  // some magic to ensure that the version filter impacts this block as well.
  // So, we just load the view object, do some magic, run the view, fetch the
  // results and render those ourselves. This also lets us add our 'View full
  // index' link directly as another li in the list (as bluecheese expects)
  // instead of having it in its own div.
  $view = views_get_view('project_index');
  $view->set_display('block_1');
  $view->set_arguments(array('project_module'));
  // See if the version filter was used, and if so, have it impact the view.
  if (!empty($_GET['f'])) {
    foreach ($_GET['f'] as $f) {
      if (preg_match('/drupal_core:(\d+)/', $f, $matches)) {
        $core_version = $matches[1];

        $filters = $view->display_handler->get_option('filters');
        $filters['project_release_api_vocabulary']['value'] = array($core_version);
        $view->display_handler->set_option('filters', $filters);
      }
    }
  }
  $view->pre_execute();
  $view->execute();
  $results = $view->result;
  foreach ($results as $result) {
    $modules[] = l($result->node_title, 'node/' . $result->nid);
  }
  $modules[] = '<a href="/project/project_module/index" class="all">View full index</a>';
  $module_index = '<h2>' . t('Module Index') . '</h2>';
  $module_index .= theme('item_list', array('items' => $modules, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => array('flat'))));
  $variables['module_index'] = $module_index;
}

/**
 * Page callback for browsing modules by category.
 */
function drupalorg_module_categories_page() {
  module_load_include('inc', 'project_solr', 'project_solr.pages');
  return project_solr_category_page('project_module', taxonomy_vocabulary_load(3));
}

/**
 * Page callback for the community page.
 */
function drupalorg_community() {
  return theme('drupalorg_community');
}

/**
 * Implementation of template_preprocess_drupalorg_community().
 */
function drupalorg_preprocess_drupalorg_community(&$variables) {
  // "How can we help you?" form at the top of /community.
  $variables['help_form'] = '';
  if (module_exists('drupalorg_search')) {
    $form = drupal_get_form('drupalorg_search_help_form');
    $variables['help_form'] = drupal_render($form);
  }
  // "Recent activity" list at the side of /community.
  $query = db_select('tracker_node', 't');
  $query->innerJoin('node', 'n', 'n.nid = t.nid');
  $recent = $query
    ->addTag('node_access')
    ->fields('t', array('nid', 'changed'))
    ->fields('n', array('title'))
    ->condition('t.published', 1)
    ->orderBy('t.changed', 'DESC')
    ->range(0,10)
    ->execute();
  $variables['recent_activity'] = theme('drupalorg_recent_activity', array('nodes' => $recent));
}

/**
 * Implementation of template_preprocess_drupalorg_getting_involved().
 */
function drupalorg_preprocess_drupalorg_getting_involved(&$variables) {
  // First, build and render a teaser of the old docs node.
  $docs_node = node_load(281873);
  node_build_content($docs_node, 'teaser');
  // Get rid of links and taxonomy properties so we don't render them.
  hide($docs_node->content['links']);
  foreach (element_children($docs_node->content) as $key) {
    if (strpos($key, 'taxonomy_vocabulary_') === 0) {
      hide($docs_node->content[$key]);
    }
  }
  $variables['docs_node'] = drupal_render($docs_node->content);
  $variables['docs_more'] = l(t('Getting Involved Guide'), 'node/281873');

  // Then, show the view for community spotlight.
  $view = views_get_view('drupalorg_community_spotlight');
  $variables['spotlight_title'] = t($view->display['default']->display_options['title']);
  $variables['spotlight'] = $view->preview('block_1');
}

/**
 * Page callback: Calls theme function to generate D7 announcement page.
 */
function drupalorg_d7_announce_page($language = 'en') {
  return theme('drupalorg_d7_announcement', array('language' => $language));
}

/**
 * Implementation of template_preprocess_drupalorg_d7_announcement().
 */
function drupalorg_preprocess_drupalorg_d7_announcement(&$variables) {
  global $conf;
  $languages = array(
    'ca' => 'Catalan',
    'zh-hans' => 'Chinese (simplified)',
    'zh-hant' => 'Chinese (traditional)',
    'hr' => 'Croatian',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'fi' => 'Finnish',
    'fr' => 'French',
    'de' => 'German',
    'el' => 'Greek',
    'he' => 'Hebrew',
    'hi' => 'Hindi',
    'hu' => 'Hungarian',
    'id' => 'Indonesian',
    'it' => 'Italian',
    'ko' => 'Korean',
    'lt' => 'Lithuanian',
    'nb' => 'Norwegian (Bokmål)',
    'pt' => 'Portuguese (Portugal)',
    'pt-br' => 'Portuguese (Brazil)',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sr' => 'Serbian',
    'sl' => 'Slovene',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'th' => 'Thai',
    'uk' => 'Ukrainian',
    'vi' => 'Vietnamese',
  );

  // Valid language?
  if (isset($languages[$variables['language']])) {
    include DRUPAL_ROOT . '/' . drupal_get_path('module', 'drupalorg') . '/translations/drupalorg-d7-announcement.' . $variables['language'] . '.php';
    $conf['locale_custom_strings_' . $variables['language']][''] = $strings;
    drupal_set_title(t(drupal_get_title(), array(), array('langcode' => $variables['language'])));
  }
  else {
    $variables['language'] = 'en';
  }
  if ($variables['language'] === 'he') {
    $variables['rtl'] = TRUE;
  }

  $variables['language_list'] = array();
  unset($languages[$variables['language']]);
  foreach ($languages as $code => $name) {
    if ($code === 'en') {
      $variables['language_list'][] = l($name, 'drupal-7.0');
    }
    else {
      $variables['language_list'][] = l($name, 'drupal-7.0/' . $code);
    }
  }
  $variables['language_list'] = implode(', ', $variables['language_list']);

  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/jquery.cycle.all.min.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/d7-announcement.js');
  drupal_add_css(drupal_get_path('module', 'drupalorg') . '/drupalorg-d7-announcement.css', array('type' => 'file', 'weight' => CSS_THEME));
}

/**
 * Theme function for the presentation of results on /community in the
 * "Recent Activity" section.
 *
 * @param $nodes array
 *  An array of node objects with title, changed, nid, and last_activity fields.
 */
function theme_drupalorg_recent_activity($variables) {
  $nodes = $variables['nodes'];
  if (!empty($nodes)) {
    // Display the data.
    $rows = array();
    foreach ($nodes as $node) {
      $rows[] =
        '<h6>' . l($node->title, "node/$node->nid") . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . '</h6>' .
        '<p class="submitted">' . t('Last activity: ') . t('!time', array('!time' => format_date($node->changed, 'custom', 'F d, Y'))) . '</p>';
    }
  }
  else {
    $rows[] = t('No posts available.');
  }
  $output = '<div id="recent-activity">';
  $output .= theme('item_list', array('items' => $rows));
  $output .= l(t('More recent activity…'), 'tracker');
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_start' => array(
      'template' => 'drupalorg-start',
    ),
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_home' => array(
      'template' => 'drupalorg-home',
    ),
    'drupalorg_community' => array(
      'template' => 'drupalorg-community',
    ),
    'drupalorg_getting_involved' => array(
      'template' => 'drupalorg-getting-involved',
    ),
    'drupalorg_recent_activity' => array(
      'variables' => array('nodes' => array()),
    ),
    'drupalorg_d7_announcement' => array(
      'variables' => array(
        'language' => 'en',
      ),
      'template' => 'drupalorg-d7-announcement',
    ),
    'drupalorg_map_pin' => array(
      'variables' => array(
        'latitude' => NULL,
        'longitude' => NULL,
        'message' => '',
        'type' => 'default',
      ),
      'template' => 'drupalorg-map-pin',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // Force a revision log entry when editing existing book nodes.
  if ($form_id == 'book_node_form' && isset($form['revision_information']['log']) && arg(1) != 'add') {
    $form['revision_information']['log']['#required'] = TRUE;
    $form['revision_information']['#collapsed'] = FALSE;
    $form['revision_information']['#weight'] = 50;
  }

  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register_form') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }

  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }

  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }

  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }

  // Add extra choices to the dblog settings selector
  if ($form_id == 'dblog_admin_settings') {
    $form['dblog_row_limit']['#options'] = drupal_map_assoc(array(100, 1000, 10000, 100000, 250000, 500000, 1000000));
  }

  // Ensure that duplicate case-insensitive usernames are not created.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['#validate'][] = 'drupalorg_username_validate';
  }

  // Hide the taxonomy_field_extras field on forum node forms
  if ($form_id == 'forum_node_form') {
    if (!user_access('administer content')) {
      $form['taxonomyextra']['#access'] = FALSE;
    }
    // If the node is being newly created, we want to set the value of the
    // forum to not be editable, as users will be creating the forum topic from
    // within the forum to which it is to be posted. However, we want to allow
    // users to move threads after they have been created.
    if (empty($form_state['node']->nid)) {
      $form['taxonomy_forums'][LANGUAGE_NONE]['#type'] = 'value';
      $form['taxonomy_forums']['#suffix'] = '<p>' . t('Forum: %forum', array('%forum' => preg_replace('/^[- ]*/', '', $form['taxonomy_forums'][LANGUAGE_NONE]['#options'][$form['taxonomy_forums'][LANGUAGE_NONE]['#default_value']]))) . '</p>';
    }
  }
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_comment_form_alter(&$form, &$form_state) {
  // Increase default comment textarea height
  if (!empty($form['comment_body'][LANGUAGE_NONE][0])) {
    $form['comment_body'][LANGUAGE_NONE][0]['#rows'] = 15;
  }
}

/**
 * Disable aggregator feed blocks, there are so many that they overwhelm the
 * block admin UI.
 */
function drupalorg_form_aggregator_form_feed_alter(&$form) {
  $form['block']['#default_value'] = 0;
}

/**
 * Node form alter.
 */
function drupalorg_form_node_form_alter(&$form) {
  // Put log message at the top to encourage use of log messages.
  if (isset($form['revision_information'])) {
    $form['revision_information']['#weight'] = -100;

    // Hide revision fields on node add form.
    // @TODO Should be removed in D8 #308820.
    if (!isset($form['#node']->nid)) {
      $form['revision_information']['#access'] = FALSE;
    }
  }
  if (isset($form['nodechanges_comment_body'])) {
    $form['nodechanges_comment_body']['#rows'] = 15;
  }
}

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER(:tomatch)", array(':tomatch' => $match[1] . '+%%@' . $match[3]))->fetchField() > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = :type AND status = :status", array(':type' => 'homepage', ':status' => 0));
    $masks = array();
    foreach ($result as $mask) {
      // Build masks array for preg_matching.
      $masks[] = '@' . strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) . '@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
  }
}

/**
 * Perform a case-insensitive check on usernames to prevent duplicates.
 *
 * @see user_account_form()
 * @see user_account_form_validate()
 * @see http://drupal.org/node/1034852
 */
function drupalorg_username_validate($form, &$form_state) {
  // Do not attempt to validate secondary profile forms
  if (!isset($form_state['values']['name'])) {
    return;
  }
  $account = $form['#user'];
  $name = $form_state['values']['name'];
  $existing_name = $account->uid > 0 ? $account->name : FALSE;
  // Only check if there isn't an existing error, to prevent confusion.
  if (!empty($name) && ($existing_name !== $name) && !form_get_error($form['account']['name'])) {
    // Check for duplicate usernames. This is taken from
    // user_account_form_validate(), but converts names to lowercase first.
    if ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->where('LOWER(name) LIKE :name', array(':name' => db_like(strtolower($name))))->range(0, 1)->execute()->fetchField()) {
      form_set_error('name', t('The name %name is already taken.', array('%name' => $name)));
    }
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

/**
 * Implements hook_search_info().
 *
 * Defines an IRC nickname search.
 */
function drupalorg_search_info() {
  return array(
    'title' => t('IRC nicks'),
  );
}

/**
 * Implements hook_search_access().
 *
 * Limits access to people who can access user profiles for the IRC nickname
 * search.
 */
function drupalorg_search_access() {
  return user_access('access user profiles');
}

/**
 * Implements hook_search_execute().
 *
 * Performs the search for IRC nicknames.
 */
function drupalorg_search_execute($keys = NULL, $conditions = NULL) {
  // Replace wildcards with MySQL/PostgreSQL wildcards.
  $keys = '%' . preg_replace('!\*+!', '%', $keys) . '%';
  $query = db_select('profile_value', 'pv');
  $query->innerJoin('users', 'u', 'pv.uid = u.uid');
  $query = $query->extend('PagerDefault');
  $query
    ->limit(15)
    ->fields('u', array('name', 'uid'))
    ->condition('pv.fid', 35)
    ->where('LOWER(pv.value) LIKE LOWER(:keys)', array(':keys' => $keys));
  $result = $query->execute();

  $find = array();
  foreach ($result as $account) {
    $find[] = array(
      'title' => $account->name,
      'link' => url('user/' . $account->uid),
    );
  }
  return $find;
}

/**
 * Implements hook_views_api().
 */
function drupalorg_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'drupalorg'),
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function drupalorg_views_default_views_alter(&$views) {
  $path = drupal_get_path('module', 'drupalorg');
  require_once DRUPAL_ROOT . '/' . "$path/drupalorg.views_default.inc";
  _drupalorg_views_default_views_alter($views);
}

/**
 * Returns a link to the latest recommended release for the Drupal project.
 *
 * @param $text
 *   Text to be used for the button in addition to the version string
 *
 * @return
 *   HTML string with link to the release node.
 */
function drupalorg_download_drupal_link_button($text) {
  $release = project_release_get_current_recommended(DRUPALORG_CORE_NID, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID, DRUPALORG_DOWNLOAD_MAJOR_VERSION, 'recommended');
  // Assumes a drupal-$version alias exists for the given Drupal version, which
  // has been the tradition. Just keep that tradition, and this works wonders.
  return l('<span>' . check_plain($text . ' ' . $release->field_release_version[$release->language][0]['safe_value']) . '</span>', 'project/drupal', array('html' => TRUE, 'attributes' => array('class' => array('link-button'))));
}

/**
 * Default dashboard content.
 */
function drupalorg_homebox() {
  return array(
    'dashboard' => array(
      'title' => '@user',
      'path' => 'dashboard',
      'menu' => 0,
      'enabled' => 1,
      'auto_save' => 1,
      'regions' => 3,
      'cache' => 1,
      'full' => 0,
      'custom' => 0,
      'roles' => array(
        0 => 'authenticated user',
      ),
      'color' => 0,
      'colors' => array(
        0 => '#e4f0f8',
        1 => '#c4d5b4',
        2 => '#ecc189',
        3 => '#ec8989',
        4 => '#6b6b70',
        5 => '#4b97e5',
      ),
      'widths' => array(1 => 0, 2 => 0, 3 => 0),
      'blocks' => array(
        // Column 1
        'drupalorg_news_drupal-news' => array(
          'module' => 'drupalorg_news',
          'delta' => 'drupal-news',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -33,
        ),
        'aggregator_category-1' => array(
          'module' => 'aggregator',
          'delta' => 'category-1',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Drupal talk',
          'weight' => -31,
        ),
        'aggregator_category-2' => array(
          'module' => 'aggregator',
          'delta' => 'category-2',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Planet Drupal',
          'weight' => -31,
        ),
        // Column 2
        'drupalorg_tracker_user' => array(
          'module' => 'drupalorg',
          'delta' => 'tracker_user',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Posts',
          'weight' => 1,
        ),
        'views_1764f77afedbacb7539d78cc3f1d414f' => array(
          'module' => 'views',
          'delta' => '1764f77afedbacb7539d78cc3f1d414f',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Issues',
          'weight' => 2,
        ),
        // Column 3
        'project_issue_issue_cockpit' => array(
          'module' => 'project_issue',
          'delta' => 'issue_cockpit',
          'nid' => DRUPALORG_CORE_NID,
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -32,
        ),
        'drupalorg_project_bingo-block' => array(
          'module' => 'drupalorg_project',
          'delta' => 'bingo-block',
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
        // Available for enabling
        'menu_menu-documentation-t' => array(
          'module' => 'menu',
          'delta' => 'menu-documentation-t',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Documentation Team links',
          'weight' => -7,
        ),
        'drupalorg_security_issues' => array(
          'module' => 'drupalorg',
          'delta' => 'security_issues',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Security Issues',
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Render the HTML for a given block.
 *
 * This function takes a module and a delta, loads the block info from the DB,
 * invokes the function to compute the block content, and then renders the
 * block to HTML via theme('block'). This is basically a heavily pared back
 * implementation of block_list() for a single block.
 *
 * @param string $module
 *   The module that defines the block we're rendering.
 *
 * @param string $delta
 *   The delta of the block that we're rendering.
 *
 * @return
 *   The rendered HTML for the given block.
 *
 * @see block_list()
 * @see theme_block()
 */
function drupalorg_block_render($module, $delta) {
  // Load the title, since that can be modified administratively.
  global $theme;
  $title = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme", array(':module' => $module, ':delta' => $delta, ':theme' => $theme))->fetchField();

  $block = module_invoke($module, 'block_view', $delta);
  // Make sure our block gave us any output at all.
  if (empty($block) || !is_array($block)) {
    return '';
  }
  $block = (object) $block;

  // Set the module and delta so that the blocks contain
  // at least the minimum of expected information.
  $block->module = $module;
  $block->delta = $delta;
  $block->region = 'drupalorg';

  if (isset($block->content) && $block->content) {
    // Override default block title if a custom display title is present.
    if ($title) {
      // Check plain admin-generated titles, but not titles set in code.
      $block->subject = $title == '<none>' ? '' : check_plain($title);
    }
    if (!isset($block->subject)) {
      $block->subject = '';
    }
  }
  $return = $block->content;
  unset($block->content);
  $return['#block'] = $block;
  $return['#theme_wrappers'][] = 'block';
  return $return;
}

/**
 * Form constructor for the Drupalorg custom settings form.
 */
function drupalorg_settings_form($form, &$form_state) {
  $form = array();

  $form['featured'] = array(
    '#type' => 'fieldset',
    '#title' => t('Featured projects'),
  );
  $form['featured']['drupalorg_featured_translations'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured translations'),
    '#default_value' => variable_get('drupalorg_featured_translations', ''),
    '#rows' => 5,
  );
  $form['drupalcon'] = array(
    '#type' => 'fieldset',
    '#title' => t('DrupalCon'),
  );
  $form['drupalcon']['drupalcon_latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon latitude'),
    '#default_value' => variable_get('drupalcon_latitude', 41.836944),
  );
  $form['drupalcon']['drupalcon_longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon longitude'),
    '#default_value' => variable_get('drupalcon_longitude', -87.684444),
  );
  $form['drupalcon']['drupalcon_message'] = array(
    '#type' => 'textarea',
    '#title' => t('DrupalCon map bubble'),
    '#default_value' => variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011'),
  );

  return system_settings_form($form);
}

function drupalorg_ad_settings_form() {
  $form = array();

  $slots = array_merge(array(0 => t('No ad')), _google_admanager_get_ad_slots());
  $ads = variable_get('drupalorg_forum_ad', array());
  $form['drupalorg_forum_ad'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forum ads'),
    '#description' => t('Configure available <a href="!url">ad units</a>', array('!url' => url('admin/config/system/google_admanager'))),
    '#tree' => TRUE,
  );
  foreach (taxonomy_get_tree(1) as $term) {
    $form['drupalorg_forum_ad'][$term->tid] = array(
      '#type' => 'select',
      '#title' => check_plain($term->name),
      '#options' => $slots,
      '#default_value' => isset($ads[$term->tid]) ? $ads[$term->tid] : 0,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_node_view().
 */
function drupalorg_node_view($node, $view_mode = 'full') {
  // Handle Marketplace nodes taxonomy.
  if ($node->type === 'organization') {
    // Group terms by vocabulary and link to marketplace browsing pages.
    $info=array();
    $default_args = array();

    foreach (field_info_instances('node', $node->type) as $instance) {
      $field = field_info_field($instance['field_name']);

      // We only want to limit term fields entries.
      if ($field['module'] === 'taxonomy' && count($node->{$field['field_name']}) > 0) {

        // Get the first term of each field to load its vocabulary.
        $items = field_get_items('node', $node, $field['field_name']);

        if (empty($items)) {
          continue;
        }

        $first_term = current($items);
        $vocabulary = taxonomy_vocabulary_load($first_term['taxonomy_term']->vid);

        $links = array();
        foreach ($items as $item) {
          $term = $item['taxonomy_term'];

          // Link to the drupalorg_organizations view, featured/all listing.
          $org_list = current(field_get_items('node', $node, 'field_organization_list_rule'));

          $links[] = drupalorg_generate_marketplace_link($term, $org_list['value']);
        }

        // On teaser views, we want to limit the terms that are displayed.
        if ($view_mode == 'teaser' && ($count = count($links)) > 3) {
          shuffle($links);
          $links = array_slice($links, 0, 2);
          $links[] = t('and @count more', array('@count' => $count - 2));
        }

        $info[check_plain($vocabulary->name)] = implode(', ', $links);
      }
    }

      if ($view_mode == 'teaser') { // Teaser
        $content = array(
          'intro' => array(
            '#prefix' => '<div class="intro">',
            '#suffix' => '</div>',
            '#sorted' => TRUE,
          ),
          'main' => array(
            '#prefix' => '<div class="main">',
            '#suffix' => '</div>',
            '#sorted' => TRUE,
            '#weight' => 1,
          ),
        );

        // Logo
        $field_items = field_get_items('node', $node, 'field_logo');
        if (!empty($field_items)) {
          $content['intro']['logo'] = field_view_value('node', $node, 'field_logo', $field_items[0]);
          $content['intro']['logo']['#image_style'] = 'grid-3';
        }

        // Body
        $content['main']['body'] = array('#markup' => check_markup(text_summary($node->body[$node->language][0]['value'], $node->body[$node->language][0]['format'], 200), $node->body[$node->language][0]['format']));
        $content['main']['meta'] = array(
          '#prefix' => '<small>',
          '#suffix' => '</small>',
          '#sorted' => TRUE,
        );
        $field_items = field_get_items('node', $node, 'field_link');
        $content['main']['meta']['website'] = field_view_value('node', $node, 'field_link', $field_items[0]);
        $content['main']['meta']['website']['#prefix'] = '<div>' . t('Website: ');
        $content['main']['meta']['website']['#suffix'] = '</div>';

        // Taxonomy
        foreach ($info as $label => $value) {
          $content['main']['meta'][$label] = array('#markup' => '<div class="terms">' . $label . ': ' . $value . '</div> ');
        }

        $node->content = $content;
      }

    if ($view_mode == 'full') { //Full page
      global $user;

      $content = array(
        'intro' => array(
          '#prefix' => '<div class="intro">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
        ),
        'main' => array(
          '#prefix' => '<div class="main">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
          '#weight' => 1,
        ),
        'aside' => array(
          '#prefix' => '<div class="aside">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
          '#weight' => 2,
        ),
      );

      // Organisation logo.
      $field_items = field_get_items('node', $node, 'field_logo');
      if (!empty($field_items)) {
        $content['intro']['logo'] = field_view_value('node', $node, 'field_logo', $field_items[0]);
        $content['intro']['logo']['#image_style'] = 'grid-3';
      }

      // Organisation website.
      $field_items = field_get_items('node', $node, 'field_link');
      $content['intro']['link'] = field_view_value('node', $node, 'field_link', $field_items[0]);

      $info = array();

      // Terms - sector, service, budget
      $org_list = current(field_get_items('node', $node, 'field_organization_list_rule'));
      foreach (field_info_instances('node', $node->type) as $instance) {
        $links = array();
        $field = field_info_field($instance['field_name']);
        if ($field['module'] === 'taxonomy') {
          if ($field_items = field_get_items('node', $node, $instance['field_name'])) {
            foreach ($field_items as $tid => $term) {
              $links[] = drupalorg_generate_marketplace_link($term['taxonomy_term'], $org_list['value']);
            }
            $info[$instance['label']] = implode(', ', $links);
          }
        }
      }

      // Headquarters.
      if ($field_items = field_get_items('node', $node, 'field_organization_headquarters')) {
        $info[t('Headquarters')] = field_view_value('node', $node, 'field_organization_headquarters', $field_items[0]);
      }
      // Budget may be replaced by taxonomy, see #371966
      if ($field_items = field_get_items('node', $node, 'field_budget')) {
        $info[t('Usual project budget')] = field_view_value('node', $node, 'field_budget', $field_items[0]);
      }

      // Security review results
      if ($field_items = field_get_items('node', $node, 'field_organization_security')) {
        $info[t('Security review')] = field_view_value('node', $node, 'field_organization_security', $field_items[0]);
      }

      $content['intro']['info'] = array(
        '#prefix' => '<dl>',
        '#suffix' => '</dl>',
        '#sorted' => TRUE,
      );
      foreach ($info as $label => $data) {
        $content['intro']['info'][] = array(
          '#markup' => '<dt>' . $label . '</dt><dd>' . render($data) . '</dd>',
        );
      }

      // Association membership
      if (drupalorg_has_civimembership($node->title, 'Supporting Partner Premium')) {
        $content['intro']['association_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_sp_badge.svg',
              'alt' => t('Drupal Association Premium Supporting Partner badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Supporting Partner'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Supporting Partner')) {
        $content['intro']['association_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_sup_partner_badge.svg',
              'alt' => t('Drupal Association Supporting Partner badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Supporting Partner'),
            ),
          ))
        );
      }
      // Technology Supporter
      if (drupalorg_has_civimembership($node->title, 'Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_badge.svg',
              'alt' => t('Drupal Association Technology Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Premium Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_tech_sp_badge.svg',
              'alt' => t('Drupal Association Premium Technology Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Inaugural Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_inaug_badge.svg',
              'alt' => t('Drupal Association Inaugural Technology Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Inaugural Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Inaugural Premium Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_techsupp_inaug_badge.svg',
              'alt' => t('Drupal Association Inaugural Premium Technology Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Inaugural Premium Technology Supporter'),
            ),
          ))
        );
      }
      /* We do not have badges yet.
      if (drupalorg_has_civimembership($node->title, 'Hosting Supporter')) {
        $content['intro']['association_hosting_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_host_badge.svg',
              'alt' => t('Drupal Association Hosting Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Hosting Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Premium Hosting Supporter')) {
        $content['intro']['association_hosting_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_host_badge.svg',
              'alt' => t('Drupal Association Premium Hosting Supporter badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Hosting Supporter'),
            ),
          ))
        );
      }
      */

      if (drupalorg_has_civimembership($node->title, 'Organization')) {
        $content['intro']['association_membership'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_org_member_badge.svg',
              'alt' => t('Drupal Association Organization Member badge'),
            )), 'https://association.drupal.org/membership', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Organization Member'),
            ),
          ))
        );
      }

      $content['main']['body'] = $node->content['body'];
      $content['main']['contributions_heading'] = array('#markup' => '<h3>' . t('Drupal contributions') . '</h3>');
      if (isset($node->content['field_contributions'])) {
        $content['main']['contributions'] = $node->content['field_contributions'];
      }

      // Training fields
      if (!empty($node->field_organization_training_desc[$node->language][0]['value'])) {
        $content['main']['training_heading'] = array('#markup' => '<h3>' . t('Training') . '</h3>');
        $content['main']['training_url'] = $node->content['field_organization_training_url'];
        $content['main']['training_desc'] = $node->content['field_organization_training_desc'];
      }

      // People
      $content['aside']['map'] = array(
        '#prefix' => '<div id="organization-map">',
        '#markup' => '',
        '#suffix' => '</div>',
      );
      $result = db_query("SELECT pv.uid, u.name, u.created, pv_title.value title, hug.field_user_geolocation_lat, hug.field_user_geolocation_lng FROM {profile_value} pv INNER JOIN {users} u ON u.uid = pv.uid AND u.status = 1 LEFT JOIN {profile_value} pv_title ON pv_title.uid = u.uid AND pv_title.fid = 8 LEFT JOIN {field_data_field_user_geolocation} hug ON hug.entity_id = u.uid WHERE pv.value = :company AND pv.fid = :field_id", array(':company' => $node->title, ':field_id' => '72'));
      foreach ($result as $account) {
        // Name & title
        $content['aside'][$account->uid . 'name'] = array(
          '#prefix' => '<h3>',
          '#markup' => theme('username', array('account' => $account)),
          '#suffix' => '</h3>',
          '#attached' => array(
            'js' => array(
              drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.js',
            ),
          ),
        );
        if (!empty($account->title)) {
          $content['aside'][$account->uid . 'name']['#markup'] .= ', ' . check_plain($account->title);
        }

        // Quick info
        $content['aside'][$account->uid . 'info'] = array(
          '#prefix' => '<p>',
          '#markup' => t('On Drupal.org for @for', array('@for' => format_interval(REQUEST_TIME - $account->created))),
          '#suffix' => '</p>',
        );

        if ($drupalorg_documentation = drupalorg_documentation_contributions($account)) {
          $content['aside'][$account->uid . 'info']['#markup'] .= '<br />' . $drupalorg_documentation . t(' to documentation');
        }

        $projects = array();
        // @see versioncontrol_project_user() for the following query.
        $result_projects = db_query("SELECT DISTINCT(vcp.nid), n.title, COUNT(o.vc_op_id) AS commits FROM {versioncontrol_operations} o INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = o.repo_id INNER JOIN {node} n ON n.status = 1 AND n.nid = vcp.nid INNER JOIN {project_projects} pp ON n.nid = pp.nid WHERE o.author_uid = :author_uid AND pp.sandbox = :sandbox GROUP BY vcp.nid, n.title ORDER BY commits DESC", array(':author_uid' => $account->uid, ':sandbox' => 0));
        foreach ($result_projects as $project) {
          $projects[] = l($project->title, 'node/' . $project->nid);
        }
        $project_count = count($projects);
        // If more than 3, show the first 3 and a count of the rest.
        if ($project_count > 3) {
          $content['aside'][$account->uid . 'info']['#markup'] .= '<br />' . t('Contributor to !projects, and <a href="!more">@count more</a>', array('!projects' => implode(', ', array_slice($projects, 0, 3)), '@count' => count($projects) - 3, '!more' => url('user/' . $account->uid)));
        }
        // If between 1 and 3, just show them all.
        elseif ($project_count > 0) {
          $content['aside'][$account->uid . 'info']['#markup'] .= '<br />' . t('Contributor to !projects', array('!projects' => implode(', ', $projects)));
        }

        // Map
        if (!empty($account->field_user_geolocation_lat) && !empty($account->field_user_geolocation_lng)) {
          $content['aside']['map']['#markup'] .= theme('drupalorg_map_pin', array('latitude' => $account->field_user_geolocation_lat, 'longitude' => $account->field_user_geolocation_lng));
        }
      }

      $node->content = $content;

      // Highlight a Service provider above the organization page.
      switch ($node->field_organization_list_rule[$node->language][0]['value']) {
        case 'all-providers':
          drupal_set_message(t('This organization is a <a href="!listing">Drupal services provider</a>.', array('!listing' => url('drupal-services/all'))), 'status');
          break;

        case 'featured':
          drupal_set_message(t('This organization is a <a href="!listing">Featured services provider</a>.', array('!listing' => url('drupal-services'))), 'status');
          break;
      }

      // Highlight a Training provider above the organization page.
      if (!empty($node->field_organization_training_list[$node->language][0]['value']) && $node->field_organization_training_list[$node->language][0]['value'] == 'on') {
        drupal_set_message(t('This organization is a <a href="!listing">Drupal training provider</a>.', array('!listing' => url('training'))), 'status');
      }

      // For organizations that request a services listing or training
      // listing, show a link to their issue for the node owner and admins.
       if (($node->uid === $user->uid || user_access('administer nodes'))) {
         if (($node->field_org_marketplace_request[$node->language][0]['value'] == '1') && !empty($node->field_organization_issue[$node->language][0]['nid'])) {
           drupal_set_message(t('Regarding <em>Services listing</em> communicate with webmasters using <a href="!issue">this issue</a>.', array('!issue' => url('node/' . $node->field_organization_issue[$node->language][0]['nid']))), 'status');
         }
         if (!empty($node->field_org_training_request) && ($node->field_org_training_request[$node->language][0]['value'] == '1') && !empty($node->field_org_training_issue[$node->language][0]['nid'])) {
           drupal_set_message(t('Regarding <em>Training listing</em> communicate with webmasters using <a href="!issue">this issue</a>.', array('!issue' => url('node/' . $node->field_org_training_issue[$node->language][0]['nid']))), 'status');
         }
       }
    }
  }
  elseif ($node->type === 'casestudy') {
    $breadcrumb = array(
      l(t('Home'), ''),
      l(t('Case Studies'), 'case-studies'),
    );
    $status = field_get_items('node', $node, 'field_status');
    if ($status[0]['value'] === 'Featured') {
      $breadcrumb[] = l(t('Featured showcase'), 'case-studies/featured');
    }
    elseif ($status[0]['value'] === 'Community') {
      $breadcrumb[] = l(t('Community showcase'), 'case-studies/community');
    }
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Generate an URL for the marketplace term.
 *
 * @param $term
 *   A taxonomy term object.
 * @param $listing
 *   'featured' or 'all', defaults to 'featured'.
 *
 * @return
 *   String, a l() link.
 */
function drupalorg_generate_marketplace_link($term, $listing = 'featured') {
  $vocabulary = taxonomy_vocabulary_load($term->vid);

  // Set the default to 'all', we need this for the URL creation later on.
  $default_args = array(
    'Services' => 'all',
    'Sectors' => 'all',
    'Locations' => 'all',
  );

  $term_arg = array($vocabulary->name => str_replace(' ', '-', $term->name));

  // The Marketplace URL starts with 'drupal-services'.
  $link = 'drupal-services';

  // Link to the drupalorg_organizations view, featured/all listing.
  $link .= '/' . $listing;

  // Terms in order, truncating trailing '/all'.
  $link .= '/' . preg_replace('!(/all)*$!', '', implode('/', array_merge($default_args, $term_arg)));

  return l($term->name, $link);
}

/**
 * Create issue for organizations requesting services or training listing
 */
function drupalorg_org_request_issue($node) {
  $changed = FALSE;
  // If an organization wants to be listed in the Services section of the Marketplace.
  if (($node->field_org_marketplace_request[$node->language][0]['value'] == '1') && empty($node->field_organization_issue[$node->language][0]['nid'])) {
    // A new organization has been posted, create an issue to coordinate review.
    $issue = new stdClass();
    $issue->type = 'project_issue';
    $issue->uid = $node->uid;
    $issue->language = $node->language;
    $issue->status = 1;
    $issue->title = t('Review @title', array('@title' => $node->title));
    $issue->body[$node->language][] = array(
      'value' => t('!link has been posted', array('!link' => l($node->title, 'node/' . $node->nid))),
      'format' => filter_default_format(),
    );
    $issue->field_project[$node->language][]['target_id'] = 1848824;  // Content project, http://drupal.org/project/content
    $issue->field_project[$node->language][]['target_type'] = 'node';
    $issue->field_issue_priority[$node->language][]['value'] = 200;  // normal
    $issue->field_issue_status[$node->language][]['value'] = 8;  // needs review
    $issue->field_issue_component[$node->language][]['value'] = 'Services listing';
    $issue->field_issue_category[$node->language][]['value'] = 2; //task
    $issue->comment = 2; // read & write
    node_save($issue);

    // Save the issue's nid for the organization.
    $node->field_organization_issue[$node->language][0]['nid'] = $issue->nid;
    $changed = TRUE;
  }
  // If an organization wants to be listed in the Training section of the Marketplace.
  if (($node->field_org_training_request[$node->language][0]['value'] == '1') && empty($node->field_org_training_issue[$node->language][0]['nid'])) {
    // A new organization has been posted, create an issue to coordinate review.
    $issue = new stdClass();
    $issue->type = 'project_issue';
    $issue->uid = $node->uid;
    $issue->language = $node->language;
    $issue->status = 1;
    $issue->title = t('Add @title to the Training section', array('@title' => $node->title));
    $issue->body[$node->language][] = array(
      'value' => t('!link has been posted', array('!link' => l($node->title, 'node/' . $node->nid))),
      'format' => filter_default_format(),
    );
    $issue->field_project[$node->language][]['target_id'] = 1848824;  // Content project, http://drupal.org/project/content
    $issue->field_project[$node->language][]['target_type'] = 'node';
    $issue->field_issue_priority[$node->language][]['value'] = 200;  // normal
    $issue->field_issue_status[$node->language][]['value'] = 8;  // needs review
    $issue->field_issue_component[$node->language][]['value'] = 'Training listing';
    $issue->field_issue_category[$node->language][]['value'] = 2; //task
    $issue->comment = 2; // read & write
    node_save($issue);

    // Save the issue's nid for the organization.
    $node->field_org_training_issue[$node->language][0]['nid'] = $issue->nid;
    $changed = TRUE;
  }
  if ($changed) {
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function drupalorg_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  if ($entity_type === 'node' && $entity->type === 'changenotice' && $entity->field_impacts[LANGUAGE_NONE][0]['value'] === '') {
    // List of integer field needs to be really empty instead of an empty
    // string; that would raise an exception since '' is not an int. Likely is
    // a core bug we are working around.
    unset($entity->field_impacts[LANGUAGE_NONE][0]);
  }
}

/**
 * Implements hook_node_insert().
 */
function drupalorg_node_insert($node) {
  if ($node->type === 'organization') {
    drupalorg_org_request_issue($node);
  }
}

/**
 * Implements hook_node_update().
 */
function drupalorg_node_update($node) {
  if ($node->type === 'organization') {
    drupalorg_org_request_issue($node);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function drupalorg_views_pre_render(&$view) {
  // Render the taxonomy filtering above the marketplace organization listing.
  if ($view->name === 'drupalorg_organizations') {
    $content = array(
      'nav' => array(
        '#prefix' => '<div class="nav">',
        '#suffix' => '</div>',
      ),
    );

    // Each argument should be a term restricted to a vocabulary.
    $n = 0;
    foreach ($view->display['default']->handler->options['arguments'] as $argument) {

      if (!empty($argument['validate_options']['vocabularies'])) {
        // Find that vocabulary.
        $vocabulary = taxonomy_vocabulary_machine_name_load(current($argument['validate_options']['vocabularies']));
      }
      else {
        continue;
      }

      $content['nav']['column_' . ($n + 1)] = array(
        '#prefix' => '<div class="nav-column">',
        '#suffix' => '</div>',
        '#sorted' => TRUE,
        '#weight' => $n,
      );
      $content['nav']['column_' . ($n + 1)]['header'] = array('#markup' => '<h3>' . check_plain($vocabulary->name) . '</h3>');
      $content['nav']['column_' . ($n + 1)]['list'] = array(
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
        '#sorted' => TRUE,
      ); // See comment on 3 #... items below if modified.

      // Query for terms in the vocabulary used by nodes in the current view.
      if (isset($view->args[$n + 1]) && $view->args[$n + 1] !== 'all') {
        // Remove the current filter, since only one term in each vocab may be
        // selected.
        $copy = $view->clone_view();
        $copy->args[$n + 1] = 'all';
        $copy->build();
        $query = clone $copy->query;
      }
      else {
        $query = clone $view->query;
      }

      // Clear out what we don't need.
      $view->query->fields = array();
      $view->query->orderby = array();

      //Get the D7 db_query
      $query = $query->query();

      // Join back to all terms
      $query->join('taxonomy_index', 'ti', 'node.nid = ti.nid');
      $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ti.tid');
      $query->addField('ttd', 'name');
      // … in our vid
      $query->condition('ttd.vid', $vocabulary->vid);
      // group by term, count & order by
      $query->addField('ti', 'tid', 'term_id');
      $query->groupBy('term_id');
      $query->groupBy('name');
      $query->addExpression('COUNT(*)', 'count');
      $query->orderBy('count', 'DESC');

      $c = 0;
      $result = $query->execute();
      foreach ($result as $row) {
        $c += 1;
        $args = $view->args;
        // Remove the featured/all listing and save for later.
        $listing = array_shift($args);
        // If necessary, fill default arguments.
        if ($n > count($args)) {
          $args = array_merge($args, array_fill(count($args), $n - count($args), 'all'));
        }
        // Link to this argument.
        $args[$n] = str_replace(' ', '-', $row->name);

        $path = 'drupal-services/' . $listing . '/' . implode('/', $args);
        $item = array(
          '#prefix' => '<li' . ($c > 6 && $_GET['q'] !== $path ? ' class="show-more"' : '') . '>',
          '#markup' => l(t('@name (@count)', array('@name' => $row->name, '@count' => $row->count)), $path, array('html' => TRUE)),
          '#suffix' => '</li>',
        );
        // Ensure active is in slot 6 or lower.
        if ($_GET['q'] === $path && $c > 6) {
          array_splice($content['nav']['column_' . ($n + 1)]['list'], 8, 0, array($item)); // 8 = 5 + 3 #... items
          $content['nav']['column_' . ($n + 1)]['list'][6]['#prefix'] = '<li class="show-more">';
        }
        else {
          $content['nav']['column_' . ($n + 1)]['list'][] = $item;
        }
      }
      // If there are more than 6, show more/less links.
      if ($c > 6) {
        $content['nav']['column_' . ($n + 1)]['list']['show-more'] = array(
          '#markup' => '<li class="show-link">' . l(t('Show more'), $_GET['q']) . '</li>',
        );
        $content['nav']['column_' . ($n + 1)]['list']['show-less'] = array(
          '#markup' => '<li class="hide-link">' . l(t('Show fewer'), $_GET['q']) . '</li>',
        );
      }
      // If there is a copy, show an all link.
      if (isset($copy)) {
        $replacements = module_invoke_all('views_query_substitutions', $copy);

        $args = $view->args;
        // Remove the featured/all listing and save for later.
        $listing = array_shift($args);
        // If necessasry, fill default arguments.
        if ($n > count($args)) {
          $args = array_merge(array_fill(count($args), $n - count($args), 'all'), $args);
        }
        $args[$n] = 'all';
        $content['nav']['column_' . ($n + 1)]['list'][] = array(
          '#prefix' => '<li>',
          '#markup' => l(t('All @name (@count)', array('@name' => $vocabulary->name, '@count' => $c)), preg_replace('!(/all)*$!', '', 'drupal-services/' . $listing . '/' . implode('/', $args)), array('attributes' => array('class' => array('all')))),
          '#suffix' => '</li>',
        );

        unset($copy);
      }

      $n += 1;
    }
    $view->set_item_option('default', 'header', 'area', 'format', 3);
    $view->set_item_option('default', 'header', 'area', 'content', drupal_render($content));
  }
}

/**
 * Implements hook_user_view().
 */
function drupalorg_user_view($account, $view_mode) {
  global $user;

  // Column layout for profile pages.
  $content = array(
    'main' => array(
      '#prefix' => '<div class="main">',
      '#suffix' => '</div>',
      '#sorted' => TRUE,
    ),
    'contact' => array(
      '#prefix' => '<div class="contact">',
      '#suffix' => '</div>',
      '#sorted' => TRUE,
      '#weight' => 2,
    ),
    'aside' => array(
      '#prefix' => '<div class="aside">',
      '#suffix' => '</div>',
      '#sorted' => TRUE,
      '#weight' => 2,
    ),
  );

  // Link organization to organization node, if it exists.
  if (!empty($account->profile_current_company_organization)) {
    $nid = db_query("SELECT nid FROM {node} WHERE status = :status AND type = :type AND title = :title", array(':status' => 1, ':type' => 'organization', ':title' => $account->profile_current_company_organization))->fetchField();
    if ($nid != 0) {
      $organization = node_load($nid);
      $link = check_plain($organization->title);
      if (isset($organization->field_logo[$organization->language][0])) {
        $link = theme('image_style', array('style_name' => 'grid-3', 'path' => $organization->field_logo[$organization->language][0]['uri'], 'alt' => $organization->title, 'title' => $organization->title));
      }
      $account->content['Work']['profile_current_company_organization']['#markup'] = l($link, 'node/' . $nid, array('html' => TRUE));
    }

    // Organization Memberships and Supporting Partner/Technology and Hosting Supporters
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Organization')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_org_member_badge.svg') . '" alt="' . t('Drupal Association Organization Member') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Supporting Partner')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_sup_partner_badge.svg') . '" alt="' . t('Drupal Association Supporting Partner') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Supporting Partner Premium')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_sp_badge.svg') . '" alt="' . t('Drupal Association Premium Supporting Partner') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Technology Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_badge.svg') . '" alt="' . t('Drupal Association Technology Supporter') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Premium Technology Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_tech_sp_badge.svg') . '" alt="' . t('Drupal Association Premium Technology Supporter') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Inaugural Technology Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_inaug_badge.svg') . '" alt="' . t('Drupal Association Inaugural Technology Supporter') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Inaugural Premium Technology Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_techsupp_inaug_badge.svg') . '" alt="' . t('Drupal Association Inaugural Premium Technology Supporter') . '" /></a></div></div>',
      );
    }
    /* We do not have badges yet.
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Hosting Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_host_badge.svg') . '" alt="' . t('Drupal Association Hosting Supporter') . '" /></a></div></div>',
      );
    }
    if (drupalorg_has_civimembership($account->profile_current_company_organization, 'Premium Hosting Supporter')) {
      $content['aside']['membership'][] = array(
        '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_host_badge.svg') . '" alt="' . t('Drupal Association Premium Hosting Supporter') . '" /></a></div></div>',
      );
    }
    */
  }

  // Get the membership display content
  if ($account->uid === $user->uid) {
    $membership_personal = t('Hey! Want to support the Drupal Community, Drupal.org’s infrastructure, and get one of the cool <a href="https://association.drupal.org">Drupal Association</a> badges on your profile page? <a href="https://association.drupal.org/membership">Become an Individual Member today.</a>');
  }
  if ($membership = drupalorg_civimembership_data($account->name, 'Individual')) {
    $content['aside']['membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_ind_member_badge.svg') . '" alt="' . t('Drupal Association Individual Member') . '" /></a></div></div>',
    );

    if ($account->uid === $user->uid) {
      switch ($membership->membership_status) {
        case 'New':
        case 'Current':
          $membership_personal = t('<strong>You Rock!</strong> Thank you for purchasing a <a href="https://association.drupal.org">Drupal Association</a> membership. Your support has helped us to support the Drupal community.<br />Your membership will expire on @expiration_date.', array('@expiration_date' => format_date($membership->expiration_date, 'custom', 'M d, Y')));
          break;

        case 'Grace':
          $membership_personal = t('<strong>Oh No!</strong> Your membership expired on @expiration_date. The <a href="https://association.drupal.org">Drupal Association</a> depends on your continued support to keep Drupal.org up and running. <a href="https://association.drupal.org/membership">Renew your membership today</a> so your badge stays visible and your access to benefits continues. Thank you!', array('@expiration_date' => format_date($membership->expiration_date, 'custom', 'M d, Y')));
          break;
      }
    }
  }
  // Board and Advisory Board memberships
  if (drupalorg_civimembership_data($account->name, 'Board')) {
    $content['aside']['membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_board_badge.svg') . '" alt="' . t('Drupal Association Board Member') . '" /></a></div></div>',
    );
  }
  if (drupalorg_civimembership_data($account->name, 'Advisory Board')) {
    $content['aside']['membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_advisory_board_badge.svg') . '" alt="' . t('Drupal Association Advisory Board Member') . '" /></a></div></div>',
    );
  }

  // Check if user has any membership and display relevant text
  if (!empty($content['aside']['membership'])) {
    $content['aside']['membership'][] = array(
      '#markup' => '<p>' . t('@username helps support and grow the Drupal community with the <a href="https://association.drupal.org/">Drupal Association</a>.', array('@username' => $account->name)) . '</p>',
      '#weight' => 1,
    );
  }
  if (isset($membership_personal)) {
    $content['aside']['membership'][] = array(
      '#prefix' => '<p>',
      '#markup' => $membership_personal,
      '#suffix' => '</p>',
      '#weight' => -1,
    );
  }

  // Documentation edits
  if ($drupalorg_documentation = drupalorg_documentation_contributions($account)) {
    $account->content['summary']['drupalorg_documentation'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Documentation'),
      '#markup' => $drupalorg_documentation,
    );
  }

  // User picture
  $content['contact']['user_picture'] = $account->content['user_picture'];
  unset($account->content['user_picture']);

  $content['main'] = array_merge($content['main'], $account->content);
  $account->content = $content;
}

/**
 * Counts documentation edits for user profile view.
 */
function drupalorg_documentation_contributions($account) {
  $count = (int) db_query("SELECT count(*) FROM {node} n INNER JOIN {node_revision} nr ON n.nid = nr.nid AND nr.uid = :uid WHERE n.type = :type AND n.status = :status", array(':type' => 'book', ':status' => 1, ':uid' => $account->uid))->fetchField();
  if ($count > 0) {
    // This isn't a leaderboard.
    if ($count === 1) {
      return t('1 edit');
    }
    elseif ($count <= 5) {
      return t('At least 1 edit');
    }
    else {
      foreach (array(10000, 5000, 1000, 500, 100, 50, 10, 5) as $threshold) {
        if ($count > $threshold) {
          return t('Over @count edits', array('@count' => $threshold));
        }
      }
    }
  }
  return FALSE;
}

/**
 * Check if an account has a Drupal Association membership.
 *
 * @param $name
 *   Name of the page/profile the function is being called from. Used for pattern
 *   matching to find memberships
 * @param $type
 *   'Individual', 'Organization', or 'Supporting' at time of writing.
 *
 * @return
 *   Boolean, TRUE if membership exists, FALSE if none.
 */
function drupalorg_has_civimembership($name, $type) {
  if (is_object(drupalorg_civimembership_data($name, $type))) {
    return TRUE;
  }
  // "Organization" is also known as "Organization Membership - USD"
  if ($type === 'Organization' && is_object(drupalorg_civimembership_data($name, 'Organization Membership - USD'))) {
    return TRUE;
  }
}

/**
 * Gather information about a Drupal Association membership
 *
 * @param $name
 *   Name of the page/profile to pattern match for the membership
 * @param $type
 *   Membership type, current values are 'Individual', 'Organization', or 'Supporting'
 *
 * @return $membership
 *   Object containing membership info
 */
function drupalorg_civimembership_data($name, $type) {
  if ($type == 'Individual') {
    return db_query("SELECT cm.user_name, cm.membership_status, cm.expiration_date FROM {drupalorg_crosssite_ind_civimembership} cm WHERE user_name = :name AND membership_status IN ('New', 'Current', 'Grace')", array(':name' => $name))->fetchObject();
  }
  else {
    return db_query("SELECT cmo.org_name, cmo.membership_type, cmo.membership_status, cmo.expiration_date FROM {drupalorg_crosssite_org_civimembership} cmo WHERE org_name = :name AND membership_type = :type AND membership_status IN ('New', 'Current', 'Grace')", array(':name' => $name, ':type' => $type))->fetchObject();
  }
}

/**
 * Page callback for a custom 403 page to better handle error reporting.
 *
 * This checks if the user is on node/add/project-project but hasn't agreed to
 * the Git terms of service.
 */
function drupalorg_403_page() {
  global $user;
  if (!empty($_GET['destination']) && $_GET['destination'] == 'node/add/project-project' && !empty($user->uid) && empty($user->git_consent) && !empty($user->git_vetted)) {
    return drupalorg_git_gateway_no_consent_error($user);
  }
  return t('You are not authorized to access this page.');
}

/**
 * Only show one attached image on project teaser.
 */
function drupalorg_preprocess_field(&$v) {
  if ($v['element']['#field_name'] === 'field_project_images' && $v['element']['#view_mode'] === 'teaser') {
    $v['items'] = array(reset($v['items']));
  }
}

/**
 * Do not process aggregator feeds during regular cron run.
 */
function drupalorg_cron_queue_info_alter(&$queues) {
  // If we are in drush, leave the queue intact for queue commands.
  if (function_exists('drush_get_command')) {
    $command = drush_get_command();
    if ($command['command'] !== 'core-cron') {
      return;
    }
  }
  unset($queues['aggregator_feeds']);
}

/**
 * Implements hook_node_view_alter().
 *
 * Adds a 'report spam' link to the action links in forum nodes. This link
 * directs to the webmaster queue, passing some values in the URL in order to
 * pre-populate the issue form in the queue, allowing users to report spam.
 */
function drupalorg_node_view_alter(&$build) {
  if ($build['#node']->type === 'forum' && node_access('create', 'project_issue')) {
    $node = $build['#node'];
    $build['links']['drupalorg'] = array(
      '#theme' => 'links__node__drupalorg',
      '#links' => array(
        'comment-report' => array(
          'title' => t('Report spam'),
          'href' => 'node/add/project-issue/webmasters',
          'query' => array(
            'component' => 'Spam',
            'categories' => 'task',
            'title' => 'Spam Report',
            'body' => 'Reporting the following node as spam: ' . url('node/' . $node->nid, array('absolute' => TRUE)),
          ),
        ),
      ),
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_comment_view_alter().
 *
 * Adds a 'report spam' link to the action links in comments. This link
 * directs to the webmaster queue, passing some values in the URL in order to
 * pre-populate the issue form in the queue, allowing users to report spam.
 */
function drupalorg_comment_view_alter(&$build) {
  if (node_access('create', 'project_issue')) {
    global $user;
    if ($build['#comment']->uid != $user->uid) {
      $comment = $build['#comment'];
      $build['links']['comment']['#links']['comment-report'] = array(
        'title' => t('report spam<span class="element-invisible"> on user @name</span>', array('@name' => $build['#comment']->name)),
        'href' => 'node/add/project-issue/webmasters',
        'query' => array(
          'component' => 'Spam',
          'categories' => 'task',
          'title' => 'Spam Report',
          'body' => 'Reporting the following comment as spam: ' . url('node/' . $comment->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid)),
        ),
        'html' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function drupalorg_preprocess_comment(&$v) {
  // Force the comment title to be empty for node types with a disabled comment
  // title field, such as project_issue.
  if (!variable_get('comment_subject_field_' . $v['node']->type, 1)) {
    $v['title'] = '';
  }

  // Add headings for issue comments, which do not have subjects, for
  // accessibility.
  if (project_issue_node_is_issue($v['node'])) {
    $v['permalink'] = '<h3 class="permalink-wrapper">' . $v['permalink'] . '</h3>';
  }

  // Add properly-sized user pictures.
  if (!empty($v['comment']->picture)) {
    if (is_numeric($v['comment']->picture)) {
      $filepath = file_load($v['comment']->picture)->uri;
    }
    else {
      $filepath = $v['comment']->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  if (isset($filepath)) {
    $v['picture'] = l(theme('image_style', array(
      'style_name' => 'drupalorg_user_picture',
      'path' => $filepath,
      'alt' => t('@user’s picture', array('@user' => format_username($v['comment']))),
    )), 'user/' . $v['comment']->uid, array(
      'attributes' => array(
        'title' => t('View user profile.'),
        'class' => 'picture',
      ),
      'html' => TRUE,
    ));
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function drupalorg_entity_property_info_alter(&$info) {
  // Used in project issue views using SearchAPI. Would be great to get into
  // entity module.
  $info['node']['properties']['has_new_content'] = array(
    'label' => t('Has new content'),
    'description' => t('Show a marker if the content is new or updated.'),
    'computed' => TRUE,
    'type' => 'text',
    'sanitized' => TRUE,
    'getter callback' => 'drupalorg_has_new_content',
  );
  $info['node']['properties']['last_comment_timestamp'] = array(
    'label' => t('Last comment timestamp'),
    'description' => t('The Unix timestamp of the last comment, or the timestamp of the node creation if there are no comments yet.'),
    'type' => 'date',
  );
}

function drupalorg_has_new_content($node, array &$options, $name, $type, &$info) {
  return theme('mark', array('type' => node_mark($node->nid, $node->changed)));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drupalorg_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    // We want to remove the 'add forum topic if we are on the forum top page,
    // so users can only add forum topics from within a forum. This prevents
    // users from having to guess at the forum which is best suited to the
    // topic they are creating. By forcing them to go to a forum, they will be
    // more likely to read the forum descriptions, thereby posting in the
    // correct forum.
    case 'forum':
      unset($data['actions']['output']['forum']);
      break;

    case 'forum/%':
      if (!empty(menu_get_object('forum_forum')->container)) {
        unset($data['actions']['output']['forum']);
      }
      break;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function drupalorg_module_implements_alter(&$implementations, $hook) {
  // Execute drupalorg_user_update() before bakery to add data to the
  // transmitted data.
  if ($hook === 'user_update') {
    unset($implementations['drupalorg']);
    $implementations = array('drupalorg' => NULL) + $implementations;
  }
}

/**
 * Implements hook_user_update().
 */
function drupalorg_user_update(&$edit, $account, $category) {
  // If the account hasa user picture, generate all styles that subsites use,
  // and include URLs in bakery-transmitted data.
  if ($account->picture > 0) {
    $picture = file_load($account->picture);
    foreach (array('thumbnail', 'grid-2', 'drupalorg_user_picture') as $style) {
      $destination = image_style_path($style, $picture->uri);
      if (!file_exists($destination)) {
        image_style_create_derivative(image_style_load($style), $picture->uri, $destination);
      }
      $_SESSION['bakery']['data']['drupalorg_picture'][$style] = file_create_url($destination);
    }
  }
}
