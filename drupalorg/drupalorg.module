<?php

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * The node ID of the Drupal core project.
 */
define('DRUPALORG_CORE_NID', 3060);

/**
 * TID for API compatibility for project listings.
 */
define('DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID', 7234); // 8.x

/**
 * Implements hook_permission().
 */
function drupalorg_permission() {
  return [
    'may opt into security advisory coverage' => [
      'title' => t('May opt into security advisory coverage'),
      'description' => t('Agree to the policy for projects.'),
    ],
    'administer all documentation guides' => [
      'title' => t('Administer all documentation guides'),
      'description' => t('Manage guide maintainers and menus.'),
    ],
  ];
}

/**
 * Implements hook_custom_theme().
 */
function drupalorg_custom_theme() {
  // hook_custom_theme() is invoked before hook_init(). og_theme causes
  // mailchimp to check if its libraries are loaded in some cases. Load them
  // early.
  composer_manager_init();
}

/**
 * Implements hook_init().
 */
function drupalorg_init() {
  global $user, $conf;

  // If the language was detected from the URL, redirect to the default
  // language unless this is a translated node page.
  if ($GLOBALS['language']->provider === 'locale-url' && (strpos(drupal_get_normal_path($_GET['q']), 'node/') !== 0 || !($node = menu_get_object()) || empty(menu_get_object()->tnid))) {
    drupal_goto($_GET['q'], array('language' => language_default(), 'query' => drupal_get_query_parameters()));
  }

  if (user_is_logged_in()) {
    // Use the dashboard as the home page if the user selected it.
    if (!empty($user->data['drupalorg_set_home']) && $_SERVER['REQUEST_URI'] === url('')) {
      drupal_goto('dashboard');
    }

    // Show the global notice.
    drupalorg_show_global_notice($user);
  }

  // Add tracking
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($node->taxonomy_forums) && is_array($node->taxonomy_forums)) {
    foreach ($node->taxonomy_forums as $langcode => $items) {
      foreach ($items as $item) {
        if (isset($forum_ads[$item['tid']])) {
          $forum_id = $item['tid'];
        }
      }
    }
  }

  if (isset($forum_id) && $forum_id) {
    // Tracking
    $term = taxonomy_term_load($forum_id);
    $conf['googleanalytics_custom_dimension'][1] = array(
      'index' => 1,
      'value' => check_plain($term->name),
    );
  }

  // Temporary message about the Solr index being rebuilt.
  if (variable_get('drupalorg_warn_search_index_rebuild', FALSE)) {
    if (arg(0) == 'search' || arg(0) == 'download' || (arg(0) == 'project' && (arg(1) == 'modules' || arg(1) == 'themes' || arg(1) == 'distributions' || arg(1) == 'theme engines'))) {
      drupal_set_message(t('We are rebuilding the search index for the update to drupal.org. The search results may produce broken or out-of-date results until the index is fully rebuilt. We will remove this message when the indexing is complete. Do not report any search errors at this time.'));
    }
  }

  // Enable CORS support for the API.
  if (arg(0) == 'api-d7') {
    drupal_add_http_header('Access-Control-Allow-Origin', '*');
    // Do not allow cookies regardless of withCredentials property.
    drupal_add_http_header('Access-Control-Allow-Credentials', 'false');
    drupal_add_http_header('Access-Control-Allow-Methods', 'GET, OPTIONS');
    drupal_add_http_header('Access-Control-Allow-Headers', 'Content-Type');
  }

  // Audience extension, see
  // https://www.drupal.org/news/drupalorg-2015-advertising-initiatives
  // Include for anonymous users, except on excluded pages.
  if (user_is_anonymous() && !drupal_match_path(drupal_strtolower(drupal_get_path_alias($_GET['q'])), variable_get('drupalorg_perfect_audience_excluded_pages', ''))) {
    $node = menu_get_object();
    // Do not include on issue & project nodes.
    if (empty($node) || !(project_issue_node_is_issue($node) || project_node_is_project($node))) {
      drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/drupalorg-perfect-audience.js', array('scope' => 'footer'));
    }
  }
}

/**
 * Implements hook_user_login().
 */
function drupalorg_user_login(&$edit, $account) {
  // Redirect to the dashboard if the user selected it.
  $account = user_load($account->uid);
  if (!empty($account->data['drupalorg_set_home'])) {
    $edit['redirect'] = 'dashboard';
  }

  // Try showing global notice before $account->access is updated.
  drupalorg_show_global_notice($account);
}

/**
 * Implements hook_page_build().
 */
function drupalorg_page_build(&$page) {
  // Add forum ads.
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($node->taxonomy_forums) && is_array($node->taxonomy_forums)) {
    foreach ($node->taxonomy_forums as $langcode => $items) {
      foreach ($items as $item) {
        if (isset($forum_ads[$item['tid']])) {
          $forum_id = $item['tid'];
        }
      }
    }
  }

  if (isset($forum_id) && $forum_id && !empty($forum_ads[$forum_id])) {
    $page['sidebar_second']['google_ad'] = array(
      '#markup' => drupalorg_crosssite_ad_block($forum_ads[$forum_id], FALSE),
    );
  }

  if (user_is_logged_in()) {
    $account = user_load($GLOBALS['user']->uid);

    // Nag about agreeing to ToS.
    if (empty($account->field_terms_of_service) || empty($account->field_terms_of_service[LANGUAGE_NONE][0]['value'])) {
      drupal_set_message(t('We’ve <a href="/news/next-steps-for-drupalorg-tos-and-privacy-policy">introduced</a> Drupal.org <a href="/terms">Terms of Service</a> and <a href="/privacy">Privacy Policy</a>. Please read both documents and <a href="!edit">accept them on your user profile</a> to continue using Drupal.org.', array('!edit' => url('user/' . $account->uid . '/edit'))), 'warning');
    }
  }
}

/**
 * Show a one-time-per-user global notice. See drupalorg_page_build() and
 * drupalorg_user_login().
 */
function drupalorg_show_global_notice(stdClass $account) {
  if ($notice = variable_get('drupalorg_notice')) {
    // Show if the user has accessed the site before the notice was set.
    if ($account->access != 0 && $account->access < $notice['time']) {
      // And has not seen it this session.
      if (!isset($_SESSION['drupalorg_notice']) || !$_SESSION['drupalorg_notice'] === $notice['time']) {
        drupal_set_message(_drupalorg_view_global_notice($notice));
        // Store the time of the notice was viewed.
        $_SESSION['drupalorg_notice'] = $notice['time'];
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function drupalorg_menu() {
  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_download'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['8/download'] = [
    'page callback' => 'drupalorg_download_redirect',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  // Prevent passing unexpected arguments to theme().
  $items['download/%'] = [
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['getting-involved'] = array(
    'title' => 'Getting Involved',
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_getting_involved'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['drupal-7.0'] = array(
    'title' => t('Drupal 7 - Easier and more powerful than ever'),
    'page callback' => 'drupalorg_d7_announce_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['project/%project/report-security-issue'] = [
    'page callback' => 'drupalorg_project_security_redirect',
    'page arguments' => [1],
    'access callback' => 'node_access',
    'access arguments' => ['view', 1],
    'type' => MENU_CALLBACK,
    'file' => 'drupalorg.pages.inc',
  ];

  // We do *not* want to setup menu items like /project/%/% since that breaks
  // various menus and Views from Project*. Instead, iterate over the actual
  // project type names and define separate menu items for each project type.
  $node_types = node_type_get_types();
  foreach (project_project_node_types() as $project_type) {
    $paths = [
      'project/' . $project_type,
      'project/' . strtr($project_type, ['_' => '-']),
    ];
    foreach ($paths as $path) {
      $items[$path] = [
        'title' => $node_types[$project_type]->name,
        'description' => '',
        'page callback' => 'drupalorg_project_browse_page',
        'page arguments' => [$node_types[$project_type]],
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
        'file' => 'drupalorg.pages.inc',
      ];
    }
  }

  $items['sponsor-redirect/%'] = [
    'title' => t('Sponsor redirect'),
    'access arguments' => ['access content'],
    'page callback' => 'drupalorg_sponsor_redirect_page',
    'page arguments' => [1],
    'type' => MENU_CALLBACK,
    'file' => 'drupalorg.pages.inc',
  ];

  $items['node/%node/drupalorg_maintain_guide/%'] = [
    'title' => t('Immediately maintain guide'),
    'access callback' => 'drupalorg_maintain_guide_access',
    'access arguments' => [1, 3],
    'page callback' => 'drupalorg_maintain_guide',
    'page arguments' => [1],
    'type' => MENU_CALLBACK,
    'file' => 'drupalorg.pages.inc',
  ];

  // Redirect some legacy paths related to the security listings.
  $items['security-contrib'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib'),
    'type' => MENU_CALLBACK,
  );
  $items['security-contrib/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  // Redirect legacy dashboard page.
  $items['user/%user/dashboard'] = [
    'access callback' => 'user_is_logged_in',
    'page callback' => 'drupal_goto',
    'page arguments' => ['dashboard', [], '301'],
    'type' => MENU_CALLBACK,
  ];

  $items['drupalorg-ham/%/%/%'] = array(
    'access callback' => 'drupalorg_ham_access',
    'access arguments' => array(1, 2, 3),
    'page callback' => 'drupalorg_ham',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/drupalorg-ads'] = array(
    'title' => 'Drupal.org ad settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_ad_settings_form'),
  );
  $items['welcome'] = array(
    'title' => 'Welcome to Drupal.org',
    'access arguments' => array('access content'),
    'page callback' => 'drupalorg_welcome_page',
  );

  $items['admin/config/system/drupalorg-notice'] = array(
    'title' => 'Drupal.org global notice',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_notice_settings_form'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function drupalorg_menu_alter(&$menu) {
  // As the forum topic is prepopulated based on the forum key in the URL (see
  // drupalorg_form_alter()) accessing the node/add/forum page directly throws
  // an error. As such direct access to this page should be denied access. To
  // access this form, users will need to go to node/add/form/<forum id>
  if (isset($menu['node/add/forum'])) {
    $menu['node/add/forum/%'] = $menu['node/add/forum'];
    $menu['node/add/forum/%']['page arguments'] = array('forum', 3);
    $menu['node/add/forum']['access callback'] = FALSE;
  }
  // Prevent abuse of heavy page callbacks by anonymous users, like spiders.
  if (isset($menu['profile'])) {
    $menu['profile']['access callback'] = 'user_is_logged_in';
    $menu['profile']['access arguments'] = array();
    $menu['profile/autocomplete']['access callback'] = 'user_is_logged_in';
    $menu['profile/autocomplete']['access arguments'] = array();
  }
  // Allow access to admin term list if you can edit the vocabulary.
  if (isset($menu['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name'])) {
    $menu['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['access callback'] = 'taxonomy_term_edit_access';
    $menu['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name']['access arguments'] = array(3);
  }
  // Nicer titles.
  if (isset($menu['node/%/group'])) {
    $menu['node/%/group']['title'] = 'Admin';
    $menu['node/%/group']['weight'] = 100;
  }
  if (isset($menu['node/%node/revisions'])) {
    $menu['node/%node/revisions']['title'] = 'View history';
    $menu['node/%node/revisions']['access callback'] = 'drupalorg_node_revision_access';
  }

  $menu['user']['title callback'] = 'drupalorg_user_menu_title';
}

/**
 * Menu access callback. Hide revisions for some content types.
 */
function drupalorg_node_revision_access($node) {
  if (in_array($node->type, ['page', 'post', 'casestudy', 'section'])) {
    return diff_node_revision_access($node) && node_access('update', $node);
  }

  return diff_node_revision_access($node);
}

/**
 * Menu access callback. Check for a valid token.
 */
function drupalorg_maintain_guide_access($node, $token) {
  return drupalorg_user_is_confirmed($GLOBALS['user']) && drupal_valid_token($token, 'drupalorg_maintain_guide/' . $node->nid);
}

/**
 * Menu title callback. Be more welcoming than core.
 */
function drupalorg_user_menu_title() {
  return user_is_logged_in() ? t('My account') : t('Welcome to Drupal.org');
}

/**
 * Implements hook_help().
 */
function drupalorg_help($path, $args) {
  switch ($path) {
    case 'user/%/message-follow':
      return t('<p>' . t('Content you follow is added to <a href="!tracker-url">Your posts</a>, where you can see new comments and updates. Below you can select additional notifications you want to receive.', array('!tracker-url' => url('user/' . $args[1] . '/track'))) . '</p>');
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function drupalorg_field_extra_fields() {
  return array(
    'node' => array(
      'organization' => array(
        'display' => array(
          'drupalorg_organization_contributions' => array(
            'label' => t('Contributon summary'),
            'description' => t('Organization’s contribution summary'),
            'weight' => 0,
          ),
        ),
      ),
      'sa' => [
        'display' => [
          'drupalorg_sa_date' => [
            'label' => t('Created date'),
            'description' => t('Date formatted for the SA'),
            'weight' => 0,
          ],
        ],
      ],
    ),
    'user' => array(
      'user' => array(
        'display' => array(
          'drupalorg_documentation_guides' => array(
            'label' => t('Documentation guides'),
            'description' => t('Documentation guides that a user maintains'),
            'weight' => 0,
          ),
          'drupalorg_companies_worked_for' => array(
            'label' => t('Companies Worked For'),
            'description' => t('Companies Worked For derived from companies or organizations'),
            'weight' => 0,
          ),
          'drupalorg_membership' => array(
            'label' => t('Drupal Association Memberships'),
            'description' => t('User’s individual memberships, and their organizations’'),
            'weight' => 0,
          ),
          'drupalorg_user_issue_credit' => array(
            'label' => t('Issue credits'),
            'description' => t('User’s issue credits'),
            'weight' => 0,
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_access().
 *
 * This takes care of several file access tweaks:
 * - Forbids access to upload files on forum, page, and story nodes, except
 *   for people with 'administer nodes' permission.
 * - Forbids node owners from changing an organization's visibility.
 * - Forbids node owners from changing a case study's status.
 */
function drupalorg_field_access($op, $field, $entity_type, $entity, $account) {
  switch ($op) {
    case 'view':
      switch ($entity_type) {
        case 'user':
          switch ($field['field_name']) {
            // We should not see Mailchimp subscription information.
            case 'field_subscribe_to':
            // Only show notes on edit.
            case 'field_notes':
              return FALSE;
          }
          break;

        case 'node':
          switch ($field['field_name']) {
            // Hide contribution rank from API and elsewhere.
            case 'field_org_contribution_rank':
              return user_access('administer nodes', $account);
          }
      }
      break;

    case 'edit':
      switch ($entity_type) {
        case 'node':
          // Handle the case of file uploads on certain node types.
          if ($field['type'] == 'file' && isset($entity->type) && in_array($entity->type, array('forum', 'page', 'story'))) {
            return user_access('administer nodes', $account);
          }

          // Handle the case of the organization/status fields.
          switch ($field['field_name']) {
            case 'field_organization_list_rule':
            case 'field_organization_training_list':
            case 'field_organization_hosting_level':
            case 'field_organization_hosting_last':
            case 'field_organization_hosting_by':
            case 'field_organization_security':
            case 'field_org_services_issue':
            case 'field_org_train_issue':
            case 'field_status':
            case 'field_organization_technologies':
            case 'field_organization_support':
            case 'field_short_description':
              if (isset($entity->uid) && $entity->uid === $account->uid) {
                // People cannot edit their own nodes for these fields.
                return FALSE;
              }
              // For other users' nodes, allow administrators to edit.
              return user_access('administer nodes', $account);

            case 'field_project_has_releases':
              // Always allow admins to configure releases. Otherwise restrict
              // access to maintainers with 'administer releases' permission on
              // the project.
              return user_access('administer projects');

            case 'field_project_has_issue_queue':
              // Always allow admins to configure issue tracking. Otherwise
              // restrict access to maintainers with 'maintain issues'
              // permission on the project.
              return (!empty($entity->project['maintainers'][$account->uid]['permissions']['maintain issues'])
                || $entity->uid == $account->uid
                || user_access('administer nodes'));
          }

        case 'user':
          switch ($field['field_name']) {
            case 'field_terms_of_service':
              // You can only agree for yourself.
              if ($entity->uid != $account->uid) {
                return FALSE;
              }

              // Once agreed to, hide.
              if (!empty($entity->field_terms_of_service) && $entity->field_terms_of_service[LANGUAGE_NONE][0]['value']) {
                return FALSE;
              }
              return TRUE;

            case 'field_notes':
              return user_access('administer users');
          }
      }
  }

  // All other cases: we don't care about this field/operation.
  return TRUE;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function drupalorg_field_widget_options_buttons_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['field_name'] === 'field_gender') {
    $element['#options']['_none'] = t('Prefer not to share');
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function drupalorg_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['field_name'] === 'field_cta_graphic') {
    foreach (element_children($element) as $key) {
      $element[$key]['#upload_validators']['file_validate_extensions'][0] .= ' svg';
      $element[$key]['#process'][] = '_drupalorg_image_field_widget_process';
    }
  }
}

/**
 * Form process callback, remove empty width/height which cannot be saved.
 */
function _drupalorg_image_field_widget_process($element, &$form_state, $form) {
  if (empty($element['width']['#value'])) {
    unset($element['width']);
  }
  if (empty($element['height']['#value'])) {
    unset($element['height']);
  }
  return $element;
}

/**
 * Implements hook_block_info().
 */
function drupalorg_block_info() {
  return array(
    'set_home' => array(
      'info' => t('Set user home page'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'drupalorg_activity' => array('info' => t('Drupal.org Activity')),
    'add_to_dashboard' => array(
      'info' => t('Add to Dashboard links'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'tracker_user' => array(
      'info' => t('Your posts'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'security_issues' => array(
      'info' => t('Your Security Issues'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'documentation_survey' => array(
      'info' => t('Survey on documentation pages'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'announcements' => array(
      'info' => t('Announcement banner'),
      'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
    ),
    'book-listing-info' => array(
      'info' => t('Book listings information'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'book-listing-link' => array(
      'info' => t('Book listing add link'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'search-documentation' => [
      'info' => t('Documentation search form'),
      'cache' => DRUPAL_NO_CACHE,
    ],
    'documentation-license' => [
      'info' => t('Documentation license'),
    ],
    'lead-capture' => [
      'info' => t('Lead capture form'),
      'cache' => DRUPAL_NO_CACHE,
    ],
    'project-follow' => [
      'info' => t('Project star and notifications'),
      'cache' => DRUPAL_NO_CACHE,
    ],
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_block_view($delta, $block = NULL) {
  switch ($delta) {
    case 'set_home':
      if (user_is_logged_in()) {
        return array('content' => drupal_get_form('drupalorg_set_home'));
      }
      break;

    case 'drupalorg_activity':
      return array(
        'subject' => t('Drupal.org Activity'),
        'content' => drupalorg_activity_block(),
      );

    case 'security_issues':
      return array(
        'subject' => t('Your Security Issues'),
        'content' => '<p id="drupalorg-security-issues-placeholder">' . t('Loading…') . '</p>',
      );

    case 'add_to_dashboard':
      if (user_is_logged_in()) {
        $item = menu_get_item();
        $blocks = array();
        switch ($item['path']) {
          case 'node/%':
            $node = menu_get_object();
            if (project_node_is_project($node)) {
              $blocks[] = array('Issues for ' . $node->title, 'project_issue', 'issue_cockpit', array('nid' => $node->nid));
            }
            elseif ($node->nid === '24572') {
              $blocks[] = array('Documentation Team links', 'menu', 'menu-documentation-t');
            }
            elseif ($node->nid === '2851243') {
              $blocks[] = array('Drupal News', 'drupalorg_news', 'drupal-news');
            }
            break;

          case 'aggregator/categories/%':
            // Planet Drupal and Drupal talk only.
            if ($item['page_arguments'][0]['cid'] == 2 || $item['page_arguments'][0]['cid'] == 1) {
              $blocks[] = array($item['page_arguments'][0]['title'], 'aggregator', 'category-' . $item['page_arguments'][0]['cid']);
            }
            break;

          case 'user/%/track':
            if ($item['map'][1]->uid === $GLOBALS['user']->uid) {
              $blocks[] = array('Your Posts', 'drupalorg', 'tracker_user');
            }
            break;

          case 'project/issues/user':
            $blocks[] = array('Your Issues', 'views', '1764f77afedbacb7539d78cc3f1d414f');
            break;

          case 'getting-involved':
            $blocks[] = array('Contributor Links', 'drupalorg_project', 'bingo-block');
            break;
        }
        if (count($blocks) > 0) {
          $page = homebox_get_page('dashboard');
          $user_settings = _homebox_get_user_settings($page);
          if ($user_settings === FALSE) {
            $user_settings = $page->settings['blocks'];
          }
          $content = '';
          foreach ($blocks as $block) {
            // Check if this block already on the dashboard.
            $existing_block = FALSE;
            foreach ($user_settings as $homebox) {
              if (!$homebox['status']) {
                continue;
              }
              if ($homebox['module'] !== $block[1] && $homebox['delta'] !== $block[2]) {
                continue;
              }
              if (isset($block[3]) && !array_intersect_assoc($block[3], $homebox)) {
                continue;
              }
              $existing_block = TRUE;
            }
            if ($existing_block) {
              continue;
            }
            // Make a link to add the block.
            $options = array('attributes' => array('class' => array('add')));
            if (isset($block[3])) {
              $options['query'] = $block[3];
            }
            $content .= homebox_add_link(t('Add @name to dashboard +', array('@name' => $block[0])), $page, $block[1], $block[2], $options);
          }
          return array('content' => $content);
        }
      }
      break;

    case 'tracker_user':
      global $user;

      $query = db_select('tracker_user', 't');
      $query->condition('t.uid', $user->uid);

      // This array acts as a placeholder for the data selected later
      // while keeping the correct order.
      $nodes = $query
        ->addTag('node_access')
        ->fields('t', array('nid', 'changed'))
        ->condition('t.published', 1)
        ->orderBy('t.changed', 'DESC')
        ->range(0, empty($block->count) ? 15 : $block->count)
        ->execute()
        ->fetchAllAssoc('nid');

      if (empty($nodes)) {
        $content = '<p>' . t('No content available.') . '</p>';
      }
      else {
        // Now, get the data and put into the placeholder array.
        $result = db_query('SELECT n.nid, n.title, n.type, n.changed, n.uid, u.name, l.comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.nid IN (:nids)', array(':nids' => array_keys($nodes)), array('target' => 'slave'));
        foreach ($result as $node) {
          $node->last_activity = $nodes[$node->nid]->changed;
          $nodes[$node->nid] = $node;
        }

        // Display the data.
        $content = array(
          '#sorted' => TRUE,
          'tracker' => array(
            '#items' => array(),
            '#theme' => 'item_list',
          ),
          'more' => array(
            '#theme' =>'more_link',
            '#url' => 'user/' . $user->uid . '/track',
            '#title' => t('Track posts'),
          ),
        );
        foreach ($nodes as $node) {
          $comments = '';
          if (!empty($node->comment_count)) {
            $comments = '<br />' . format_plural($node->comment_count, '1 comment', '@count comments');
            if ($new = comment_num_new($node->nid)) {
              $query = db_select('comment', 'c')
                ->fields('c', array('cid'))
                ->condition('c.nid', $node->nid)
                ->condition('c.created', max(node_last_viewed($node->nid), NODE_NEW_LIMIT), '>')
                ->condition('c.status', COMMENT_PUBLISHED)
                ->orderBy('c.cid')
                ->range(0, 1);
              $uri = entity_uri('comment', comment_load($query->execute()->fetchField()));
              $comments .= ', ' . l(format_plural($new, '1 new', '@count new'), $uri['path'], $uri['options']);
            }
          }
          $content['tracker']['#items'][] = l($node->title, 'node/' . $node->nid) . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . $comments;
        }
      }
      return array(
        'subject' => t('Your Posts'),
        'content' => $content,
      );

    case 'announcements':
      if ($created_before = variable_get('drupalorg_announcements_users_created_before')) {
        if (user_is_anonymous() || $GLOBALS['user']->created > $created_before) {
          break;
        }
      }
      if (variable_get('drupalorg_announcements_users_membership') === 'non-members' && user_is_logged_in()) {
        // Check for individual membership.
        if (db_query_range("SELECT 1 FROM {drupalorg_crosssite_ind_civimembership} cm WHERE user_name = :name AND membership_status IN ('New', 'Current', 'Grace', 'Grace Period')", 0, 1, [':name' => $GLOBALS['user']->name])->fetchField()) {
          break;
        }
        // Check for organization membership.
        $names = [];
        $wrapper = entity_metadata_wrapper('user', $GLOBALS['user']);
        foreach ($wrapper->field_organizations as $n => $organization) {
          if ($organization->field_current->value()) {
            $names[] = $organization->field_organization_name->value();
          }
        }
        if ($names && db_query_range("SELECT 1 FROM {drupalorg_crosssite_org_civimembership} cmo WHERE org_name IN (:names) AND membership_status IN ('New', 'Current', 'Grace', 'Grace Period')", 0, 1, [':names' => $names])->fetchField()) {
          break;
        }
      }
      return ['content' => announcements_block_view()];

    case 'documentation_survey':
      if (drupalorg_crosssite_section() === 'documentation') {
        return array(
          'subject' => '',
          'content' => '<a class="action-button">' . t('Provide feedback about this page</a>') . '<iframe src="https://www.surveymonkey.com/r/BYX8YCY" height="500"></iframe>',
        );
      }
      break;

    case 'book-listing-info':
      if ((($node = menu_get_object()) && $node->type == 'book_listing') || drupalorg_crosssite_child_of('books')) {
        return array(
          'content' => '<p>' . t('Drupal.org’s online content is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. Book descriptions are generally copyrighted by the book author or publisher, and are added to this web site with permission.', array('!year' => date('Y'), '@ccl_url' => url('node/14307'))) . '</p>',
        );
      }
      break;

    case 'book-listing-link':
      if ((($node = menu_get_object()) && $node->type == 'book_listing') || drupalorg_crosssite_child_of('books')) {
        $content = '';
        if (user_access('create book_listing content') && current_path() === 'books') {
          $content .= '<p>' . l(t('Add book listing'), 'node/add/book-listing', array('attributes' => array('class' => 'action-button'))) . '</p>';
        }
        $content .= '<p>' . l(t('Book listing guidelines'), 'node/1691562') . '</p>';
        return array(
          'content' => $content,
        );
      }
      break;

    case 'search-documentation':
      if (user_access('search content')) {
        return ['content' => drupal_get_form('drupalorg_documentation_search_form')];
      }
      break;

    case 'documentation-license':
      return [
        'content' => t('Drupal’s online documentation is © 2000-!year by the individual contributors and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. PHP code is distributed under the <a href="@gpl_url">GNU General Public License</a>.', ['!year' => date('Y'), '@ccl_url' => url('terms'), '@gpl_url' => url('http://www.gnu.org/licenses/old-licenses/gpl-2.0.html')]),
      ];

    case 'lead-capture':
      $form = drupal_get_form('drupalorg_lead_capture_form');
      return ['content' => $form];

    case 'project-follow':
      if ($node = menu_get_object()) {
        $wrapper = entity_metadata_wrapper('node', $node);

        // Starring the project.
        $output = flag_create_link('project_star', $node->nid);
        if (empty($output)) {
          $flag_count = flag_get_counts('node', $node->nid);
          if (!empty($flag_count['project_star'])) {
            $output = '<span>' . l(format_plural($flag_count['project_star'], '1<span class="element-invisible"> person starred this project</span>', '@count_formatted<span class="element-invisible"> people starred this project</span>', ['@count_formatted' => number_format($flag_count['project_star'])]), 'user', ['html' => TRUE, 'attributes' => ['class' => ['log-in-to-star'], 'title' => t('Log in to star projects')], 'query' => drupal_get_destination()]) . '</span>';
          }
        }

        // Email notifications.
        if (user_is_logged_in()) {
          $level = project_issue_notification_project_setting_load($GLOBALS['user']->uid, $node->nid);
          if ($level == PROJECT_ISSUE_NOTIFICATION_DEFAULT) {
            $level = project_issue_notification_user_settings_load_multiple([$GLOBALS['user']->uid])[$GLOBALS['user']->uid]['level'];
          }
          $subscriptions = [
            PROJECT_ISSUE_NOTIFICATION_NONE => t('No mail'),
            PROJECT_ISSUE_NOTIFICATION_OWN => t('Followed'),
            PROJECT_ISSUE_NOTIFICATION_ALL => t('All issues'),
          ];
          $output .= ' <span>' . l($subscriptions[$level], 'project/issues/subscribe-mail/' . $wrapper->field_project_machine_name->value(), ['attributes' => ['title' => t('Change issue email notification'), 'class' => ['mail']], 'query' => drupal_get_destination()]) . '</span>';
        }

        return ['content' => $output];
      }
      break;
  }
}

/**
 * Implements hook_block_configure().
 */
function drupalorg_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'announcements':
      // Text field form element
      $form['text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Main text'),
        '#default_value' => variable_get('drupalorg_announcements_text_variable', ''),
        '#description' => t('This should be between 60 - 90 characters long.'),
      );

      // Call to action text
      $form['text_cta'] = array(
        '#type' => 'textfield',
        '#title' => t('Call to action text'),
        '#default_value' => variable_get('drupalorg_announcements_text_cta', ''),
        '#description' => t('Button text for the Call to Action link.'),
      );

      // Call to action link
      $form['text_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Call to action link'),
        '#maxlength' => 500,
        '#default_value' => variable_get('drupalorg_announcements_text_link', ''),
        '#description' => t('Remember to include any campaign tracking tags in the url.'),
      );

      // File selection form element
      $form['file'] = array(
        '#name' => 'block_image',
        '#type' => 'managed_file',
        '#title' => t('Icon'),
        '#default_value' => variable_get('drupalorg_announcements_block_image_fid', ''),
        '#description' => t('Upload an icon for the custom block. Only *.svg images allowed. <br />Icons are available <a href="https://drive.google.com/open?id=0B-poiK4gZY2sVDY4Q1VKQkJrZW8">here</a>.'),
        '#upload_location' => 'public://announcements/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('svg'),
        ),
      );

      // Machine name
      $form['machine_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Unique banner ID'),
        '#default_value' => variable_get('drupalorg_announcements_machine_name', ''),
        '#description' => t('This is used for the close button code. It should be unique for each banner campaign. <br />Example: membership2016june'),
      );

      // Show to users who registered before
      $form['users_created_before'] = array(
        '#type' => 'textfield',
        '#title' => t('Elections timestamp (optional)'),
        '#default_value' => variable_get('drupalorg_announcements_users_created_before'),
        '#description' => t('Limits display of the banner to users who registered before this unix timestamp.'),
      );

      // Show to everyone or Association non-members.
      $form['users_membership'] = [
        '#type' => 'radios',
        '#title' => t('Show to'),
        '#options' => [
          'all' => t('Everyone'),
          'non-members' => t('People without Association membership'),
        ],
        '#default_value' => variable_get('drupalorg_announcements_users_membership', 'all'),
      ];

      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function drupalorg_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'announcements':
      // Saving the WYSIWYG text
      variable_set('drupalorg_announcements_text_variable', $edit['text_body']['value']);

      // Saving the cta text
      variable_set('drupalorg_announcements_text_cta', $edit['text_cta']);

      // Saving the cta link
      variable_set('drupalorg_announcements_text_link', $edit['text_link']);

      // Saving the file, setting it to a permanent state, setting a FID variable
      $file = file_load($edit['file']);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      $block = block_load('custom_block', $delta);
      file_usage_add($file, 'custom_block', 'block', '1');
      variable_set('drupalorg_announcements_block_image_fid', $file->fid);

      // Saving the machine name
      variable_set('drupalorg_announcements_machine_name', $edit['machine_name']);

      variable_set('drupalorg_announcements_users_created_before', $edit['users_created_before']);
      variable_set('drupalorg_announcements_users_membership', $edit['users_membership']);

      break;
  }
}

/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function announcements_block_view() {
  $block = array();

  // Capture the image file path and form into HTML with attributes
  $image_file = file_load(variable_get('drupalorg_announcements_block_image_fid', ''));
  $image_path = '';

  if (isset($image_file->uri)) {
    $image_path = $image_file->uri;
  }

  $image = theme_image(array(
    'path' => ($image_path),
    'alt' => t('Announcement icon'),
    'title' => t('Announcement icon'),
    'attributes' => array('class' => 'icon'),
  ));

  $text = theme('html_tag', array(
    'element' => array(
      '#tag' => 'p',
      '#attributes' => array(
        'class' => 'announcement',
      ),
      '#value' => $image . variable_get('drupalorg_announcements_text_variable'),
    ),
  ));

  // Capture Call to action text and link from the variable
  $cta_text = variable_get('drupalorg_announcements_text_cta', '');
  $cta_link = variable_get('drupalorg_announcements_text_link', '');
  $machine_name = variable_get('drupalorg_announcements_machine_name', '');

  // Block output in HTML with div wrapper
  $block = array(
    'message' => array(
      '#type' => 'markup',
      '#markup' => $text,
      '#suffix' => '',
    ),
    'cta' => array(
      '#markup' => l($cta_text, $cta_link, array('attributes' => array('class' => $machine_name))),
      '#prefix' => '<div class="cta">',
      '#suffix' => '</div>'
    ),
  );

  return $block;
}

/**
 * Implementation of hook_homebox_block_keys(). The only configurable block is
 * tracker_user, with a count field.
 */
function drupalorg_homebox_block_keys($block) {
  switch ($block->delta) {
    case 'tracker_user':
      return array('count');
  }
  return array();
}

/**
 * Implementation of hook_homebox_block_edit_form(). The only configurable
 * block is tracker_user, with a count field.
 */
function drupalorg_homebox_block_edit_form($block) {
  return array(
    'count' => array(
      '#type' => 'textfield',
      '#title' => t('Number of posts to show'),
      '#default_value' => isset($block->count) ? $block->count : 15,
      '#size' => 5,
      '#required' => TRUE,
      '#element_validate' => array('drupalorg_validate_int'),
    ),
  );
}

/**
 * Validate for a positive integer.
 */
function drupalorg_validate_int($element) {
  if (!preg_match('/^[0-9]+$/', $element['#value']) || (int) $element['#value'] <= 0) {
    form_error($element, t('Number of posts must be a positive integer.'));
  }
}

/**
 * Overall quick stats for drupal.org.
 */
function drupalorg_activity_block() {
  $items = array();
  $stats = drupalorg_get_activity();
  $items[] = t('<strong>@accounts</strong> people with Git accounts', array('@accounts' => $stats['number_of_git_accounts']));
  $items[] = t("<strong>@commits</strong> Git commits this week", array('@commits' => $stats['number_of_git_commits']));
  $items[] = t("<strong>@users</strong> users on drupal.org", array('@users' => $stats['number_of_users']));
  $items[] = t("<strong>@sites</strong> sites running Drupal", array('@sites' => $stats['sites']));
  $items[] = t("<strong>@comments</strong> comments and issue followups", array('@comments' => $stats['comments']));

  $output = theme('item_list', array('items' => $items));
  return $output;
}

/*
 * Returns data on recent activity in the Drupal project.
 *
 * If we do not have data or our data was generated an hour ago,
 * try to generate it again.
 */
function drupalorg_get_activity($_force = FALSE) {
  if (!$_force && ($cache = cache_get('drupalorg_front_counter_data', 'drupalorg'))) {
    $stats = $cache->data;
  }
  elseif (lock_acquire('drupalorg_get_activity', 5)) {
    $stats = array();

    // GIT: retrieve info via API.
    $stats['number_of_git_accounts'] = number_format(drupalorg_git_gateway_get_total_accounts());
    $stats['number_of_git_commits'] = number_format(drupalorg_versioncontrol_get_total_commits(7 * 24 * 60 * 60));

    // Issue comments this week
    $followups = db_query("SELECT COUNT(distinct c.nid) FROM {node} n INNER JOIN {comment} c ON n.nid = c.nid WHERE n.type = :type AND n.status = :status AND c.created > :created", array(':type' => 'project_issue', ':status' => 1, ':created' => strtotime("1 week ago")))->fetchField();
    $stats['number_of_issue_comments'] = number_format($followups);

    // All Modules.
    $modules = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_module' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    // TODO would be nice to limit to D6 & D7
    $stats['number_of_modules'] = number_format($modules);

    // All Themes.
    $themes = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_theme' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    // TODO would be nice to limit to D6 & D7
    $stats['number_of_themes'] = number_format($themes);

    // All Distributions.
    $distributions = db_query("SELECT COUNT(n.nid) FROM {node} n WHERE n.type = 'project_distribution' AND n.status = :status", array(':status' => NODE_PUBLISHED))->fetchField();
    $stats['number_of_distributions'] = number_format($distributions);

    // Users: Count them.
    $stats['number_of_users'] = number_format(db_query('SELECT COUNT(*) FROM {users} WHERE uid > :uid AND status = :status AND login > :login', array(':uid' => 0, ':status' => 1, ':login' => 0))->fetchField());
    $stats['number_of_confirmed_accounts'] = number_format(db_query('SELECT count(1) FROM {users} u INNER JOIN {users_roles} ur ON ur.uid = u.uid AND ur.rid = :confirmed WHERE u.uid > 0 AND u.status = :status AND u.login > 0', array(':confirmed' => variable_get('drupalorg_crosssite_trusted_role'), ':status' => 1))->fetchField());

    // Sites: use project API.
    $stats['sites'] = number_format(project_usage_get_project_total_usage(DRUPALORG_CORE_NID));

    // Comments: count comments.
    $stats['comments'] = number_format(db_query("SELECT COUNT(*) FROM {comment} WHERE status = :status", array(':status' => 1))->fetchField());

    cache_set('drupalorg_front_counter_data', $stats, 'drupalorg');
    lock_release('drupalorg_get_activity');
  }
  else {
    $stats = array();
  }
  return $stats;
}

/**
 * Implements hook_forms().
 */
function drupalorg_forms() {
  return [
    'drupalorg_documentation_search_form' => [
      'callback' => 'search_box',
      'callback arguments' => ['search_block_form'],
    ]
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_drupalorg_documentation_search_form_alter(&$form) {
  // Search button icon.
  drupalorg_crosssite_form_search_block_form_alter($form);
  // Slim up styles.
  $form['#attributes']['class'][] = 'container-inline';
  $form['search_block_form']['#attributes'] = ['placeholder' => t('Search documentation…')];
  // search modules looks for text by form id.
  $form['drupalorg_documentation_search_form'] = $form['search_block_form'];
  // … and also here.
  $form['search_block_form'] = [
    '#type' => 'value',
    '#value' => 'dummy',
  ];
  $form['#submit'][] = 'drupalorg_documentation_search_form_submit';
}

/**
 * Form submit callback.
 */
function drupalorg_documentation_search_form_submit($form, &$form_state) {
  if (!is_array($form_state['redirect'])) {
    $form_state['redirect'] = [$form_state['redirect']];
  }
  $form_state['redirect'][]['query']['f'][] = 'ss_meta_type:documentation';
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function drupalorg_block_view_forum_new_alter(&$data, $block) {
  $data['content']['#pre_render'][] = 'drupalorg_forum_block_view_pre_render';
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function drupalorg_block_view_og_menu_og_single_menu_block_alter(&$data, $block) {
  // On Documentation Guide pages, replace og_menu with parent guide’s menu, if
  // it exists.
  if (($context = og_context()) && ($node = menu_get_object()) && $context['gid'] == $node->nid && $node->type === 'guide') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $data = [];
    if ($parent = $wrapper->og_group_ref_documentation->value()) {
      // Adapted from og_menu_block_view().
      $menus = og_menu_get_group_menus([$context['group_type'] => [$parent->nid]]);
      $menu = array_shift($menus);

      if ($menu) {
        if (variable_get('og_menu_block_links', FALSE)) {
          $data['subject'] = l($menu['title'], $menu['group_type'] . '/' . $menu['gid']);
        }
        else {
          $data['subject'] = check_plain($menu['title']);
        }
        $data['content'] = menu_tree($menu['menu_name']);
        // Add contextual links.
        if ($data['content']) {
          if (in_array($menu['menu_name'], array_keys(menu_get_menus()))) {
            $data['content']['#contextual_links']['og_menu'] = ['group/' . $context['group_type'] . '/' . $parent->nid . '/admin/menus', [$menu['menu_name']]];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_og_menu_edit_item_form_alter(&$form) {
  // Disable menu hierarchy.
  $form['parent']['#disabled'] = TRUE;
}

/**
 * Implements hook_js_alter().
 */
function drupalorg_js_alter(&$js) {
  // For OG menus, disable menu hierarchy.
  if (arg(0) === 'group' && arg(3) === 'admin' && arg(4) === 'menus' && !empty($js['settings']['data'])) {
    foreach ($js['settings']['data'] as &$setting) {
      if (isset($setting['tableDrag']['menu-overview']['menu-plid'])) {
        $setting = [];
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_og_menu_overview_form_alter(&$form) {
  // drupalorg_js_alter() sometimes doesn’t prevent hierarchy UI. Hard-code it.
  foreach (element_children($form) as $key) {
    $form[$key]['plid']['#value'] = 0;
  }
}

/**
 * Set home link for Your Dashboard page.
 */
function drupalorg_set_home() {
  $account = user_load($GLOBALS['user']->uid);
  return array(
    '#prefix' => '<div id="drupalorg-set-home-wrapper">',
    '#suffix' => '</div>',
    'set_home' => array(
      '#type' => 'radios',
      '#options' => array(
        TRUE => t('Make this your homepage +'),
        FALSE => t('Use default homepage'),
      ),
      '#default_value' => isset($account->data['drupalorg_set_home']) ? $account->data['drupalorg_set_home'] : TRUE,
      '#ajax' => array(
        'callback' => 'drupalorg_set_home_callback',
        'wrapper' => 'drupalorg-set-home-wrapper',
      ),
    ),
  );
}

/**
 * AJAX callback for drupalorg_set_home().
 */
function drupalorg_set_home_callback($form, $form_state) {
  $account = user_load($GLOBALS['user']->uid);
  user_save($account, array('data' => array('drupalorg_set_home' => $form_state['values']['set_home'])));
  return $form;
}

/**
 * Get rid of jQuery UI theme noise.
 */
function drupalorg_library_alter(&$libraries, $module) {
  if ($module === 'system' && isset($libraries['ui']) && arg(0) !== 'admin') {
    unset($libraries['ui']['css']['misc/ui/jquery.ui.theme.css']);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function drupalorg_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner === 'ctools' && in_array($plugin_type, ['content_types', 'access'], TRUE)) {
    return 'plugins/' . $plugin_type;
  }
  elseif ($owner === 'versioncontrol' && $plugin_type === 'webviewer_url_handlers') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$variables) {
  $page = &$variables['page'];

  $router = menu_get_item();
  if ($router['path'] == 'drupal-7.0') {
    // Hide the page title on the D7 release announcement
    unset($variables['title']);
  }

  $headless = FALSE;
  $path = current_path();
  $headless_paths = variable_get('drupalorg_headless_form_paths', FALSE);
  if ($headless_paths && drupal_match_path($path, implode("\n", $headless_paths))) {
    $headless = TRUE;
  }
  elseif ($path == 'user' && user_is_anonymous()) {
    $headless = TRUE;
  }

  if ($headless) {
    // Remove the search form.
    unset($page['header']['search_form']);
    // Remove the main menu.
    unset($page['navigation']);
    // Remove the masthead navigation.
    $variables['nav_masthead'] = '';
    // Remove the footer.
    foreach (element_children($page['footer']) as $child) {
      hide($page['footer'][$child]);
    }
  }

  if ($context = og_context()) {
    $group_wrapper = entity_metadata_wrapper('node', node_load($context['gid']));
    if (isset($group_wrapper->field_parent_section)) {
      // Drupal Association logo for its section.
      while ($group_wrapper->field_parent_section->getIdentifier()) {
        $group_wrapper = $group_wrapper->field_parent_section;
      }
      if ($group_wrapper->getIdentifier() == 2838077) {
        $variables['drupalorg_logo_link'] = l(theme('image', ['path' => drupal_get_path('module', 'drupalorg') . '/images/drupal-association-logo-white.svg', 'alt' => t('Drupal Association'), 'attributes' => ['class' => ['association']]]), 'association', ['html' => TRUE]);
      }
    }
  }

  if (($node = menu_get_object()) && isset($node->panelizer) && $node->panelizer['default']->display->layout === 'capricorn') {
    // Capricorn layout takes over the whole page.
    $variables['drupalorg_no_wrap'] = TRUE;
    unset($variables['logo']);
    drupal_set_title('');
  }

  // Group breadcrumbs.
  if ($context || $router['path'] === 'group/node/%/admin/content' || (isset($variables['node']) && $variables['node']->type === 'casestudy')) {
    // Reset drupalorg_crosssite_preprocess_page() overrides.
    $variables['section_name'] = '';
    unset($variables['breadcrumb']);
  }

  // Special page template for documentation pages.
  if (isset($variables['node']) && in_array($variables['node']->type, ['guide', 'documentation'])) {
    // Add type-specific template.
    $variables['theme_hook_suggestions'][] = 'page__type_guide';

    if (page_manager_get_current_page()) {
      $variables['panelized'] = 'panel-page';
    }

    $variables['drupalorg_logo_link'] = l('Documentation', 'documentation');
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function drupalorg_menu_breadcrumb_alter(&$active_trail, $item) {
  $node = menu_get_object();
  if ($node && isset($node->panelizer) && $node->panelizer['default']->display->layout === 'capricorn') {
    // Hide breadcrumbs for landing pages.
    $active_trail = [];
    return;
  }

  if ($context = og_context()) {
    // If we are in a group.
    if ($context['group_type'] === 'node') {
      $group = entity_load_single($context['group_type'], $context['gid']);

      // If we are on a post page, add Blog to the breadcrumb.
      if (!empty($node) && $node->type === 'post') {
        $uri = entity_uri($context['group_type'], $group);
        $path = drupal_get_path_alias($uri['path']) . '/blog';
        if ($redirect = redirect_load_by_source($path)) {
          $path = $redirect->redirect;
        }
        array_splice($active_trail, 1, 0, array(array(
          'title' => t('Blog'),
          'href' => url($path),
          'localized_options' => array(),
        )));
      }

      // If we are not on the group page itself, add it to the breadcrumb.
      if ((empty($node) || $node->nid != $context['gid']) && ($item['path'] !== 'node/%/discuss' || $item['page_arguments'][1]->data->nid != $context['gid'])) {
        $uri = entity_uri($context['group_type'], $group);
        array_splice($active_trail, 1, 0, array(array(
          'title' => entity_label($context['group_type'], $group),
          'href' => $uri['path'],
          'localized_options' => array(),
        )));
      }

      // If the group has a parent section or documentation guide, add it to
      // the breadcrumb.
      $parent = $group;
      while ((!empty($parent->field_parent_section) && $parent = node_load($parent->field_parent_section[LANGUAGE_NONE][0]['target_id'])) || (!empty($parent->og_group_ref_documentation) && $parent = node_load($parent->og_group_ref_documentation[LANGUAGE_NONE][0]['target_id']))) {
        $uri = entity_uri('node', $parent);
        array_splice($active_trail, 1, 0, array(array(
          'title' => entity_label($context['group_type'], $parent),
          'href' => $uri['path'],
          'localized_options' => array(),
        )));
      }

      // If we are in a Documentation Guide, remove Home.
      if ($group->type === 'guide') {
        array_shift($active_trail);
      }
    }
  }

  // There isn’t a “core project” listing, so link to core.
  if (isset($active_trail[2]) && $active_trail['1']['href'] === 'project/project_core' && $active_trail[2]['href'] !== 'node/' . DRUPALORG_CORE_NID) {
    $active_trail[1]['href'] = 'node/' . DRUPALORG_CORE_NID;
  }
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $release = project_release_get_current_recommended(DRUPALORG_CORE_NID, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID);
  $variables['core_download_button'] = l(t('Download Drupal @version', ['@version' => $release->field_release_version[LANGUAGE_NONE][0]['value']]), 'node/' . $release->nid, ['attributes' => ['class' => ['primary-button']]]);

  foreach (['project_module', 'project_theme', 'project_distribution'] as $type) {
    // Create and cache a solr query for use by block elements.
    project_solr_run_project_query('project/' . $type, [[
      'key' => 'bundle',
      'value' => $type,
    ], [
      'key' => 'sm_field_project_type',
      'value' => 'full',
    ]]);

    // Render and save the facet blocks. Since we control what facets we're
    // building, use the delta as the unique key for the sake of brevity.
    foreach (['iss_project_release_usage', 'ds_created'] as $delta) {
      $block = module_invoke('drupalorg_order_facet', 'block_view', $delta);
      $variables[$type . '__' . $delta] = drupal_render($block['content']);
    }
  }

  $form = drupal_get_form('drupalorg_download_version_form');
  $variables['version_form'] = drupal_render($form);
}

/**
 * Generate a form containing version selection and a submit button.
 */
function drupalorg_download_version_form($form, &$form_state) {
  $key = variable_get('project_solr_project_release_api_tids_alias', 'drupal_core');
  $form = [
    $key => [
      '#title' => t('Show projects for Drupal version'),
      '#type' => 'select',
      '#options' => ['' => t('- Any -')],
    ],
    'submit' => [
      '#type' => 'submit',
      '#value' => t('Search'),
    ],
  ];

  if ($query = apachesolr_current_query(apachesolr_default_environment())) {
    $term_query = new EntityFieldQuery();
    $result = $term_query->entityCondition('entity_type', 'taxonomy_term')
      ->fieldCondition('field_release_recommended', 'value', 1)
      ->entityOrderBy('entity_id', 'DESC')
      ->execute();

    foreach (taxonomy_term_load_multiple(array_keys($result['taxonomy_term'])) as $term) {
      if ($query->hasFilter('im_project_release_api_tids', $term->tid)) {
        $form[$key]['#default_value'] = $term->tid;
      }
      $form[$key]['#options'][$term->tid] = $term->name;
    }
  }

  return $form;
}

/**
 * Create a query with the right version filter and redirect to the right page.
 */
function drupalorg_download_version_form_submit($form, &$form_state) {
  // We create a new query with our base path so that we don't need to remove
  // any existing drupal_core selection, and so that the implict type and
  // module tid filters don't end up in the url string.
  $query = apachesolr_drupal_query('project_solr_version_form_submit', [], '', 'download');
  $filters = [];

  $version_alias = variable_get('project_solr_project_release_api_tids_alias', 'drupal_core');

  if (!empty($form_state['values'][$version_alias])) {
    $filters = ['f' => [$version_alias . ':' . $form_state['values'][$version_alias]]];
  }
  $form_state['redirect'] = ['path' => $query->getPath(), ['query' => $filters]];
}

/**
 * Menu callback, go to the current D8 release page.
 */
function drupalorg_download_redirect() {
  $release = project_release_get_current_recommended(DRUPALORG_CORE_NID, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID);
  drupal_goto('node/' . $release->nid);
}

/**
 * Implementation of template_preprocess_drupalorg_getting_involved().
 */
function drupalorg_preprocess_drupalorg_getting_involved(&$variables) {
  // First, build and render a teaser of the old docs node.
  $docs_node = node_load(281873);
  node_build_content($docs_node, 'teaser');
  // Get rid of links and taxonomy properties so we don't render them.
  hide($docs_node->content['links']);
  foreach (element_children($docs_node->content) as $key) {
    if (strpos($key, 'taxonomy_vocabulary_') === 0) {
      hide($docs_node->content[$key]);
    }
  }
  $variables['docs_node'] = drupal_render($docs_node->content);
  $variables['docs_more'] = l(t('Getting Involved Guide'), 'node/281873');

  // Then, show the view for community spotlight.
  $view = views_get_view('drupalorg_community_spotlight');
  $variables['spotlight_title'] = t($view->display['default']->display_options['title']);
  $variables['spotlight'] = $view->preview('block_1');
}

/**
 * Page callback: Calls theme function to generate D7 announcement page.
 */
function drupalorg_d7_announce_page($language = 'en') {
  return theme('drupalorg_d7_announcement', array('language' => $language));
}

/**
 * Implementation of template_preprocess_drupalorg_d7_announcement().
 */
function drupalorg_preprocess_drupalorg_d7_announcement(&$variables) {
  global $conf;
  $languages = array(
    'ca' => 'Catalan',
    'zh-hans' => 'Chinese (simplified)',
    'zh-hant' => 'Chinese (traditional)',
    'hr' => 'Croatian',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'fi' => 'Finnish',
    'fr' => 'French',
    'de' => 'German',
    'el' => 'Greek',
    'he' => 'Hebrew',
    'hi' => 'Hindi',
    'hu' => 'Hungarian',
    'id' => 'Indonesian',
    'it' => 'Italian',
    'ko' => 'Korean',
    'lt' => 'Lithuanian',
    'nb' => 'Norwegian (Bokmål)',
    'pt' => 'Portuguese (Portugal)',
    'pt-br' => 'Portuguese (Brazil)',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sr' => 'Serbian',
    'sl' => 'Slovene',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'th' => 'Thai',
    'uk' => 'Ukrainian',
    'vi' => 'Vietnamese',
  );

  // Valid language?
  if (isset($languages[$variables['language']])) {
    include DRUPAL_ROOT . '/' . drupal_get_path('module', 'drupalorg') . '/translations/drupalorg-d7-announcement.' . $variables['language'] . '.php';
    $conf['locale_custom_strings_' . $variables['language']][''] = $strings;
    drupal_set_title(t(drupal_get_title(), array(), array('langcode' => $variables['language'])));
  }
  else {
    $variables['language'] = 'en';
  }
  if ($variables['language'] === 'he') {
    $variables['rtl'] = TRUE;
  }

  $variables['language_list'] = array();
  unset($languages[$variables['language']]);
  foreach ($languages as $code => $name) {
    if ($code === 'en') {
      $variables['language_list'][] = l($name, 'drupal-7.0');
    }
    else {
      $variables['language_list'][] = l($name, 'drupal-7.0/' . $code);
    }
  }
  $variables['language_list'] = implode(', ', $variables['language_list']);

  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/jquery.cycle.all.min.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/d7-announcement.js');
  drupal_add_css(drupal_get_path('module', 'drupalorg') . '/drupalorg-d7-announcement.css', array('type' => 'file', 'weight' => CSS_THEME));
}

/**
 * Theme function for the presentation of results on /community in the
 * "Recent Activity" section.
 *
 * @param $nodes array
 *  An array of node objects with title, changed, nid, and last_activity fields.
 */
function theme_drupalorg_recent_activity($variables) {
  $nodes = $variables['nodes'];
  if (!empty($nodes)) {
    // Display the data.
    $rows = array();
    foreach ($nodes as $node) {
      $rows[] =
        '<h6>' . l($node->title, "node/$node->nid") . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . '</h6>' .
        '<p class="submitted">' . t('Last activity: ') . t('!time', array('!time' => format_date($node->changed, 'custom', 'j F Y'))) . '</p>';
    }
  }
  else {
    $rows[] = t('No posts available.');
  }
  $output = '<div id="recent-activity">';
  $output .= theme('item_list', array('items' => $rows));
  $output .= l(t('More recent activity…'), 'tracker');
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_getting_involved' => array(
      'template' => 'drupalorg-getting-involved',
    ),
    'drupalorg_recent_activity' => array(
      'variables' => array('nodes' => array()),
    ),
    'drupalorg_d7_announcement' => array(
      'variables' => array(
        'language' => 'en',
      ),
      'template' => 'drupalorg-d7-announcement',
    ),
    // See drupalorg_theme_no_file_icon().
    'no_file_icon' => array(),
  );
}

/**
 * Implements hook_form_alter().
 */
function drupalorg_form_alter(&$form, &$form_state, $form_id) {
  // Force a revision log entry when editing existing book nodes.
  if ($form_id == 'book_node_form' && isset($form['revision_information']['log']) && arg(1) != 'add') {
    $form['revision_information']['log']['#required'] = TRUE;
    $form['revision_information']['#collapsed'] = FALSE;
    $form['revision_information']['#weight'] = 50;
  }

  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }

  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
  }

  // Add extra choices to the dblog settings selector
  if ($form_id == 'dblog_admin_settings') {
    $form['dblog_row_limit']['#options'] = drupal_map_assoc(array(100, 1000, 10000, 100000, 250000, 500000, 1000000));
  }

  // Ensure that duplicate case-insensitive usernames are not created.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['#validate'][] = 'drupalorg_username_validate';
  }
}

/**
 * Implements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_user_admin_settings_alter(&$form) {
  // Add an email sent after LoginToboggan email verification. See
  // drupalorg_user_update().
  $form['drupalorg_email_verified_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email verified'),
    '#description' => t('Edit the welcome email messages sent to fresh member accounts once email has been validated.'),
    '#group' => 'email',
  );
  $form['drupalorg_email_verified_email']['user_mail_drupalorg_email_verified_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _user_mail_text('drupalorg_email_verified_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
  );
  $form['drupalorg_email_verified_email']['user_mail_drupalorg_email_verified_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _user_mail_text('drupalorg_email_verified_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  // Add an email sent after gaining the community role. See
  // drupalorg_user_update().
  $form['drupalorg_user_community_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('User gets community role'),
    '#description' => t('Edit the welcome email messages sent to fresh member accounts once email has been validated.'),
    '#group' => 'email',
  );
  $form['drupalorg_user_community_email']['user_mail_drupalorg_user_community_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _user_mail_text('drupalorg_user_community_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
  );
  $form['drupalorg_user_community_email']['user_mail_drupalorg_user_community_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _user_mail_text('drupalorg_user_community_body', NULL, array(), FALSE),
    '#rows' => 15,
  );
}

/**
 * Implements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_tfa_basic_overview_alter(&$form, &$form_state) {
  $form['app']['link']['#options']['attributes']['class'][] = 'action-button';
  $form['trust']['link']['#options']['attributes']['class'][] = 'action-button';
  $form['recovery']['link']['#options']['attributes']['class'][] = 'action-button';
}

/**
 * Implements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_user_profile_form_alter(&$form, &$form_state) {
  // Immediately return if this isn't the  "account" user profile category.
  if (isset($form['#user_category']) && $form['#user_category'] !== 'account') {
    return;
  }

  // If there is a referring site.
  if ($GLOBALS['user']->uid == $form_state['user']->uid) {
    if (isset($form_state['user']->data['drupalorg_bd'])) {
      $site = drupalorg_get_site_parameter($form_state['user']->data['drupalorg_bd']);
    }
    elseif (isset($form_state['user']->data['drupalorg_destination'])) {
      $site = 'Drupal.org';
    }
    if (isset($site)) {
      // Include a note about the redirect that will happen.
      $form['actions']['submit']['#value'] = t('Save and go back to @site', array('@site' => $site));
      unset($form['actions']['cancel']);
      // Execute early to modify user object.
      array_unshift($form['#submit'], 'drupalorg_user_profile_redirect_submit');
    }
  }

  // If the terms of service is hidden by drupalorg_field_access(), do not
  // require it.
  if (isset($form['field_terms_of_service']['#access']) && !$form['field_terms_of_service']['#access']) {
    $form['field_terms_of_service'][LANGUAGE_NONE]['#required'] = FALSE;
  }

  // Change cancel button to a link.
  if (isset($form['actions']['cancel'])) {
    if (isset($form_state['drupalorg_welcome'])) {
      hide($form['actions']['cancel']);
    }
    else {
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Delete account'), 'user/' . $form['#user']->uid . '/cancel'),
        '#access' => $form['actions']['cancel']['#access'],
      );
    }
  }

  // MailChimp lists.
  if (isset($form['field_subscribe_to'][LANGUAGE_NONE][0])) {
    // Remove fieldset over-nesting.
    unset($form['field_subscribe_to'][LANGUAGE_NONE][0]['#type']);
    unset($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['#title']);
    // Show interest groups, and have them control the now-hidden subscribe
    // checkbox.
    hide($form['field_subscribe_to'][LANGUAGE_NONE][0]['subscribe']);
    $form['field_subscribe_to'][LANGUAGE_NONE][0]['subscribe']['#element_validate'][] = 'drupalorg_form_user_profile_set_mailchimp_subscribed';
    unset($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['#states']);
    // Hide "Roles in Drupal"
    if (isset($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['f99166c398'])) {
      hide($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['f99166c398']);
    }
    // Alter list of lists.
    if (isset($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622'])) {
      $form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622']['#title'] = t('Subscribe to');
      // Add descriptions to MailChimp lists.
      foreach (variable_get('drupalorg_mailchimp_list_descriptions', []) as $name => $description) {
        if ($key = array_search($name, $form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622']['#options'])) {
          $form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622'][$key]['#description'] = $description;
        }
      }
      if (isset($form_state['drupalorg_welcome'])) {
        // Only show some newsletters on the welcome version of the form.
        $form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622']['#options'] = array_intersect($form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups']['8d99874622']['#options'], [
          'Drupal Weekly Newsletter',
          'Drupal Association News',
          'DrupalCon News',
          'Special Offers from Drupal Supporters',
          'Security Announcements',
        ]);
      }
      else {
        $form['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups'][5485]['#suffix'] = '<div class="description">' . t('Your primary email address %address will be used for subscriptions. <a href="!url">Edit email addresses</a>', array('%address' => $form['#user']->mail, '!url' => url('user/' . $form['#user']->uid . '/edit/email-addresses'))) . '</div>';
      }
    }
  }

  // Remove fieldset bloat.
  unset($form['timezone']['#title']);
  $form['timezone']['#collapsible'] = FALSE;
  unset($form['timezone']['timezone']['#description']);
  unset($form['picture']['#title']);
  $form['picture']['#collapsible'] = FALSE;

  // Remove hanging organization references to deleted organizations.
  foreach (element_children($form['field_organizations'][LANGUAGE_NONE]) as $delta) {
    if (is_numeric($delta) && !empty($form['field_organizations'][LANGUAGE_NONE][$delta]['#entity']->field_organization_reference) && !db_query('SELECT 1 FROM {node} WHERE nid = :nid', array(':nid' => $form['field_organizations'][LANGUAGE_NONE][$delta]['#entity']->field_organization_reference[LANGUAGE_NONE][0]['target_id']))->fetchField()) {
      $form['field_organizations'][LANGUAGE_NONE][$delta]['#entity']->field_organization_reference = array();
    }
  }

  // Be welcoming.
  if (isset($form_state['drupalorg_welcome'])) {
    $to_show = array(
      'field_first_name',
      'field_last_name',
      'field_country',
      'field_gender',
      'field_organizations',
      'picture',
      'timezone',
      'field_subscribe_to',
      'actions',
      // Without these, the user won't be updated.
      'form_build_id',
      'form_token',
      'form_id',
    );

    // Hide anything that we haven't said to show.
    foreach (array_diff(element_children($form), $to_show) as $item) {
      if (isset($form[$item])) {
        hide($form[$item]);
      }
    }

    // Don't show vertical tabs.
    foreach ($form['#groups'] as &$group) {
      $group->format_type = 'div';
      $group->format_settings['formatter'] = 'open';
    }

    $form['#group_children'] = array(
      'field_country' => 'group_left',
      'field_first_name' => 'group_left',
      'field_last_name' => 'group_left',
      'field_organizations' => 'group_left',
      'field_gender' => 'group_left',
      'picture' => 'group_right',
      'timezone' => 'group_right',
      'field_subscribe_to' => 'group_right',
    );

    // Put picture at the top.
    $form['#pre_render'][] = 'drupalorg_form_user_profile_move_picture';

    // Remove the add and remove buttons.
    unset($form['field_organizations'][LANGUAGE_NONE]['add_more']);
    unset($form['field_organizations'][LANGUAGE_NONE][0]['remove_button']);

    // Hide the current organization field.
    $form['field_organizations'][LANGUAGE_NONE][0]['field_current']['#access'] = FALSE;

    // Hide the organization field description.
    $form['field_organizations'][LANGUAGE_NONE]['#description'] = '';

    // Only allow one organization.
    $form['field_organizations'][LANGUAGE_NONE]['#theme'] = 'field_single_value_form';
    $form['field_organizations'][LANGUAGE_NONE]['#cardinality'] = 1;

    // Remove the container-inline class, if it exists.
    if (isset($form['field_organizations'][LANGUAGE_NONE][0]['#groups']['group_org_inline']) && $form['field_organizations'][LANGUAGE_NONE][0]['#groups']['group_org_inline']->format_settings['instance_settings']['classes'] == 'container-inline') {
      $form['field_organizations'][LANGUAGE_NONE][0]['#groups']['group_org_inline']->format_settings['instance_settings']['classes'] = '';
    }

    $weight = 0;
    foreach ($to_show as $item) {
      if (isset($form[$item]['#weight'])) {
        $weight += 1;
        $form[$item]['#weight'] = $weight;
      }
    }

    $form['#submit'][] = 'drupalorg_form_user_profile_submit';
  }
}

/**
 * #submit callback. See drupalorg_form_user_profile_form_alter().
 */
function drupalorg_user_profile_redirect_submit($form, &$form_state) {
  if (isset($form_state['user']->data['drupalorg_bd'])) {
    // Redirect back to the starting site.
    $form_state['redirect'] = $form_state['user']->data['drupalorg_bd'];
    // Do not redirect again.
    $form_state['user']->data['drupalorg_bd'] = NULL;
  }
  elseif (isset($form_state['user']->data['drupalorg_destination'])) {
    // Redirect back to the starting site.
    $form_state['redirect'] = array(
      $form_state['user']->data['drupalorg_destination']['path'],
      array(
        'query' => $form_state['user']->data['drupalorg_destination']['query'],
        'fragment' => $form_state['user']->data['drupalorg_destination']['fragment'],
      ),
    );
    // Do not redirect again.
    $form_state['user']->data['drupalorg_destination'] = NULL;
  }
}

/**
 * #element_validate callback. Set subscribe checkbox if interest groups are
 * checked.
 */
function drupalorg_form_user_profile_set_mailchimp_subscribed($element, &$form_state) {
  foreach ($form_state['values']['field_subscribe_to'][LANGUAGE_NONE][0]['interest_groups'] as $interest_group) {
    if (array_filter($interest_group)) {
      form_set_value($element, TRUE, $form_state);
      return;
    }
  }
}

/**
 * #pre_render callback. Set user picture weight after
 * _field_extra_fields_pre_render()'s meddling.
 */
function drupalorg_form_user_profile_move_picture($elements) {
  $elements['group_right']['picture']['#weight'] = 0;
  return $elements;
}

function drupalorg_form_user_profile_submit($form, &$form_state) {
  if (!isset($form_state['redirect'])) {
    $form_state['redirect'] = 'user';
  }
}

/**
 * Implements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_user_cancel_confirm_form_alter(&$form, $form_state) {
  // Make label distinct from cancel link.
  $form['actions']['submit']['#value'] = t('Delete account');

  // Set title to match.
  if ($form['_account']['#value']->uid == $GLOBALS['user']->uid) {
    drupal_set_title(t('Are you sure you want to delete your account?'), PASS_THROUGH);
  }
  else {
    drupal_set_title(t('Are you sure you want to delete the account %name?', array('%name' => $form['_account']['#value']->name)), PASS_THROUGH);
  }
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_forum_node_form_alter(&$form, $form_state) {
  // Hide the taxonomy_field_extras field on forum node forms.
  if (!user_access('administer content')) {
    $form['taxonomyextra']['#access'] = FALSE;
  }

  // If the node is being newly created, we want to set the value of the forum
  // to not be editable, as users will be creating the forum topic from within
  // the forum to which it is to be posted. However, we want to allow users to
  // move threads after they have been created. So we check to see if the node
  // has a Node ID (nid) to determine whether the user is creating a new post,
  // or editing an existing post.
  if (empty($form_state['node']->nid)) {
    $form['taxonomy_forums'][LANGUAGE_NONE]['#type'] = 'value';
    $form['taxonomy_forums']['forum_display'] = array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#markup' => t('<strong>Forum:</strong> @forum', array('@forum' => preg_replace('/^[- ]*/', '', $form['taxonomy_forums'][LANGUAGE_NONE]['#options'][$form['taxonomy_forums'][LANGUAGE_NONE]['#default_value']]))),
    );
    // We load the term to get the description to show at the top of the
    // forum topic creation page.
    $term = taxonomy_term_load($form['taxonomy_forums'][LANGUAGE_NONE]['#default_value']);
  }
  else {
    // Users must choose a forum, so we remove the _none option
    // from the forum list
    unset($form['taxonomy_forums'][LANGUAGE_NONE]['#options']['_none']);

    // Add a wrapper for use in our #ajax
    $form['taxonomy_forums']['#prefix'] = '<div id="taxonomy_forums_selector_wrapper">';
    $form['taxonomy_forums']['#suffix'] = '</div>';
    // Set #ajax on the forum selector. This will show the forum description
    // to the user when they change the forum.
    $form['taxonomy_forums'][LANGUAGE_NONE]['#ajax'] = array(
      'wrapper' => 'taxonomy_forums_selector_wrapper',
      'callback' => 'drupalorg_taxonomy_forums_ajax_callback',
    );

    // We need to load a term to use in the forum description. The location
    // of the Taxonomy ID (tid) is different depending on whether the forum
    // is being newly generated, or generated on an #ajax submit.
    if (isset($form_state['values']['taxonomy_forums'])) {
      // #ajax page load
      $term = taxonomy_term_load($form_state['values']['taxonomy_forums'][LANGUAGE_NONE][0]['tid']);
    }
    else {
      // Original page load
      $term = taxonomy_term_load($form['taxonomy_forums'][LANGUAGE_NONE]['#default_value'][0]);
    }
  }
  // Add the forum description to the form so users can see the description
  // for the forum they are considering posting to.
  $form['taxonomy_forums']['forum_description'] = array(
    '#prefix' => '<p><em>',
    '#suffix' => '</em></p>',
    '#markup' => filter_xss($term->description),
  );
}

/**
 * Ajax callback for the taxonomy forum selector in
 * drupalorg_form_alter when $form_id is equal to
 * forum_node_form
 *
 * @see drupalorg_form_alter()
 */
function drupalorg_taxonomy_forums_ajax_callback($form, &$form_state) {
  return $form['taxonomy_forums'];
}

/**
 * For login and registration pages, look for bakery's bd parameter and extract
 * site name.
 *
 * @param string $bd
 *   Use a specific bakery destination value instead of the URL parameter.
 */
function drupalorg_get_site_parameter($bd = NULL) {
  if (isset($bd) || ($bd = bakery_get_destination())) {
    $sites = drupalorg_crosssite_sites();
    $site = str_replace(variable_get('bakery_domain'), '', parse_url($bd[0], PHP_URL_HOST));
    if (isset($sites[$site])) {
      return $site;
    }
  }
  return FALSE;
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_user_login_alter(&$form) {
  // Do not autocapitalize on mobile browsers.
  $form['name']['#attributes']['autocapitalize'] = 'none';

  // Add additional text.
  $form['#suffix'] = '<div class="login-text">';
  if ($site = drupalorg_get_site_parameter()) {
    $sites = drupalorg_crosssite_sites();
    // Sub-site.
    $form['#suffix'] .= '<p>' . t('!site is a part of the Drupal.org ecosystem of sites. You need to have a Drupal.org account to log in to !site.', array(
      '!site' => $sites[$site],
    )) . '</p>';
  }
  else {
    // Drupal.org.
    $form['#suffix'] .= '<p>'. t('!site is a part of a larger ecosystem of sites. Using your !site account you can log in to <a href="@groups">Drupal Groups</a>, register for <a href="@drupalcon">DrupalCon</a>, become a <a href="@association">Drupal Association</a> member, get connected on <a href="@jobs">Drupal Jobs</a>, upload <a href="@localize">Drupal translations</a> and more.', array(
      '!site' => variable_get('site_name'),
      '@groups' => 'http://groups.drupal.org',
      '@drupalcon' => 'http://www.drupalcon.org',
      '@association' => 'http://www.drupal.org/association',
      '@jobs' => 'http://jobs.drupal.org',
      '@localize' => 'http://localize.drupal.org',
    )) . '</p>';
  }
  // Add the create account link.
  $form['#suffix'] .= '<p>' . t('Don\'t have an account? <a href="@register">Create one now</a>.', array(
    '@register' => url('user/register'),
  )). '</p>';
  $form['#suffix'] .= '</div>';

  // Make help more straightforward.
  $form['name']['#title'] = t('Username or email');
  unset($form['name']['#description']);
  unset($form['pass']['#description']);
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_user_register_form_alter(&$form) {
  // Ensure that wildcard email addresses are not abused.
  $form['#validate'][] = 'drupalorg_register_mail_validate';

  // Do not autocapitalize on mobile browsers.
  $form['account']['name']['#attributes']['autocapitalize'] = 'none';
  $form['account']['mail']['#attributes']['autocapitalize'] = 'none';

  // Hide the timezone field.
  if (isset($form['timezone'])) {
    $form['timezone']['#attributes']['class'][] = 'element-invisible';
  }

  // Hide empty fieldset.
  unset($form['#group_children']['group_name']);

  // Add field help text.
  if ($site = drupalorg_get_site_parameter()) {
    $sites = drupalorg_crosssite_sites();
    // Sub-site.
    $form['#prefix'] = '<p>' . t('When you create a Drupal.org account, you gain access to a whole ecosystem of Drupal.org sites and services. Your account works on Drupal.org and any of its subsites including !site.', array(
      '!site' => $sites[$site],
    )) . '</p>';
  }
  else {
    // Drupal.org.
    $form['#prefix'] = '<p>' . t('When you create a !site account, you gain access to a whole ecosystem of !site sites and services. Your account works on Drupal.org and any of its subsites including <a href="@groups">Drupal Groups</a>, <a href="@jobs">Drupal Jobs</a>, <a href="@association">Drupal Association</a> and more.', array(
      '!site' => variable_get('site_name'),
      '@groups' => 'https://groups.drupal.org',
      '@jobs' => 'https://jobs.drupal.org',
      '@association' => 'https://www.drupal.org/association',
    )) . '</p>';
  }

  // Make help more straightforward.
  $form['account']['name']['#description'] = t('Punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.');
  $form['account']['mail']['#title'] = t('Email');
  $form['account']['mail']['#description'] = t('Emails from Drupal.org will be sent to this address. This email address is not made public.');
  $form['account']['conf_mail']['#title'] = t('Confirm email');
  unset($form['account']['conf_mail']['#description']);
  unset($form['account']['pass']['#description']);

  // Redirect to a welcoming user edit page.
  $form['#submit'][] = 'drupalorg_user_register_form_submit';
}

/**
 * #submit callback, see drupalorg_form_user_profile_form_alter().
 */
function drupalorg_user_register_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'welcome';
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_multiple_email_manage_alter(&$form) {
  // Do not autocapitalize on mobile browsers.
  $form['new']['email']['#attributes']['autocapitalize'] = 'none';
}

/**
 * Impelements hook_form_FORM_BASE_alter().
 */
function drupalorg_form_comment_form_alter(&$form, &$form_state) {
  if (isset($form['field_attribute_contribution_to'])) {
    _drupalorg_alter_comment_attribution($form);
  }
}

/**
 * Disable aggregator feed blocks, there are so many that they overwhelm the
 * block admin UI.
 */
function drupalorg_form_aggregator_form_feed_alter(&$form) {
  $form['block']['#default_value'] = 0;
}

/**
 * Node form alter.
 */
function drupalorg_form_node_form_alter(&$form, &$form_state) {
  if (isset($form['#node']->title) && empty($form['#node']->nodechanges_in_block)) {
    drupal_set_title(t('Edit %title', ['%title' => $form['#node']->title]), PASS_THROUGH);
  }

  // Put log message at the top to encourage use of log messages.
  if (isset($form['revision_information'])) {
    $form['revision_information']['#weight'] = -100;

    // Hide revision fields on node add form.
    // @TODO Should be removed in D8 #308820.
    if (!isset($form['#node']->nid)) {
      $form['revision_information']['#access'] = FALSE;
    }
  }

  if (isset($form['nodechanges_comment'])) {
    if (isset($form['nodechanges_comment']['field_attribute_contribution_to'])) {
      _drupalorg_alter_comment_attribution($form['nodechanges_comment'], $form['#node']);
    }
  }

  // If this is a new node with OG Menu, put in the menu.
  if (!isset($form['#node']->nid) && isset($form['menu']) && isset($form['#node']->storage) && isset($form['#node']->storage['og_menu']) && isset($form_state['entityreference_prepopulate']['node']['documentation']['og_group_ref_documentation'][0])) {
    // But only if a guide maintainer with access to put it in the menu is
    // adding the page.
    foreach ($form['#node']->storage['og_menu'] as $item) {
      if ($item['gid'] == $form_state['entityreference_prepopulate']['node']['documentation']['og_group_ref_documentation'][0]) {
        $form['menu']['enabled']['#default_value'] = 1;
      }
    }
  }

  // If this is a documentation page or guide, only allow keeping one level of
  // menu hierarchy.
  if ($form['#node']->type === 'guide' || $form['#node']->type === 'documentation') {
    if (isset($form['menu'])) {
      // Only disable so og_menu JS is not confused.
      $form['menu']['link']['parent']['#element_validate'] = ['drupalorg_form_node_form_no_ancestry'];
    }

    // Keep things in English for now, path aliases and other things may not be
    // ready.
    if ($form['language']['#default_value'] === LANGUAGE_NONE) {
      $form['language']['#default_value'] = 'en';
    }

    if (!empty($form['#node']->nodechanges_in_block)) {
      // Add a message about becoming a guide maintainer.
      if ($form['#node']->type === 'guide' && !empty($_REQUEST['become-maintainer'])) {
        drupal_set_message(t('Use the “Suggest improvements” field to explain your interest in maintaining the guide. Webmasters will review your comment and may add you as a maintainer.'));
        if (drupalorg_user_is_confirmed($GLOBALS['user'])) {
          // Check if there are no maintainers, or the only maintainer is System Message.
          $wrapper = entity_metadata_wrapper('node', $form['#node']);
          $members = $wrapper->{'members__' . array_search('Active', og_group_content_states())};
          if (count($members) === 1 && $members[0]->getIdentifier() == 180064) {
            drupal_set_message(t('This guide is currently unmaintained. You can <a href="!url">become a maintainer immediately</a>.', ['!url' => url('node/' . $form['#node']->nid . '/drupalorg_maintain_guide/' . drupal_get_token('drupalorg_maintain_guide/' . $form['#node']->nid))]));
          }
        }
      }

      // Hide most fields.
      foreach (array_diff(element_children($form), ['field_documentation_status', 'nodechanges_comment', 'actions']) as $key) {
        if (in_array($form[$key]['#type'], ['textfield', 'container', 'fieldset', 'select'])) {
          $form[$key]['#access'] = FALSE;
        }
      }
      hide($form['actions']['preview_changes']);
      hide($form['actions']['delete']);

      // Appropriate title for comment field.
      $form['nodechanges_comment']['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Suggest improvements');

      // Redirect to /discuss page after commenting.
      $form['actions']['submit']['#submit'][] = 'drupalorg_form_documentation_node_form_submit';
    }
  }

  // Disregard destination for creating group content.
  if (isset($_GET['destination']) && ((isset($_GET['og_group_ref_documentation']) && $_GET['destination'] === 'node/' . $_GET['og_group_ref_documentation']) || (isset($_GET['og_group_ref']) && $_GET['destination'] === 'node/' . $_GET['og_group_ref']))) {
    $action = drupal_parse_url($form['#action']);
    unset($action['query']['destination']);
    $form['#action'] = url(ltrim($action['path'], '/'), $action);
  }

  // Add class 'prevent-multiple-submit-form' to node edit form.
  if (!empty($form['actions']['submit'])) {
    $form['#attached']['js'][] = drupal_get_path('module', 'drupalorg') . '/js/jquery.form-submit-single.js';
    $form['#attributes']['class'][] = 'prevent-multiple-submit-form';
  }
}

/**
 * Helper for drupalorg_form_node_form_alter() &
 * drupalorg_form_comment_form_alter() with issue comment attribution fields.
 */
function _drupalorg_alter_comment_attribution(&$element, $node = NULL) {
  $element['#attached']['js'][] = array('type' => 'setting', 'data' => array(
    'drupalOrg' => array(
      'defaultCommentAttribution' => '<span>' . t('<strong>@name</strong> at organization <a href="#" class="organization">not applicable</a> for customer <a href="#" class="customer">not applicable</a>', array('@name' => empty($element['#entity']->name) ? $GLOBALS['user']->name : $element['#entity']->name)) . '</span>',
    ),
  ));
  // Load last comment for default values. This feature was enabled at 1426194356.
  if (!is_null($node) && ($cid = db_query_range('SELECT cid FROM {comment} c INNER JOIN {node} n ON n.nid = c.nid AND n.type IN (:issue_types) AND n.status = :node_published WHERE c.status = :comment_published AND c.uid = :uid AND c.created > 1426194356 ORDER BY c.nid = :nid DESC, c.cid DESC', 0, 1, array(':issue_types' => project_issue_issue_node_types(), ':node_published' => NODE_PUBLISHED, ':comment_published' => COMMENT_PUBLISHED, ':uid' => $GLOBALS['user']->uid, ':nid' => $node->nid))->fetchField())) {
    $wrapper = entity_metadata_wrapper('comment', comment_load($cid));
    if ($wrapper->field_attribute_as_volunteer->raw()) {
      $element['field_attribute_as_volunteer'][LANGUAGE_NONE]['#default_value'] = $wrapper->field_attribute_as_volunteer->raw();
    }
    $element['field_attribute_contribution_to'][LANGUAGE_NONE]['#default_value'] = $wrapper->field_attribute_contribution_to->raw();
    $customer_default = array();
    foreach ($wrapper->field_for_customer as $customer) {
      if ($customer->value()) {
        $customer_default[] = drupalorg_entityreference_string($customer->getIdentifier(), $customer->title->value());
      }
    }
    $element['field_for_customer'][LANGUAGE_NONE]['#default_value'] = implode(', ', $customer_default);
  }
  // Hide titles.
  $element['field_attribute_contribution_to'][LANGUAGE_NONE]['#title_display'] = 'attribute';
  $element['field_for_customer'][LANGUAGE_NONE]['#title_display'] = 'invisible';
  // Close buttons for accessibility.
  $element['field_attribute_contribution_to'][LANGUAGE_NONE]['#description'] .= '<button class="element-invisible">' . t('Close @title', array('@title' => $element['field_attribute_contribution_to'][LANGUAGE_NONE]['#title'])) .'</button>';
  $element['field_for_customer'][LANGUAGE_NONE]['#description'] .= '<button class="element-invisible">' . t('Close @title', array('@title' => $element['field_for_customer'][LANGUAGE_NONE]['#title'])) .'</button>';
  // Add customer suggestions.
  $view = views_get_view('drupal_org_user_customers');
  $view->set_display('entityreference_1');
  $view->display_handler->set_option('entityreference_options', array(
    'match' => NULL,
    'match_operator' => 'CONTAINS',
    'limit' => 0,
    'ids' => array(),
  ));
  $element['field_for_customer'][LANGUAGE_NONE]['#prefix'] = '<strong class="element-invisible">' . t('Attribute comment for customer') . '</strong>';
  foreach ($view->execute_display('entityreference_1') as $nid => $title) {
    $element['field_for_customer'][LANGUAGE_NONE]['#prefix'] .= '<div><a href="#" class="customer-suggestion" data-string="' . check_plain(drupalorg_entityreference_string($nid, $title)) . '">' . t('<span class="element-invisible">Add customer </span>@title', array('@title' => trim($title))) . '</a></div>';
  }
  $element['field_for_customer'][LANGUAGE_NONE]['#prefix'] .= '<div class="description">' . t('New customers need an <a href="/node/add/organization">organization page</a>.') . '</div>';
}

/**
 * Element validate callback, make sure menu hierarchy is not used.
 */
function drupalorg_form_node_form_no_ancestry($element) {
  if (!preg_match('/:0$/', $element['#value'])) {
    form_error($element, t('Menu hierarchy is not allowed in documentation.'));
  }
}

/**
 * Form submit callback, see drupalorg_form_documentation_node_form_alter().
 */
function drupalorg_form_documentation_node_form_submit($form, &$form_state) {
  $form_state['redirect'][0] .= '/discuss';
}

/**
 * Helper function to format strings like "Drupal Association (1646370)"
 *
 * @see entityreference_autocomplete_callback_get_matches().
 */
function drupalorg_entityreference_string($id, $title) {
  $key = $title . " (" . $id . ')';
  // Strip things like starting/trailing white spaces, line breaks and tags.
  $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
  // Names containing commas or quotes must be wrapped in quotes.
  if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
    $key = '"' . str_replace('"', '""', $key) . '"';
  }
  return $key;
}

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER(:tomatch)", array(':tomatch' => $match[1] . '+%%@' . $match[3]))->fetchField() > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Implements hook_form_FORM_BASE_alter().
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  // Immediately return if there are no values.
  if (!isset($form_state['values']['field_organizations'][LANGUAGE_NONE])) {
    return;
  }

  // Remove empty organizations.
  foreach ($form_state['values']['field_organizations'][LANGUAGE_NONE] as $delta => $organization) {
    // Do not attempt looking at the add more element, look for empty name and
    // title.
    if (is_numeric($delta) && empty($organization['field_organization_name'][LANGUAGE_NONE][0]['value']) && empty($organization['field_job_title'][LANGUAGE_NONE][0]['value'])) {
      unset($form_state['values']['field_organizations'][LANGUAGE_NONE][$delta]);
    }
  }
}

/**
 * Perform a case-insensitive check on usernames to prevent duplicates.
 *
 * @see user_account_form()
 * @see user_account_form_validate()
 * @see http://drupal.org/node/1034852
 */
function drupalorg_username_validate($form, &$form_state) {
  // Do not attempt to validate secondary profile forms
  if (!isset($form_state['values']['name'])) {
    return;
  }
  $account = $form['#user'];
  $name = $form_state['values']['name'];
  $existing_name = $account->uid > 0 ? $account->name : FALSE;
  // Only check if there isn't an existing error, to prevent confusion.
  if (!empty($name) && ($existing_name !== $name) && !form_get_error($form['account']['name'])) {
    // Check for duplicate usernames. This is taken from
    // user_account_form_validate(), but converts names to lowercase first.
    if ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->where('LOWER(name) LIKE :name', array(':name' => db_like(strtolower($name))))->range(0, 1)->execute()->fetchField()) {
      form_set_error('name', t('The name %name is already taken.', array('%name' => $name)));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for Guide node form.
 */
function drupalorg_form_guide_node_form_alter(&$form) {
  // Lock down Guide field if user does not have access to create top level Guides.
  if (!isset($form['#node']->nid) && node_node_access('guide', 'create', $GLOBALS['user']) === NODE_ACCESS_IGNORE) {
    $form['og_group_ref_documentation'][LANGUAGE_NONE][0]['target_id']['#disabled'] = TRUE;
    if (empty($form['og_group_ref_documentation'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
      drupal_set_message(t('Guides must be added within an existing guide you maintain.'), 'error');
      $form['#access'] = FALSE;
    }
  }

  // Allow admins to create stand-alone guides.
  if (user_access('administer group')) {
    $form['og_group_ref_documentation'][LANGUAGE_NONE][0]['target_id']['#required'] = FALSE;
  }

  // If a valid project to add the guide to is set, stash it in the node object.
  if (isset($_REQUEST['project']) && ($project = node_load((int) $_REQUEST['project'])) && project_node_is_project($project)) {
    $form['title']['#default_value'] = $project->title;
    $form['#node']->drupalorg_add_to_project = $project->nid;
  }

  // Limit guide description length.
  $form['body'][LANGUAGE_NONE][0]['#maxlength'] = 1000;
}

/**
 * Implements hook_form_FORM_ID_alter() for Organization node form.
 */
function drupalorg_form_organization_node_form_alter(&$form) {
  $form['title']['#element_validate'] = ['drupalorg_validate_unique_title'];
}

/**
 * Element validate callback, make sure organization title is unique.
 *
 * @see drupalorg_form_organization_node_form_alter()
 */
function drupalorg_validate_unique_title($element) {
  if ($element['#value'] !== $element['#default_value']) {
    $query = new EntityFieldQuery();
    $count = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'organization')
      ->propertyCondition('title', $element['#value'])
      ->count()->execute();
    if ($count) {
      form_error($element, t('An organization named %title already exists.', ['%title' => $element['#value']]));
    }
  }
}

/**
 * Implements hook_search_info().
 *
 * Defines an IRC nickname search.
 */
function drupalorg_search_info() {
  return array(
    'title' => t('IRC nicks'),
  );
}

/**
 * Implements hook_search_access().
 *
 * Limits access to people who can access user profiles for the IRC nickname
 * search.
 */
function drupalorg_search_access() {
  return user_access('access user profiles');
}

/**
 * Implements hook_search_execute().
 *
 * Performs the search for IRC nicknames.
 */
function drupalorg_search_execute($keys = NULL, $conditions = NULL) {
  // Replace wildcards with MySQL/PostgreSQL wildcards.
  $keys = '%' . preg_replace('!\*+!', '%', $keys) . '%';

  $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_irc_nick', 'value', $keys, 'LIKE')
    ->pager(15)
    ->propertyOrderBy('name');

  $result = $query->execute();

  $find = array();

  if (isset($result['user'])) {
    foreach (user_load_multiple(array_keys($result['user'])) as $account) {
      $find[] = array(
        'title' => $account->name,
        'link' => url('user/' . $account->uid),
      );
    }
  }

  return $find;
}

/**
 * Implements hook_views_api().
 */
function drupalorg_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'drupalorg'),
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function drupalorg_views_default_views_alter(&$views) {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'drupalorg') . '/drupalorg.views_default.inc';
  _drupalorg_views_default_views_alter($views);
}

/**
 * Default dashboard content.
 */
function drupalorg_homebox() {
  return array(
    'dashboard' => array(
      'title' => 'My dashboard',
      'path' => 'dashboard',
      'menu' => 1,
      'enabled' => 1,
      'auto_save' => 1,
      'regions' => 3,
      'cache' => 1,
      'full' => 0,
      'custom' => 0,
      'roles' => array(
        0 => 'authenticated user',
      ),
      'color' => 0,
      'colors' => array(
        0 => '#e4f0f8',
        1 => '#c4d5b4',
        2 => '#ecc189',
        3 => '#ec8989',
        4 => '#6b6b70',
        5 => '#4b97e5',
      ),
      'widths' => array(1 => 0, 2 => 0, 3 => 0),
      'blocks' => array(
        // Column 1
        'drupalorg_news_drupal-news' => array(
          'module' => 'drupalorg_news',
          'delta' => 'drupal-news',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -33,
        ),
        'aggregator_category-1' => array(
          'module' => 'aggregator',
          'delta' => 'category-1',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Drupal talk',
          'weight' => -31,
        ),
        'aggregator_category-2' => array(
          'module' => 'aggregator',
          'delta' => 'category-2',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Planet Drupal',
          'weight' => -31,
        ),
        // Column 2
        'drupalorg_tracker_user' => array(
          'module' => 'drupalorg',
          'delta' => 'tracker_user',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Posts',
          'weight' => 1,
        ),
        'views_1764f77afedbacb7539d78cc3f1d414f' => array(
          'module' => 'views',
          'delta' => '1764f77afedbacb7539d78cc3f1d414f',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Issues',
          'weight' => 2,
        ),
        // Column 3
        'project_issue_issue_cockpit' => array(
          'module' => 'project_issue',
          'delta' => 'issue_cockpit',
          'nid' => DRUPALORG_CORE_NID,
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -32,
        ),
        'drupalorg_project_bingo-block' => array(
          'module' => 'drupalorg_project',
          'delta' => 'bingo-block',
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
        // Available for enabling
        'menu_menu-documentation-t' => array(
          'module' => 'menu',
          'delta' => 'menu-documentation-t',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Documentation Team links',
          'weight' => -7,
        ),
        'drupalorg_security_issues' => array(
          'module' => 'drupalorg',
          'delta' => 'security_issues',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Security Issues',
          'weight' => 0,
        ),
        'views_32e7c65bac9dbae3eee1572e8b7a9483' =>
          array (
            'module' => 'views',
            'delta' => '32e7c65bac9dbae3eee1572e8b7a9483',
            'region' => 1,
            'movable' => 1,
            'status' => 0,
            'open' => 1,
            'closable' => 1,
            'title' => 'Security Advisories for Drupal core',
            'weight' => 0,
          ),
        'views_8c73e7a3d634393e1980697b5e160df7' =>
          array (
            'module' => 'views',
            'delta' => '8c73e7a3d634393e1980697b5e160df7',
            'region' => 1,
            'movable' => 1,
            'status' => 1,
            'open' => 1,
            'closable' => 1,
            'title' => 'All Security Advisories and Announcements',
            'weight' => -32,
          ),
        'views_90684096e587b35d0dfab2580896b361' =>
          array (
            'module' => 'views',
            'delta' => '90684096e587b35d0dfab2580896b361',
            'region' => 1,
            'movable' => 1,
            'status' => 0,
            'open' => 1,
            'closable' => 1,
            'title' => 'Security Advisories for contributed projects',
            'weight' => 0,
          ),
        'views_27b26a3690773e7693ca6ac30f6dbd5e' =>
          array (
            'module' => 'views',
            'delta' => '27b26a3690773e7693ca6ac30f6dbd5e',
            'region' => 1,
            'movable' => 1,
            'status' => 0,
            'open' => 1,
            'closable' => 1,
            'title' => 'Security Public Service Announcements',
            'weight' => 0,
          ),
      ),
    ),
  );
}

function drupalorg_ad_settings_form() {
  $form = array();

  $form['drupalorg_ci_ad'] = [
    '#type' => 'textarea',
    '#title' => t('DrupalCI'),
    '#default_value' => variable_get('drupalorg_ci_ad'),
    '#description' => t('Appears on issue pages with releases. Template: <code>@example</code>', [
      '@example' => '<a href="{url}" class="ci-ad">{blurb} <img src="{use a relatively-small image, like the grid-2 on user pages}" alt="{organization name}"> <strong>Learn more</strong></a>',
    ]),
  ];

  $slots = array_merge(array(0 => t('No ad')), _google_admanager_get_ad_slots());
  $ads = variable_get('drupalorg_forum_ad', array());
  $form['drupalorg_forum_ad'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forum ads'),
    '#description' => t('Configure available <a href="!url">ad units</a>', array('!url' => url('admin/config/system/google_admanager'))),
    '#tree' => TRUE,
  );
  foreach (taxonomy_get_tree(1) as $term) {
    $form['drupalorg_forum_ad'][$term->tid] = array(
      '#type' => 'select',
      '#title' => check_plain($term->name),
      '#options' => $slots,
      '#default_value' => isset($ads[$term->tid]) ? $ads[$term->tid] : 0,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_node_access().
 */
function drupalorg_node_access($node, $op, $account) {
  if ($op == 'update') {
    // The documentation team lock pages by setting the body filter format to
    // a format which only privileged accounts have access to. This behaviour
    // worked in D6 but not D7, so we need to workaround this by restricting
    // node editing access based on the body filter format.
    // @see http://drupal.org/node/1824490
    if (isset($node->body)) {
      foreach ($node->body as $langcode => $items) {
        foreach ($items as $delta => $item) {
          // filter_access() only checks the ->format member, which $item
          // provides, so using it directly saves calling filter_format_load().
          if (!filter_access((object)$item, $account)) {
            // The user doesn't have permissions to use the body filter format,
            // so deny access to edit the page.
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }

  if ($op !== 'view') {
    $type = is_string($node) ? $node : $node->type;

    // For documentation pages in guides, strengthen core node access to deny
    // instead of ignore for lack of permission. Users must have both the
    // required roles and group membership, if any. For example,
    // documentatation pages have restrictions from node_node_access(), but do
    // not require documentation guide membership to edit.
    if (($type === 'documentation' || ($type === 'guide' && $op === 'update')) && node_node_access($node, $op, $account) === NODE_ACCESS_IGNORE) {
      return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function drupalorg_node_view($node, $view_mode = 'full') {
  // Handle Marketplace nodes taxonomy.
  if ($node->type === 'organization') {
    $wrapper = entity_metadata_wrapper('node', $node);

    // People on Drupal.org.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'field_collection_item')
      ->fieldCondition('field_organization_reference', 'target_id', $node->nid)
      ->fieldCondition('field_current', 'value', 1);
    $result = $query->execute();
    if (!empty($result['field_collection_item'])) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_organizations', 'value', array_keys($result['field_collection_item']));
      $people_on_drupalorg = format_plural($query->count()->execute(),
        '<a href="!link">@count person</a> <small>on Drupal.org</small>',
        '<a href="!link">@count people</a> <small>on Drupal.org</small>',
        ['!link' => url('node/' . $node->nid . '/users')]
      );
    }

    if ($view_mode === 'teaser') {
      // Use organization's name if there is no logo.
      if (!$wrapper->field_logo->value()) {
        $node->content['field_logo'] = array(
          '#prefix' => '<h2 class="field-name-field-logo">',
          '#markup' => l($node->title, 'node/' . $node->nid),
          '#suffix' => '</h2>',
        );
      }

      $node->content['drupalorg_organization_contributions'] = [
        '#prefix' => '<div class="contributions">',
        '#suffix' => '</div>',
      ];

      if (isset($people_on_drupalorg)) {
        $node->content['drupalorg_organization_contributions']['users'] = [
          '#prefix' => '<div>',
          '#markup' => $people_on_drupalorg,
          '#suffix' => '</div>',
        ];
      }


      // Projects supported.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'field_collection_item')
        ->fieldCondition('field_supporting_organization', 'target_id', $node->nid);
      if ($count = $query->count()->execute()) {
        $node->content['drupalorg_organization_contributions']['projects'] = array(
          '#prefix' => '<div>',
          '#markup' => format_plural($count,
            '<a href="!link">@count project</a> <small>supported</small>',
            '<a href="!link">@count projects</a> <small>supported</small>',
            array('!link' => url('node/' . $node->nid, array('fragment' => 'projects-supported')))
          ),
          '#suffix' => '</div>',
        );
      }

      // Issue credits.
      if ($count = $wrapper->field_org_issue_credit_count->value()) {
        $node->content['drupalorg_organization_contributions']['issue_credits'] = array(
          '#prefix' => '<div>',
          '#markup' => format_plural($count,
            '<a href="!link">@count issue credit</a> <small>in the last 90 days</small>',
            '<a href="!link">@count issue credits</a> <small>in the last 90 days</small>',
            array('!link' => url('node/' . $node->nid, array('fragment' => 'issue-credit')))
          ),
          '#suffix' => '</div>',
        );
      }

      // Case studies.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'casestudy')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_case_organizations', 'target_id', $node->nid);
      if ($count = $query->count()->execute()) {
        $node->content['drupalorg_organization_contributions']['case_studies'] = array(
          '#prefix' => '<div>',
          '#markup' => format_plural($count,
            '<a href="!link">@count case study</a>',
            '<a href="!link">@count case studies</a>',
            array('!link' => url('node/' . $node->nid . '/case-studies'))
          ),
          '#suffix' => '</div>',
        );
      }
    }
    elseif ($view_mode == 'full') { // Full page
      global $user;

      $content = array(
        'intro' => array(
          '#prefix' => '<div class="intro">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
        ),
        'main' => array(
          '#prefix' => '<div class="main">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
          '#weight' => 1,
        ),
        'aside' => array(
          '#prefix' => '<div class="aside">',
          '#suffix' => '</div>',
          '#sorted' => TRUE,
          '#weight' => 2,
        ),
      );

      // Organisation logo.
      $field_items = field_get_items('node', $node, 'field_logo');
      if (!empty($field_items)) {
        $content['intro']['logo'] = field_view_value('node', $node, 'field_logo', $field_items[0]);
        $content['intro']['logo']['#image_style'] = 'grid-3';
      }

      // Organisation website.
      $field_items = field_get_items('node', $node, 'field_link');
      $content['intro']['link'] = field_view_value('node', $node, 'field_link', $field_items[0]);

      $info = [];

      if (isset($people_on_drupalorg)) {
        $info[''] = '<strong>' . $people_on_drupalorg . '</strong>';
      }

      // Terms - sector, service, budget
      foreach (['taxonomy_vocabulary_48', 'taxonomy_vocabulary_50', 'taxonomy_vocabulary_52'] as $field) {
        if ($values = $wrapper->{$field}->value()) {
          $info[$wrapper->{$field}->info()['label']] = implode(', ', array_map('drupalorg_generate_marketplace_link', $values));
        }
      }
      if ($value = $wrapper->field_organization_type->label()) {
        $info[$wrapper->field_organization_type->info()['label']] = $value;
      }

      // Headquarters.
      if ($wrapper->field_organization_headquarters->value()) {
        $info[t('Headquarters')] = $wrapper->field_organization_headquarters->value(array('sanitize' => TRUE));
      }
      // Budget may be replaced by taxonomy, see #371966
      if ($wrapper->field_budget->value()) {
        $info[t('Usual project budget')] = $wrapper->field_budget->value(array('sanitize' => TRUE));
      }

      // Security review results
      if ($wrapper->field_organization_security->value()) {
        $info[t('Security review')] = $wrapper->field_organization_security->value(array('sanitize' => TRUE));
      }

      $content['intro']['info'] = array(
        '#prefix' => '<dl>',
        '#suffix' => '</dl>',
        '#sorted' => TRUE,
      );
      foreach ($info as $label => $data) {
        $content['intro']['info'][] = array(
          '#markup' => '<dt>' . $label . '</dt><dd>' . render($data) . '</dd>',
        );
      }

      // Association membership
      if (drupalorg_has_civimembership($node->title, 'Signature Supporting Partner')) {
        $content['intro']['association_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_sig_sup_partner_badge.svg',
              'alt' => t('Drupal Association Signature Supporting Partner badge'),
            )), 'https://www.drupal.org/association/programs/supporting-partner', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Signature Supporting Partner'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Supporting Partner Premium')) {
        $content['intro']['association_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_sp_badge.svg',
              'alt' => t('Drupal Association Premium Supporting Partner badge'),
            )), 'https://www.drupal.org/association/programs/supporting-partner', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Supporting Partner'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Supporting Partner')) {
        $content['intro']['association_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_sup_partner_badge.svg',
              'alt' => t('Drupal Association Supporting Partner badge'),
            )), 'https://www.drupal.org/association/programs/supporting-partner', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Supporting Partner'),
            ),
          ))
        );
      }
      // Technology Supporter
      if (drupalorg_has_civimembership($node->title, 'Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_badge.svg',
              'alt' => t('Drupal Association Technology Supporter badge'),
            )), 'https://www.drupal.org/association/programs/technology-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Premium Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_tech_sp_badge.svg',
              'alt' => t('Drupal Association Premium Technology Supporter badge'),
            )), 'https://www.drupal.org/association/programs/technology-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Inaugural Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_inaug_badge.svg',
              'alt' => t('Drupal Association Inaugural Technology Supporter badge'),
            )), 'https://www.drupal.org/association/programs/technology-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Inaugural Technology Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Inaugural Premium Technology Supporter')) {
        $content['intro']['association_technology_supporter'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_techsupp_inaug_badge.svg',
              'alt' => t('Drupal Association Inaugural Premium Technology Supporter badge'),
            )), 'https://www.drupal.org/association/programs/technology-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Inaugural Premium Technology Supporter'),
            ),
          ))
        );
      }
      if (drupalorg_has_civimembership($node->title, 'Hosting Supporter')) {
        $content['intro']['association_hosting_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_host_supp.svg',
              'alt' => t('Drupal Association Hosting Supporter badge'),
            )), 'https://www.drupal.org/association/programs/hosting-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Hosting Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Premium Hosting Supporter')) {
        $content['intro']['association_hosting_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_prem_host_supp.svg',
              'alt' => t('Drupal Association Premium Hosting Supporter badge'),
            )), 'https://www.drupal.org/association/programs/hosting-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Premium Hosting Supporter'),
            ),
          ))
        );
      }
      elseif (drupalorg_has_civimembership($node->title, 'Signature Hosting Supporter')) {
        $content['intro']['association_hosting_partner'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_hosting_signature_badge.svg',
              'alt' => t('Drupal Association Signature Hosting Supporter badge'),
            )), 'https://www.drupal.org/association/programs/hosting-supporter', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Signature Hosting Supporter'),
            ),
          ))
        );
      }

      if (drupalorg_has_civimembership($node->title, 'Organization')) {
        $content['intro']['association_membership'] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_org_member_badge.svg',
              'alt' => t('Drupal Association Organization Member badge'),
            )), 'https://www.drupal.org/association/membership/organization', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association Organization Member'),
            ),
          ))
        );
      }

      $content['main']['body'] = $node->content['body'];

      $contributions = $wrapper->field_contributions->value();
      if (isset($contributions['value']) && !empty($contributions['value'])) {
        $content['main']['contributions_heading'] = array('#markup' => '<h3>' . t('Drupal contributions') . '</h3>');
        if (isset($node->content['field_contributions'])) {
          $content['main']['contributions'] = $node->content['field_contributions'];
        }
      }

      // Projects supported.
      $view = views_get_view('drupalorg_organization_supported_projects');
      $view->preview(NULL, array($node->nid));
      if (isset($view->style_plugin->rendered_fields)) {
        $projects = array();
        foreach ($view->style_plugin->rendered_fields as $row) {
          $projects[] = $row['title'];
        }
        $content['main']['contributions_projects'] = array(
          '#prefix' => '<h4 id="projects-supported">' . t('Projects supported') .  '</h4>',
          '#markup' => '<p>' . implode(', ', $projects) . '</p>',
        );
      }

      // Issue credit.
      $view = views_get_view('issue_credit');
      $view->set_item_option('organization_recent', 'filter', 'field_attribute_contribution_to_target_id', 'value', array('value' => $node->nid));
      $view->set_item_option('organization_recent', 'filter', 'field_for_customer_target_id', 'value', array('value' => $node->nid));
      $content['main']['drupalorg_organization_issue_credit'] = array(
        '#markup' => $view->preview('organization_recent'),
      );
      $issues = 0;
      foreach ($view->result as $row) {
        $issues += $row->nid;
      }
      if ($issues > 0) {
        $filter = $view->get_item('organization_recent', 'filter', 'changed_1');
        $content['main']['drupalorg_organization_issue_credit']['#prefix'] = '<h4 id="issue-credit">' . format_plural($issues, 'Credited on 1 issue fixed in the past @time', 'Credited on @count issues fixed in the past @time', array('@time' => ltrim($filter['value']['value'], '-'))) . '</h4>';
      }

      // Training fields
      if (!empty($node->field_organization_training_desc[LANGUAGE_NONE][0]['value'])) {
        $content['main']['training_heading'] = array('#markup' => '<h3>' . t('Training') . '</h3>');
        $content['main']['training_url'] = $node->content['field_organization_training_url'];
        $content['main']['training_desc'] = $node->content['field_organization_training_desc'];
      }

      // Case studies.
      $view = views_get_view('organization_case_studies');
      $content['aside']['case_studies']['#markup'] = $view->preview('block_1', [$node->nid]);

      $node->content = $content;

      // Highlight a Service provider above the organization page.
      switch ($node->field_organization_list_rule[LANGUAGE_NONE][0]['value']) {
        case 'all-providers':
        case 'featured':
          drupal_set_message(t('This organization is a <a href="!listing">Drupal services provider</a>.', array('!listing' => url('drupal-services'))), 'status');
          break;
      }

      // Highlight a Training provider above the organization page.
      if (!empty($node->field_organization_training_list[LANGUAGE_NONE][0]['value']) && $node->field_organization_training_list[LANGUAGE_NONE][0]['value'] == 'on') {
        drupal_set_message(t('This organization is a <a href="!listing">Drupal training provider</a>.', array('!listing' => url('training'))), 'status');
      }

      // For organizations that request a services listing or training
      // listing, show a link to their issue for the node owner and admins.
      if (($node->uid === $user->uid || user_access('administer nodes'))) {
        if (($node->field_org_marketplace_request[LANGUAGE_NONE][0]['value'] == '1') && !empty($node->field_org_services_issue[LANGUAGE_NONE][0]['target_id'])) {
          drupal_set_message(t('Regarding <em>Services listing</em> communicate with webmasters using <a href="!issue">this issue</a>.', array('!issue' => url('node/' . $node->field_org_services_issue[LANGUAGE_NONE][0]['target_id']))), 'status');
        }
        if (!empty($node->field_org_training_request) && ($node->field_org_training_request[LANGUAGE_NONE][0]['value'] == '1') && !empty($node->field_org_train_issue[LANGUAGE_NONE][0]['target_id'])) {
          drupal_set_message(t('Regarding <em>Training listing</em> communicate with webmasters using <a href="!issue">this issue</a>.', array('!issue' => url('node/' . $node->field_org_train_issue[LANGUAGE_NONE][0]['target_id']))), 'status');
        }
      }
    }
  }
  elseif ($node->type === 'casestudy') {
    $breadcrumb = [l(t('Case studies'), 'case-studies')];
    $status = field_get_items('node', $node, 'field_status');
    if ($status[0]['value'] === 'Featured') {
      $breadcrumb[] = l(t('Featured showcase'), 'case-studies/featured');
    }
    elseif ($status[0]['value'] === 'Community') {
      $breadcrumb[] = l(t('Community showcase'), 'case-studies/community');
    }
    drupal_set_breadcrumb($breadcrumb);
  }
  elseif ($node->type === 'sa') {
    $wrapper = entity_metadata_wrapper('node', $node);

    if ($wrapper->field_project->value()->nid == 807766) {
      // “securitydrupalorg” project for PSAs.
      hide($node->content['field_project']);
    }
    $node->content['drupalorg_sa_date'] = [
      '#theme' => 'field',
      '#title' => t('Date'),
      '#label_display' => 'inline',
      '#field_name' => 'drupalorg_sa_date',
      '#field_type' => 'text',
      '#bundle' => $node->type,
      '#items' => [[]],
      [
        '#markup' => format_date($node->created, 'custom', 'Y-F-d', variable_get('date_default_timezone', @date_default_timezone_get())),
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_node.
 */
function drupalorg_preprocess_node(&$v) {
  // Don't display 'Submitted by' text on 'Related content' view mode
  if ($v['view_mode'] === 'related_content') {
    $v['display_submitted'] = FALSE;
  }
}

/**
 * Implements hook_comment_view().
 */
function drupalorg_comment_view($comment, $view_mode, $langcode) {
  // Use fasttoggle 'publish' link instead of the core approve link.
  unset($comment->content['links']['comment']['#links']['comment-approve']);

  // Do not show reply links on every Guide & Documentation comment.
  if ($comment->node_type === 'comment_node_guide' || $comment->node_type === 'comment_node_documentation') {
    unset($comment->content['links']['comment']['#links']['comment-reply']);
  }
}

/**
 * Generate an URL for the marketplace term.
 *
 * @param $term
 *   A taxonomy term object.
 *
 * @return
 *   String, a l() link.
 */
function drupalorg_generate_marketplace_link($term) {
  $vocabulary = taxonomy_vocabulary_load($term->vid);

  // Set the default to 'all', we need this for the URL creation later on.
  $default_args = array(
    'Services' => 'all',
    'Sectors' => 'all',
    'Locations' => 'all',
  );

  $term_arg = array($vocabulary->name => str_replace(' ', '-', $term->name));

  // The Marketplace URL starts with 'drupal-services'.
  $link = 'drupal-services';

  // Terms in order, truncating trailing '/all'.
  $link .= '/' . preg_replace('!(/all)*$!', '', implode('/', array_merge($default_args, $term_arg)));

  return l($term->name, $link);
}

/**
 * Create issue for organizations requesting services or training listing
 */
function drupalorg_org_request_issue($node) {
  $changed = FALSE;
  // If an organization wants to be listed in the Services section of the Marketplace.
  if (($node->field_org_marketplace_request[LANGUAGE_NONE][0]['value'] == '1') && empty($node->field_org_services_issue[LANGUAGE_NONE][0]['target_id'])) {
    // A new organization has been posted, create an issue to coordinate review.
    $issue = new stdClass();
    $issue->type = 'project_issue';
    $issue->uid = $node->uid;
    $issue->language = LANGUAGE_NONE;
    $issue->status = 1;
    $issue->title = t('Review @title for Drupal Services listing', array('@title' => $node->title));
    $issue->body[LANGUAGE_NONE][] = array(
      'value' => t('!link has requested to be included in !services section of the Marketplace.

This issue was generated automatically. To be included, the page must meet these !guidelines. A review by 2 or more community members is needed to add this page to the listing.

Want to help review? Here is how to do it: https://drupal.org/node/1710338',
       array('!link' => l($node->title, 'node/' . $node->nid), '!services' => l(t('Drupal Services'), 'drupal-services'), '!guidelines' => l(t('guidelines'), 'marketplace/guidelines/services'))),
       'format' => filter_default_format(),
    );
    $issue->field_project[LANGUAGE_NONE][]['target_id'] = 1848824;  // Content project, http://drupal.org/project/content
    $issue->field_project[LANGUAGE_NONE][]['target_type'] = 'node';
    $issue->field_issue_priority[LANGUAGE_NONE][]['value'] = 200;  // normal
    $issue->field_issue_status[LANGUAGE_NONE][]['value'] = 8;  // needs review
    $issue->field_issue_component[LANGUAGE_NONE][]['value'] = 'Services listing';
    $issue->field_issue_category[LANGUAGE_NONE][]['value'] = 2; //task
    $issue->comment = 2; // read & write
    node_save($issue);

    // Save the issue's nid for the organization.
    $node->field_org_services_issue[LANGUAGE_NONE][0]['target_id'] = $issue->nid;
    $changed = TRUE;
  }
  // If an organization wants to be listed in the Training section of the Marketplace.
  if (($node->field_org_training_request[LANGUAGE_NONE][0]['value'] == '1') && empty($node->field_org_train_issue[LANGUAGE_NONE][0]['target_id'])) {
    // A new organization has been posted, create an issue to coordinate review.
    $issue = new stdClass();
    $issue->type = 'project_issue';
    $issue->uid = $node->uid;
    $issue->language = LANGUAGE_NONE;
    $issue->status = 1;
    $issue->title = t('Add @title to the Training section', array('@title' => $node->title));
    $issue->body[LANGUAGE_NONE][] = array(
      'value' => t('!link has requested to be included in the !training of the Marketplace.

This issue was generated automatically. To be included, the page must meet these !guidelines. A review by 2 or more community members is needed to add this page to the listing.

Want to help review? Here is how to do it: https://drupal.org/node/1735864',
       array('!link' => l($node->title, 'node/' . $node->nid), '!training' => l(t('Training section'), 'training'), '!guidelines' => l(t('guidelines'), 'marketplace/guidelines/training'))),
      'format' => filter_default_format(),
    );
    $issue->field_project[LANGUAGE_NONE][]['target_id'] = 1848824;  // Content project, http://drupal.org/project/content
    $issue->field_project[LANGUAGE_NONE][]['target_type'] = 'node';
    $issue->field_issue_priority[LANGUAGE_NONE][]['value'] = 200;  // normal
    $issue->field_issue_status[LANGUAGE_NONE][]['value'] = 8;  // needs review
    $issue->field_issue_component[LANGUAGE_NONE][]['value'] = 'Training listing';
    $issue->field_issue_category[LANGUAGE_NONE][]['value'] = 2; //task
    $issue->comment = 2; // read & write
    node_save($issue);

    // Save the issue's nid for the organization.
    $node->field_org_train_issue[LANGUAGE_NONE][0]['target_id'] = $issue->nid;
    $changed = TRUE;
  }
  if ($changed) {
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function drupalorg_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  if ($entity_type === 'node' && $entity->type === 'changenotice' && $entity->field_impacts[LANGUAGE_NONE][0]['value'] === '') {
    // List of integer field needs to be really empty instead of an empty
    // string; that would raise an exception since '' is not an int. Likely is
    // a core bug we are working around.
    unset($entity->field_impacts[LANGUAGE_NONE][0]);
  }
}

/**
 * Implements hook_node_insert().
 */
function drupalorg_node_insert($node) {
  if ($node->type === 'organization') {
    drupalorg_org_request_issue($node);
  }
  elseif (project_issue_node_is_issue($node)) {
    // Save initial issue comment.
    $node = node_load($node->nid, NULL, TRUE);
    $node->nodechanges_comment['comment_body'][LANGUAGE_NONE][0] = array(
      'value' => t('!name created an issue.', array(
        '!name' => theme('username', array('account' => $node)),
      )),
      'format' => filter_default_format(),
    );
    $node->nodechanges_comment_attributes = array(
      'project_issue_no_email' => TRUE,
    );
    // Copy attribution from the user’s last comment.
    if ($cid = db_query_range('SELECT cid FROM {comment} c INNER JOIN {node} n ON n.nid = c.nid AND n.type IN (:issue_types) AND n.status = :node_published WHERE c.status = :comment_published AND c.uid = :uid AND c.created > 1426194356 ORDER BY c.cid DESC', 0, 1, array(':issue_types' => project_issue_issue_node_types(), ':node_published' => NODE_PUBLISHED, ':comment_published' => COMMENT_PUBLISHED, ':uid' => $GLOBALS['user']->uid))->fetchField()) {
      $last_comment = comment_load($cid);
      $node->nodechanges_comment['field_attribute_as_volunteer'] = $last_comment->field_attribute_as_volunteer;
      $node->nodechanges_comment['field_attribute_contribution_to'] = $last_comment->field_attribute_contribution_to;
      $node->nodechanges_comment['field_for_customer'] = $last_comment->field_for_customer;
    }
    node_save($node);
  }
  elseif (project_release_node_is_release($node)) {
    if (project_release_is_security_update($node)) {
      drupal_mail('drupalorg', 'security_release', 'security@drupal.org', language_default(), array('node' => $node));
    }
  }
  elseif (project_node_is_project($node)) {
    _drupalorg_node_update_project($node);
  }
  elseif ($node->type === 'guide') {
    $wrapper = entity_metadata_wrapper('node', $node);

    // If a project was specified, add the guide to the project.
    if (isset($node->drupalorg_add_to_project)) {
      $project = node_load($node->drupalorg_add_to_project);
      $field_collection_item = entity_create('field_collection_item', ['field_name' => 'field_project_docs']);
      $field_collection_item->setHostEntity('node', $project);
      $collection_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
      $collection_wrapper->field_project_doc_guide_name = $node->nid;
      switch ($wrapper->og_group_ref_documentation->value()->nid) {
        case 2785809:
          $collection_wrapper->field_earliest_applicable_versio = '7.x';
          break;

        case 2785817:
          $collection_wrapper->field_earliest_applicable_versio = '8.x';
          break;

        default:
          $collection_wrapper->field_earliest_applicable_versio = '-';
          break;
      }
      $field_collection_item->save();
    }
  }
}

/**
 * Implements hook_node_update().
 */
function drupalorg_node_update($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if ($node->type === 'organization') {
    drupalorg_org_request_issue($node);

    // Update users’ organization names when a reference exists.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'field_collection_item')
      ->fieldCondition('field_organization_reference', 'target_id', $node->nid)
      ->fieldCondition('field_organization_name', 'value', $node->title, '!=')
      ->execute();
    if (isset($result['field_collection_item'])) {
      foreach (field_collection_item_load_multiple(array_keys($result['field_collection_item'])) as $collection) {
        $collection_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
        $collection_wrapper->field_organization_name = $node->title;
        $collection->save(TRUE);
      }
    }

    // Update users’ organization reference when name matches.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'field_collection_item')
      ->fieldCondition('field_organization_name', 'value', $node->title)
      ->fieldCondition('field_organization_reference', 'target_id', $node->nid, '!=')
      ->execute();
    if (isset($result['field_collection_item'])) {
      foreach (field_collection_item_load_multiple(array_keys($result['field_collection_item'])) as $collection) {
        $collection_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
        $collection_wrapper->field_organization_reference = $node->nid;
        $collection->save(TRUE);
      }
    }
  }
  elseif (project_release_node_is_release($node)) {
    $download_base = variable_get('project_release_download_base_' . $node->type, '');
    foreach ($wrapper->field_release_files as $file_wrapper) {
      $file = $file_wrapper->field_release_file->value();
      $url = project_release_add_download_base($file['uri'], $download_base);
      drupalorg_fastly_purge_url($url);
    }
  }
  elseif (project_node_is_project($node)) {
    _drupalorg_node_update_project($node);

    // Changes like security advisory coverage may change the download table.
    drupal_register_shutdown_function('project_release_download_table', $node->nid, TRUE);
  }
  elseif (project_issue_node_is_issue($node) && isset($node->nodechanges_cid) && isset($node->nodechanges_comment->uid)) {
    // Check if the commenter has previously received credit.
    foreach ($wrapper->field_issue_credit as $comment) {
      if ($comment->value()->uid == $node->nodechanges_comment->uid) {
        // Add credit for their new comment, in case there is new attribution.
        $wrapper->field_issue_credit[] = $node->nodechanges_cid;
        field_attach_presave('node', $node);
        field_attach_update('node', $node);
        break;
      }
    }
  }

  // Keep OG Menu titles matching the node title.
  if (og_is_group('node', $node) && !empty($node->og_menu) && ($menu = og_menu_get_group_menus(array('node' => array($node->nid))))) {
    $menu = reset($menu);
    $menu['title'] = $node->title;
    $menu['description'] = t('OG Menu for') . ' ' . check_plain($node->title);
    menu_save($menu);
  }
}

/**
 * @param $url
 */
function drupalorg_fastly_purge_url($url) {
  if ($fastly_key = variable_get('drupalorg_fastly_key', FALSE)) {
    $request = drupal_http_request($url, [
      'method' => 'PURGE',
      'headers' => [
        'Fastly-Key' => $fastly_key,
      ],
    ]);
    if (function_exists('dlm')) {
      dlm($request);
    }
  }
}

/**
 * Run when inserting or updating a project node.
 */
function _drupalorg_node_update_project($node) {
  // Alias release listing path for projects with releases and a machine name.
  if (!empty($node->field_project_has_releases[LANGUAGE_NONE][0]['value']) && !empty($node->field_project_machine_name[LANGUAGE_NONE][0]['value'])) {
    $path = [
      'source' => 'node/' . $node->nid . '/release',
      'alias' => 'project/' . drupal_encode_path($node->field_project_machine_name[LANGUAGE_NONE][0]['value']) . '/releases',
    ];
    if ($existing = path_load($path['source'])) {
      $path['pid'] = $existing['pid'];
    }
    path_save($path);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_node_delete_confirm_alter(&$form) {
  if ($form['#node']->type === 'guide') {
    $children = (new EntityFieldQuery())->entityCondition('entity_type', 'node')
      ->fieldCondition('og_group_ref_documentation', 'target_id', $form['#node']->nid)
      ->count()->execute();
    if ($children > 0) {
      $wrapper = entity_metadata_wrapper('node', $form['#node']);
      $form['description']['#markup'] .= ' ' . format_plural($children, 'This guide’s content (1 page) will be moved to %parent.', 'This guide’s content (@count pages) will be moved to %parent.', ['%parent' => $wrapper->og_group_ref_documentation->title->value()]);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function drupalorg_node_delete(stdClass $node) {
  if ($node->type === 'guide') {
    // Move children to their new parent.
    $parent = entity_metadata_wrapper('node', $node)->og_group_ref_documentation->getIdentifier();
    $children = (new EntityFieldQuery())->entityCondition('entity_type', 'node')
      ->fieldCondition('og_group_ref_documentation', 'target_id', $node->nid)
      ->execute();
    if (isset($children['node'])) {
      foreach (node_load_multiple(array_keys($children['node'])) as $child) {
        $child_wrapper = entity_metadata_wrapper('node', $child);
        $child_wrapper->og_group_ref_documentation = $parent;
        $child->nodechanges_comment['comment_body'][LANGUAGE_NONE][0] = array(
          'value' => t('Automated message: @title guide deleted. Moving its content one level up in the documentation hierarchy.', ['@title' => $node->title]),
          'format' => filter_default_format(),
        );
        node_save($child);
      }
    }
  }

  // Ensure all nodes that are deleted get captured in drupalorg_node_deleted
  // table. If a comment had spam flags, tell us how many.
  $flag_counts = flag_get_counts('node', $node->nid);

  // Insert node into drupalorg_node_deleted.
  db_insert('drupalorg_node_deleted')->fields([
    'nid' => $node->nid,
    'node_type' => $node->type,
    'uid' => $node->uid,
    'title' => $node->title,
    'created' => $node->created,
    'changed' => $node->changed,
    'status' => $node->status,
    'name' => $node->name,
    'language' => $node->language,
    'node_body' => $node->body['und'][0]['value'],
    'flag_count' => isset($flag_counts['drupalorg_node_spam']) ? $flag_counts['drupalorg_node_spam'] : 0,
    'deleted_by' => $GLOBALS['user']->uid,
  ])->execute();
}

/**
 * Implements hook_comment_insert().
 */
function drupalorg_comment_insert($comment) {
  // Update initial issue comment for first revision.
  if ($comment->node_type === 'comment_node_project_issue' && ($field_name = nodechanges_get_field_name($comment->node_type))) {
    if (!empty($comment->{$field_name}[LANGUAGE_NONE])) {
      // Issue comment with a revision to the node.
      $first_comment = comment_load(db_query('SELECT min(c.cid) FROM {comment} c WHERE c.nid = :nid', array(':nid' => $comment->nid))->fetchField());
      $node = node_load($comment->nid);
      // Is an auto-generated comment with no link to the first revision.
      if ($first_comment->uid == $node->uid && preg_match('|^<a.*class="username">.*</a> created an issue.$|', $first_comment->comment_body[LANGUAGE_NONE][0]['value'])) {
        $first_comment->comment_body[LANGUAGE_NONE][0]['value'] .= ' ' . t('See <a href="!url">original summary</a>.', array('!url' => url('node/' . $node->nid . '/revisions/' . min(array_keys(node_revision_list($node))) . '/view')));
        $first_comment->changed = REQUEST_TIME;
        comment_save($first_comment);
      }
    }
  }

  if ($comment->status === COMMENT_NOT_PUBLISHED && $comment->uid === $GLOBALS['user']->uid) {
    _drupalorg_spam_message();
  }
}

/**
 * Show a message to people caught by spam protections.
 */
function _drupalorg_spam_message() {
  drupal_set_message(t('<p>As a part of our continued efforts to make Drupal.org a productive place to visit and work, we’ve made it harder for spammers to post on the site. To avoid seeing this message again, and to be able to post faster, you can request the “confirmed” user role. Please note that users who frequently post valuable content will automatically gain the role after some time.</p>
<p><a href="!help_url">Learn about the “confirmed” user role</a> and <a href ="!issue_url">make your request</a>.</p>', array('!issue_url' => '/node/add/project-issue/webmasters?component=User%20account&categories=support&title=Request%20for%20%27confirmed%27%20role', '!help_url' => '/node/1887616')), 'status', FALSE);
}

/**
 * Implements hook_views_query_substitutions().
 */
function drupalorg_views_query_substitutions($view) {
  if (get_class($view) === 'views_plugin_query_default' && $view->view->name === 'issue_credit' && $view->view->current_display === 'organization_recent_page') {
    // Provide organization argument.
    return array('***CURRENT_ORGANIZATION***' => $view->view->args[0]);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function drupalorg_views_pre_render(&$view) {
  // Render the taxonomy filtering above the marketplace organization listing.
  if ($view->name === 'drupalorg_organizations') {
    $content = array(
      'nav' => array(
        '#prefix' => '<div class="view-header"><div class="nav">',
        '#suffix' => '</div></div>',
      ),
    );

    // Each argument should be a term restricted to a vocabulary.
    $n = 0;
    foreach ($view->display['default']->handler->options['arguments'] as $argument) {
      if (!empty($argument['validate_options']['vocabularies'])) {
        // Find that vocabulary.
        $vocabulary = taxonomy_vocabulary_machine_name_load(current($argument['validate_options']['vocabularies']));
      }
      else {
        continue;
      }

      $content['nav']['column_' . ($n + 1)] = array(
        '#prefix' => '<div class="nav-column">',
        '#suffix' => '</div>',
        '#sorted' => TRUE,
        '#weight' => $n,
      );
      $content['nav']['column_' . ($n + 1)]['header'] = array('#markup' => '<h3>' . check_plain($vocabulary->name) . '</h3>');
      $content['nav']['column_' . ($n + 1)]['list'] = array(
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
        '#sorted' => TRUE,
      ); // See comment on 3 #... items below if modified.

      // Query for terms in the vocabulary used by nodes in the current view.
      if (isset($view->args[$n]) && $view->args[$n] !== 'all') {
        // Remove the current filter, since only one term in each vocab may be
        // selected.
        $copy = $view->clone_view();
        $copy->args[$n] = 'all';
        $copy->build();
        $query = clone $copy->query;
      }
      else {
        $query = clone $view->query;
      }

      // Clear out what we don't need.
      $view->query->fields = array();
      $view->query->orderby = array();

      //Get the D7 db_query
      $query = $query->query();

      // Join back to all terms
      $query->join('taxonomy_index', 'ti', 'node.nid = ti.nid');
      $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ti.tid');
      $query->addField('ttd', 'name');
      // … in our vid
      $query->condition('ttd.vid', $vocabulary->vid);
      // group by term, count & order by
      $query->addField('ti', 'tid', 'term_id');
      $query->groupBy('term_id');
      $query->groupBy('name');
      $query->addExpression('COUNT(*)', 'count');
      $query->orderBy('count', 'DESC');

      $c = 0;
      $result = $query->execute();
      foreach ($result as $row) {
        $c += 1;
        $args = $view->args;
        // If necessary, fill default arguments.
        if ($n > count($args)) {
          $args = array_merge($args, array_fill(count($args), $n - count($args), 'all'));
        }
        // Link to this argument.
        $args[$n] = str_replace(' ', '-', $row->name);

        $path = 'drupal-services/' . implode('/', $args);
        $item = array(
          '#prefix' => '<li' . ($c > 6 && $_GET['q'] !== $path ? ' class="show-more"' : '') . '>',
          '#markup' => l(t('@name (@count)', array('@name' => $row->name, '@count' => $row->count)), $path, array('html' => TRUE)),
          '#suffix' => '</li>',
        );
        // Ensure active is in slot 6 or lower.
        if ($_GET['q'] === $path && $c > 6) {
          array_splice($content['nav']['column_' . ($n + 1)]['list'], 8, 0, array($item)); // 8 = 5 + 3 #... items
          $content['nav']['column_' . ($n + 1)]['list'][6]['#prefix'] = '<li class="show-more">';
        }
        else {
          $content['nav']['column_' . ($n + 1)]['list'][] = $item;
        }
      }
      // If there are more than 6, show more/less links.
      if ($c > 6) {
        $content['nav']['column_' . ($n + 1)]['list']['show-more'] = array(
          '#markup' => '<li class="show-link">' . l(t('Show more'), $_GET['q']) . '</li>',
        );
        $content['nav']['column_' . ($n + 1)]['list']['show-less'] = array(
          '#markup' => '<li class="hide-link">' . l(t('Show fewer'), $_GET['q']) . '</li>',
        );
      }
      // If there is a copy, show an all link.
      if (isset($copy)) {
        $replacements = module_invoke_all('views_query_substitutions', $copy);

        $args = $view->args;
        // If necessasry, fill default arguments.
        if ($n > count($args)) {
          $args = array_merge(array_fill(count($args), $n - count($args), 'all'), $args);
        }
        $args[$n] = 'all';
        $content['nav']['column_' . ($n + 1)]['list'][] = array(
          '#prefix' => '<li>',
          '#markup' => l(t('All @name (@count)', array('@name' => $vocabulary->name, '@count' => $c)), preg_replace('!(/all)*$!', '', 'drupal-services/' . implode('/', $args)), array('attributes' => array('class' => array('all')))),
          '#suffix' => '</li>',
        );

        unset($copy);
      }

      $n += 1;
    }
    $view->attachment_before = drupal_render($content);
  }
  elseif ($view->name === 'issue_credit') {
    if ($view->current_display === 'organization_recent_page') {
      // Substitute in organization argument title.
      $organization = node_load($view->args[0]);
      if (!empty($organization) && $organization->type === 'organization' && $organization->status == NODE_PUBLISHED) {
        $view->build_info['substitutions']['%1'] = check_plain($organization->title);
        $view->build_info['substitutions']['!url-1'] = url('node/' . $organization->nid);
      }
    }
    elseif ($view->current_display === 'organization_recent') {
      // Substitute in organization node ID.
      $filter = $view->get_item('organization_recent', 'filter', 'field_attribute_contribution_to_target_id');
      $view->build_info['substitutions'] = array('%organization-nid' => $filter['value']['value']);
    }
  }
  elseif ($view->name === 'administer_section_content') {
    og_set_breadcrumb('node', $view->args[0], array(l(t('Group'), 'node/' . $view->args[0] . '/group')));
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function drupalorg_preprocess_views_view(&$v) {
  // Add an issue clone link.
  if ($v['view']->name === 'project_issue_issue_relations' && $v['display_id'] === 'block_child_issues') {
    $issue_wrapper = entity_metadata_wrapper('node', node_load($v['view']->argument['nid']->get_value()));
    if ($issue_wrapper->field_project->value()) {
      $tags = [];
      foreach (array_filter($issue_wrapper->taxonomy_vocabulary_9->value()) as $value) {
        $tags[] = $value->name;
      }
      $v['footer'] .= ', ' . l(t('clone issue'), 'node/add/project-issue/' . $issue_wrapper->field_project->field_project_machine_name->value(), [
        'query' => [
          'title' => $issue_wrapper->title->value(),
          'field_issue_parent' => $issue_wrapper->getIdentifier(),
          'clone_body' => 1,
          'categories' => $issue_wrapper->field_issue_category->value(),
          'priorities' => $issue_wrapper->field_issue_priority->value(),
          'status' => $issue_wrapper->field_issue_status->value(),
          'version' => $issue_wrapper->field_issue_version->value(),
          'component' => $issue_wrapper->field_issue_component->value(),
          'assigned' => $issue_wrapper->field_issue_assigned->raw(),
          'tags' => implode(', ', $tags),
        ],
      ]);
    }
  }
}

/**
 * Implements hook_user_view().
 */
function drupalorg_user_view($account, $view_mode) {
  global $user;

  // Add messaging to user profile about how a user can be confirmed.
  if ($user->uid === $account->uid && !drupalorg_user_is_confirmed($account) && isset($account->roles[2])) {
    drupal_set_message(t('Your account is not yet confirmed and has some limitations. Learn how to <a href="https://www.drupal.org/drupalorg/docs/user-accounts/become-a-confirmed-user">become a confirmed user</a>.'));
  }

  // Put non-field items into groups.
  $account->content['#group_children']['user_picture'] = 'group_profile_contact';
  $account->content['user_picture']['#prefix'] = '<div class="user-picture-container">';
  $account->content['user_picture']['#suffix'] = drupalorg_add_badge_new_user($account);
  if (drupalorg_confirm_user_access($account)) {
    $form = drupal_get_form('drupalorg_add_confirm_button', $account);
    $account->content['user_picture']['#suffix'] .= drupal_render($form);
  }
  $account->content['user_picture']['#suffix'] .= '</div>';

  // Do not show "Add 'confirmed' role fasttoggle link.
  if (isset($account->content['links']['fasttoggle']['#links']['role_' . variable_get('drupalorg_crosssite_trusted_role')]) && !drupalorg_user_is_confirmed($account)) {
    unset($account->content['links']['fasttoggle']['#links']['role_' . variable_get('drupalorg_crosssite_trusted_role')]);
  }

  // Link organization to organization node, if it exists.
  $wrapper = entity_metadata_wrapper('user', $account);
  $company_titles = array();
  foreach ($wrapper->field_organizations as $n => $organization) {
    try {
      $company_titles[$n] = $organization->field_organization_name->value();
    }
    catch (EntityMetadataWrapperException $e) { }
  }
  if (!empty($company_titles)) {
    // Load the organization nodes for companies that have an organization node.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'organization')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->propertyCondition('title', $company_titles, 'IN');
    $result = $query->execute();

    $company_nodes = array();
    if (isset($result['node'])) {
      // Index company nodes by title.
      foreach (node_load_multiple(array_keys($result['node'])) as $node) {
        $company_nodes[$node->title] = $node;
      }
    }
    $companies_worked_for = array();
    $current_companies = array();
    $account->content['field_organizations']['#title'] = t('Current Role(s)');
    foreach ($company_titles as $n => $title) {
      $collection_id = $wrapper->field_organizations[$n]->getIdentifier();

      if (isset($company_nodes[$title])) {
        // Replace values with links to organization pages.
        $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0]['#markup'] = l($title, 'node/' . $company_nodes[$title]->nid);
      }

      if ($wrapper->field_organizations[$n]->field_current->value()) {
        // Store this as a current company for later comparison.
        $current_companies[$title] = TRUE;

        // Add logo, if it exists.
        if (isset($company_nodes[$title])) {
          $organization_wrapper = entity_metadata_wrapper('node', $company_nodes[$title]);
          if ($organization_wrapper->field_logo->value()) {
            $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0] = field_view_value('node', $company_nodes[$title], 'field_logo', $organization_wrapper->field_logo->value());
            $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0]['#image_style'] = 'grid-2';
            $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0]['#path']['path'] = 'node/' . $company_nodes[$title]->nid;
            $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0]['#item']['alt'] = $title;
          }
        }

        // Organization Memberships and Supporting Partner/Technology and Hosting Supporters
        if (drupalorg_has_civimembership($title, 'Organization')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_org_member_badge.svg') . '" alt="' . t('Drupal Association Organization Member') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Signature Supporting Partner')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/supporting-partner"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_sig_sup_partner_badge.svg') . '" alt="' . t('Drupal Association Signature Supporting Partner') . '" /></a></div></div>',
          );
        }
        elseif (drupalorg_has_civimembership($title, 'Supporting Partner Premium')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/supporting-partner"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_sp_badge.svg') . '" alt="' . t('Drupal Association Premium Supporting Partner') . '" /></a></div></div>',
          );
        }
        elseif (drupalorg_has_civimembership($title, 'Supporting Partner')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/supporting-partner"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_sup_partner_badge.svg') . '" alt="' . t('Drupal Association Supporting Partner') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Technology Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/technology-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_badge.svg') . '" alt="' . t('Drupal Association Technology Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Premium Technology Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/technology-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_tech_sp_badge.svg') . '" alt="' . t('Drupal Association Premium Technology Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Inaugural Technology Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/technology-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_tech_supp_inaug_badge.svg') . '" alt="' . t('Drupal Association Inaugural Technology Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Inaugural Premium Technology Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/technology-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_techsupp_inaug_badge.svg') . '" alt="' . t('Drupal Association Inaugural Premium Technology Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Hosting Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/hosting-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_host_supp.svg') . '" alt="' . t('Drupal Association Hosting Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Premium Hosting Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/hosting-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_prem_host_supp.svg') . '" alt="' . t('Drupal Association Premium Hosting Supporter') . '" /></a></div></div>',
          );
        }
        if (drupalorg_has_civimembership($title, 'Signature Hosting Supporter')) {
          $account->content['drupalorg_membership'][] = array(
            '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/programs/hosting-supporter"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_hosting_signature_badge.svg') . '" alt="' . t('Drupal Association Signature Hosting Supporter') . '" /></a></div></div>',
          );
        }
      }
      else {
        // Move non-current organizations.
        $companies_worked_for[$title] = $account->content['field_organizations'][$n]['entity']['field_collection_item'][$collection_id]['field_organization_name'][0]['#markup'];
        hide($account->content['field_organizations'][$n]);
      }
    }

    // Format industries worked in as a comma-separated list.
    if (isset($account->content['field_industries_worked_in'])) {
      $field_industries_worked_in = array();
      foreach (element_children($account->content['field_industries_worked_in']) as $element) {
        $field_industries_worked_in[] = $account->content['field_industries_worked_in'][$element]['#markup'];
        unset($account->content['field_industries_worked_in'][$element]);
      }
      $account->content['field_industries_worked_in'][0]['#markup'] = implode(', ', $field_industries_worked_in);
    }

    // Ensure that any duplicates are removed if a value is present in both
    // current and previous companies.
    $companies_worked_for = array_diff_key($companies_worked_for, $current_companies);

    // Add companies worked for.
    if (!empty($companies_worked_for)) {
      $account->content['drupalorg_companies_worked_for'] = array(
        '#prefix' => '<div class="field field-name-companies-worked-for"><div class="field-label">' . t('Companies Worked For') . '</div><div class="field-items">',
        '#markup' => implode(', ', $companies_worked_for),
        '#suffix' => '</div></div>',
        '#weight' => 10,
      );
    }
  }

  // Get the membership display content
  if ($account->uid === $user->uid) {
    $membership_personal = t('Hey! Want to support the Drupal Community, Drupal.org’s infrastructure, and get one of the cool <a href="https://www.drupal.org/association">Drupal Association</a> badges on your profile page? <a href="https://www.drupal.org/association/membership">Become an Individual Member today.</a>');
  }
  if ($membership = drupalorg_civimembership_data($account->name, 'Individual')) {
    $account->content['drupalorg_membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://www.drupal.org/association/membership/individual"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_ind_member_badge.svg') . '" alt="' . t('Drupal Association Individual Member') . '" /></a></div></div>',
    );

    if ($account->uid === $user->uid) {
      switch ($membership->membership_status) {
        case 'New':
        case 'Current':
          $membership_personal = t('<p></p><strong>You Rock!</strong> Thank you for purchasing a <a href="https://www.drupal.org/association">Drupal Association</a> membership. Your support has helped us to support the Drupal community.</p> <p>More information about memberships can be found by clicking on your membership badge.</p>');
          break;

        case 'Grace':
          $membership_personal = t('<strong>Oh No!</strong> Your membership expired on @expiration_date. The <a href="https://www.drupal.org/association">Drupal Association</a> depends on your continued support to keep Drupal.org up and running. <a href="https://www.drupal.org/association/membership">Renew your membership today</a> so your badge stays visible and your access to benefits continues. Thank you!', array('@expiration_date' => format_date($membership->expiration_date, 'custom', 'j F Y')));
          break;

        case 'Grace Period':
          $membership_personal = t('<strong>Oh No!</strong> Your membership expired on @expiration_date. The <a href="https://www.drupal.org/association">Drupal Association</a> depends on your continued support to keep Drupal.org up and running. <a href="https://www.drupal.org/association/membership/individual">Renew your membership today</a> so your badge stays visible and your access to benefits continues. Thank you!', array('@expiration_date' => format_date($membership->expiration_date, 'custom', 'j F Y')));
          break;
      }
    }
  }
  // Board and Advisory Board memberships
  /*
  if (drupalorg_civimembership_data($account->name, 'Board')) {
    $account->content['drupalorg_membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://assoc.drupal.org/about/board"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_board_badge.svg') . '" alt="' . t('Drupal Association Board Member') . '" /></a></div></div>',
    );
  }
  if (drupalorg_civimembership_data($account->name, 'Advisory Board')) {
    $account->content['drupalorg_membership'][] = array(
      '#markup' => '<div class="clearfix"><div class="da-membership-badge"><a href="https://assoc.drupal.org/about/board"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association_advisory_board_badge.svg') . '" alt="' . t('Drupal Association Advisory Board Member') . '" /></a></div></div>',
    );
  }
  */

  // Check if user has any membership and display relevant text
  if (!empty($account->content['drupalorg_membership'])) {
    $account->content['drupalorg_membership'][] = array(
      '#markup' => '<p>' . t('@username helps support and grow the Drupal community with the <a href="https://www.drupal.org/association">Drupal Association</a>.', array('@username' => $account->name)),
      '#weight' => 1,
    );
  }
  if (isset($membership_personal)) {
    $account->content['drupalorg_membership'][] = array(
      '#prefix' => '<p>',
      '#markup' => $membership_personal,
      '#suffix' => '</p>',
      '#weight' => -1,
    );
  }

  // Guides maintained.
  $view = views_get_view('doc_guide_per_user');
  $output = $view->preview('block_1', [$account->uid]);
  if ($view->result) {
    $account->content['drupalorg_documentation_guides'] = [
      '#prefix' => '<h4>' . t('Documentation guides') . '</h4>',
      '#markup' => $output,
    ];
  }

  // Documentation edits.
  $count = (int) db_query('SELECT count(1) FROM {node} n INNER JOIN {node_revision} nr ON n.nid = nr.nid AND nr.uid = :uid WHERE n.type IN (:types) AND n.status = :status', [':types' => ['book', 'guide', 'documentation'], ':status' => 1, ':uid' => $account->uid])->fetchField();
  if ($count > 0) {
    // This isn't a leaderboard.
    if ($count === 1) {
      $drupalorg_documentation = t('1 edit');
    }
    elseif ($count <= 5) {
      $drupalorg_documentation = t('At least 1 edit');
    }
    else {
      foreach ([10000, 5000, 1000, 500, 100, 50, 10, 5] as $threshold) {
        if ($count > $threshold) {
          $drupalorg_documentation = t('Over @count edits', ['@count' => $threshold]);
          break;
        }
      }
    }
  }
  if (isset($drupalorg_documentation)) {
    $account->content['summary']['drupalorg_documentation'] = [
      '#type' => 'user_profile_item',
      '#title' => t('Documentation'),
      '#markup' => $drupalorg_documentation,
    ];
  }

  // Issue credits.
  $view = views_get_view('issue_credit');
  $account->content['drupalorg_user_issue_credit'] = array(
    '#markup' => $view->preview('user_recent', array($account->uid)),
  );
  $issues = 0;
  foreach ($view->result as $row) {
    $issues += $row->nid;
  }
  if ($issues > 0) {
    $filter = $view->get_item('user_recent', 'filter', 'changed_1');
    $account->content['drupalorg_user_issue_credit']['#prefix'] = '<h4>' . format_plural($issues, 'Credited on 1 issue fixed in the past @time', 'Credited on @count issues fixed in the past @time', array('@time' => ltrim($filter['value']['value'], '-'))) . '</h4>';
  }
}

/**
 * Check if an account has a Drupal Association membership.
 *
 * @param $name
 *   Name of the page/profile the function is being called from. Used for pattern
 *   matching to find memberships
 * @param $type
 *   'Individual', 'Organization', or 'Supporting' at time of writing.
 *
 * @return
 *   Boolean, TRUE if membership exists, FALSE if none.
 */
function drupalorg_has_civimembership($name, $type) {
  if (is_object(drupalorg_civimembership_data($name, $type))) {
    return TRUE;
  }
  // "Organization" is also known as "Organization Membership - USD"
  if ($type === 'Organization' && is_object(drupalorg_civimembership_data($name, 'Organization Membership - USD'))) {
    return TRUE;
  }
}

/**
 * Gather information about a Drupal Association membership
 *
 * @param $name
 *   Name of the page/profile to pattern match for the membership
 * @param $type
 *   Membership type, current values are 'Individual', 'Organization', or 'Supporting'
 *
 * @return $membership
 *   Object containing membership info
 */
function drupalorg_civimembership_data($name, $type) {
  static $memberships = array();

  if ($type == 'Individual') {
    return db_query("SELECT cm.user_name, cm.membership_status, cm.expiration_date FROM {drupalorg_crosssite_ind_civimembership} cm WHERE user_name = :name AND membership_status IN ('New', 'Current', 'Grace', 'Grace Period')", array(':name' => $name))->fetchObject();
  }
  else {
    if (!isset($memberships['organization'][$name])) {
      $memberships['organization'][$name] = db_query("SELECT cmo.org_name, cmo.membership_type, cmo.membership_status, cmo.expiration_date FROM {drupalorg_crosssite_org_civimembership} cmo WHERE org_name = :name AND membership_status IN ('New', 'Current', 'Grace', 'Grace Period')", array(':name' => $name))->fetchAllAssoc('membership_type');
    }
    if (isset($memberships['organization'][$name][$type])) {
      return $memberships['organization'][$name][$type];
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function drupalorg_preprocess_field(&$v) {
  if (isset($v['element']['#view_mode']) && $v['element']['#view_mode'] === 'teaser') {
    if ($v['element']['#field_name'] === 'field_project_images') {
      // Only show one attached image on project teaser.
      $v['items'] = array(reset($v['items']));
    }
    elseif ($v['element']['#field_name'] === 'field_organization_support') {
      // Only show one badge on organization teaser, and make it an image.
      foreach ($v['items'] as $key => $value) {
        $v['items'][$key] = array(
          '#markup' => l(
            theme('image', array(
              'path' => drupal_get_path('module', 'drupalorg') . '/images/association_' . $v['element']['#object']->field_organization_support[LANGUAGE_NONE][$key]['value'] . '_badge.svg',
              'alt' => t('Drupal Association @level badge', array('@level' => $v['items'][$key]['#markup'])),
            )), 'https://www.drupal.org/association/programs/supporting-partner', array(
            'html' => TRUE,
            'attributes' => array(
              'title' => t('Drupal Association @level', array('@level' => $v['items'][$key]['#markup'])),
            ),
          ))
        );
      }
    }
  }

  // Turn ISBN-10 field into affiliate link to purchase from Amazon.
  if ($v['element']['#field_name'] == 'field_book_isbn_10' && isset($v['items'][0]['#markup'])) {
   $amazon_link = '<a class="amazon-link" '
      . ' title="Ordering via this link benefits the Drupal Association"'
      . ' href="http://www.amazon.com/dp/' . $v['items'][0]['#markup']
      . '/?tag=drupal0a-20" rel="nofollow">Order from Amazon.com</a>';
    $v['items'][0]['#markup'] = $amazon_link;
  }
  // Rewrite or unset Packt purchase link (unset if not to packtpub.com)
  if ($v['element']['#field_name'] == 'field_book_purchase_link' && isset($v['element']['#items'][0]['url'])) {
    if (!strpos($v['element']['#items'][0]['url'], 'packtpub')) {
      unset($v['element']);
      unset($v['items']);
    }
    else {
      $packt_link = '<a class="packt-link" '
        . ' title="Ordering via this link benefits the Drupal Association"'
        . ' href="' . $v['element']['#items'][0]['url'] . '" rel="nofollow">'
        . 'Order from Packt</a>';
      $v['items'][0]['#markup'] = $packt_link;
    }
  }
}

/**
 * Do not process some queues during regular cron run.
 */
function drupalorg_cron_queue_info_alter(&$queues) {
  if (isset($queues['message_subscribe'])) {
    $queues['message_subscribe']['skip on cron'] = TRUE;
  }
  // If we are in drush, leave the queue intact for queue commands.
  if (function_exists('drush_get_command')) {
    $command = drush_get_command();
    if ($command['command'] !== 'core-cron') {
      return;
    }
  }
  unset($queues['aggregator_feeds']);
}

/**
 * Implements hook_preprocess_comment().
 */
function drupalorg_preprocess_comment(&$v) {
  // Force the comment title to be empty for node types with a disabled comment
  // title field, such as project_issue.
  if (!variable_get('comment_subject_field_' . $v['node']->type, 1)) {
    $v['title'] = '';
  }

  // Add headings for issue comments, which do not have subjects, for
  // accessibility.
  if (project_issue_node_is_issue($v['node'])) {
    $v['permalink'] = '<h3 class="permalink-wrapper">' . $v['permalink'] . '</h3>';
  }

  // Add properly-sized user pictures.
  if (!empty($v['comment']->picture)) {
    if (is_numeric($v['comment']->picture)) {
      $filepath = file_load($v['comment']->picture)->uri;
    }
    else {
      $filepath = $v['comment']->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  $comment_account = user_load($v['comment']->uid);
  if (isset($filepath)) {
    $v['picture'] = l(theme('image_style', array(
      'style_name' => 'drupalorg_user_picture',
      'path' => $filepath,
      'alt' => t('@user’s picture', array('@user' => format_username($v['comment']))),
    )) . drupalorg_add_badge_new_user($comment_account), 'user/' . $v['comment']->uid, array(
      'attributes' => array(
        'title' => t('View user profile.'),
        'class' => 'picture',
      ),
      'html' => TRUE,
    ));
  }

  // System messages, and first comment, in the issue queue.
  if ($v['comment']->uid != 0 && ($v['comment']->uid == variable_get('project_issue_followup_user', 0) || ($v['comment']->uid == $v['node']->uid && isset($v['comment']->thread) && $v['comment']->thread == int2vancode(1) . '/' && isset($v['comment']->comment_body[LANGUAGE_NONE][0]) && preg_match('|^<a.*class="username">.*</a> created an issue.( See <a.*>original summary</a>.)?$|', $v['comment']->comment_body[LANGUAGE_NONE][0]['value'])) || (isset($v['comment']->comment_body[LANGUAGE_NONE][0]) && preg_match('|^<a.*class="username">.*</a> credited <a.*class="username">.*</a>\.?$|', $v['comment']->comment_body[LANGUAGE_NONE][0]['value'])))) {
    // Remove picture & username.
    $v['picture'] = '';
    $v['submitted'] = t('<time pubdate datetime="!created_date_iso">!created_date</time>', array(
      // The ISO 8601 formatted date, needed for relative times to work properly.
      '!created_date_iso' => format_date($v['comment']->created, 'custom', 'c'),
      // The formatted date to display when users have JS disabled or they have
      // manually opted out of relative times.
      '!created_date' => format_date($v['comment']->created, 'custom', 'j F Y \a\t H:i'),
    ));

    // Add extra classes.
    $v['classes_array'][] = 'system-message';
    if (isset($v['comment']->comment_body[LANGUAGE_NONE]) && preg_match('/^The last submitted patch, .*, failed testing./', $v['comment']->comment_body[LANGUAGE_NONE][0]['value'])) {
      $v['classes_array'][] = 'testing-failed';
    }
    elseif (isset($v['comment']->comment_body[LANGUAGE_NONE]) && preg_match('/queued .* for re-testing\.$/', $v['comment']->comment_body[LANGUAGE_NONE][0]['value'])) {
      $v['classes_array'][] = 'queued-retesting';
    }
    elseif (isset($v['comment']->comment_body[LANGUAGE_NONE]) && preg_match('#(Commit <a href=".*">.*</a> on .*:|class="versioncontrol-project-commits")#', $v['comment']->comment_body[LANGUAGE_NONE][0]['value'])) {
      $v['classes_array'][] = 'committed';
    }
    elseif (!empty($v['comment']->field_issue_changes)) {
      foreach ($v['comment']->field_issue_changes[LANGUAGE_NONE] as $change) {
        if ($change['field_name'] === 'field_issue_status' && $change['old_value'][0]['value'] == PROJECT_ISSUE_STATE_FIXED && $change['new_value'][0]['value'] == PROJECT_ISSUE_STATE_CLOSED) {
          $v['classes_array'][] = 'closed';
        }
      }
    }
  }
  elseif (project_issue_node_is_issue($v['node'])) {
    // Add organizations and customers to comments.
    $wrapper = entity_metadata_wrapper('comment', $v['comment']);
    $args = array(
      '!username' => $v['author'],
      '!username-plain' => check_plain($v['comment']->name),
      // The ISO 8601 formatted date, needed for relative times to work properly.
      '!created_date_iso' => format_date($v['comment']->created, 'custom', 'c'),
      // The formatted date to display when users have JS disabled or they have
      // manually opted out of relative times.
      '!created_date' => format_date($v['comment']->created, 'custom', 'j F Y \a\t H:i'),
    );
    // Add submitted by with attribution.
    $text = '!username <span class="attribution-label">Credit<span class="attribution element-invisible"><strong>Attribution:</strong> !username-plain';
    $as_volunteer = array_flip($wrapper->field_attribute_as_volunteer->value());
    if (isset($as_volunteer[1])) {
      $text .= ' as a volunteer';
      if (isset($as_volunteer[0])) {
        $text .= ' and';
      }
    }
    if (isset($as_volunteer[0])) {
      // Link to organizations.
      foreach ($wrapper->field_attribute_contribution_to as $organization) {
        if ($organization->value()) {
          $uri = entity_uri('node', $organization->value());
          $args['!organization'][] = l($organization->title->value(), $uri['path'], $uri['options']);
        }
      }
      if (isset($args['!organization'])) {
        $args['!organization'] = implode(', ', $args['!organization']);
        $text .= ' at !organization';
      }
      // Link to customers.
      foreach ($wrapper->field_for_customer as $organization) {
        if ($organization->value()) {
          $uri = entity_uri('node', $organization->value());
          $args['!customer'][] = l($organization->title->value(), $uri['path'], $uri['options']);
        }
      }
      if (isset($args['!customer'])) {
        $args['!customer'] = implode(', ', $args['!customer']);
        $text .= ' for !customer';
      }
    }
    $text .= '</span></span> commented <time pubdate datetime="!created_date_iso">!created_date</time>';
    $v['submitted'] = t($text, $args);
  }

  // Confirm button.
  if (!in_array('system-message', $v['classes_array']) && drupalorg_confirm_user_access($comment_account)) {
    $form = drupal_get_form('drupalorg_add_confirm_button', $comment_account, $v['comment']->cid);
    $v['picture'] = '<div class="user-picture-with-button">' . $v['picture'] . drupal_render($form) . '</div>';
  }
}

/**
 * Override theme hook.
 */
function drupalorg_preprocess_file_icon(&$v) {
  $v['theme_hook_suggestion'] = 'no_file_icon';
}

/**
 * Do not show file icons in issue pages, which takes up valuable space.
 */
function drupalorg_theme_no_file_icon() {
  return '';
}

/**
 * Implements hook_preprocess_flag().
 */
function drupalorg_preprocess_flag(&$variables) {
  if ($variables['flag']->name === 'project_star') {
    $flag_count = flag_get_counts('node', $variables['entity_id']);
    if (!empty($flag_count['project_star'])) {
      $variables['after_flagging'] = TRUE;
      $variables['message_classes_array'] = ['count'];
      $variables['message_text'] = format_plural($flag_count['project_star'], '1<span class="element-invisible"> person starred this project</span>', '@count_formatted<span class="element-invisible"> people starred this project</span>', ['@count_formatted' => number_format($flag_count['project_star'])]);
    }
  }
}

/**
 * Implements hook_flag_access().
 *
 * Denies access to the Spam flag for imported nodes, based on the body text
 * format.
 */
function drupalorg_flag_access($flag, $entity_id, $action, $account) {
  if ($flag->name !== 'drupalorg_node_spam') {
    // Wrong flag, don't care.
    return NULL;
  }

  $node = node_load($entity_id);
  if (($node->type == 'guide' || $node->type == 'documentation') &&
    isset($node->body['und'][0]['format']) &&
    ($node->body['und'][0]['format'] == 'asciidoc_import')) {
    // This is an imported node, not flaggable as spam.
    return FALSE;
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function drupalorg_entity_property_info_alter(&$info) {
  // Used in project issue views using SearchAPI. Would be great to get into
  // entity module.
  $info['node']['properties']['has_new_content'] = array(
    'label' => t('Has new content'),
    'description' => t('Show a marker if the content is new or updated.'),
    'computed' => TRUE,
    'type' => 'text',
    'sanitized' => TRUE,
    'getter callback' => 'drupalorg_has_new_content',
  );
  $info['node']['properties']['last_comment_timestamp'] = array(
    'label' => t('Last comment timestamp'),
    'description' => t('The Unix timestamp of the last comment, or the timestamp of the node creation if there are no comments yet.'),
    'type' => 'date',
  );

  // Add an access callback to prevent user entities having all flag properties
  // in RestWS export. See flag_entity_property_info_alter().
  foreach (flag_get_flags() as $flag) {
    if (!$flag->global) {
      $info['user']['properties']['flag_' . $flag->name . '_flagged']['access callback'] = '_drupalorg_user_flag_access';
    }
  }
}

function drupalorg_has_new_content($node, array &$options, $name, $type, &$info) {
  return theme('mark', array('type' => node_mark($node->nid, $node->changed)));
}

/**
 * User entity flag property access callback. Deny access to RestWS requests.
 *
 * @see entity_access(), drupalorg_entity_property_info_alter().
 */
function _drupalorg_user_flag_access($op, $property, $entity_type, $entity) {
  if ($op === 'view') {
    foreach (debug_backtrace() as $trace) {
      if ($trace['function'] === 'restws_handle_request') {
        return FALSE;
      }
    }
  }
  return entity_metadata_user_access($op, $entity);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drupalorg_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    // We want to remove the 'add forum topic if we are on the forum top page,
    // so users can only add forum topics from within a forum. This prevents
    // users from having to guess at the forum which is best suited to the
    // topic they are creating. By forcing them to go to a forum, they will be
    // more likely to read the forum descriptions, thereby posting in the
    // correct forum.
    case 'forum':
      unset($data['actions']['output']['forum']);
      break;

    case 'forum/%':
      if (!empty(menu_get_object('forum_forum')->container)) {
        unset($data['actions']['output']['forum']);
      }
      break;

    // Persist site & path arguments.
    case 'user':
      if (user_is_logged_in()) {
        break;
      }
      // Explicit fall-through.
    case 'user/register':
    case 'user/password':
      $parameters = drupal_get_query_parameters();
      if (isset($parameters['destination'])) {
        foreach ($data['tabs'][0]['output'] as &$tab) {
          if ($tab['#link']['path'] === 'user/register' || $tab['#link']['path'] === 'user/login') {
            $tab['#link']['localized_options']['query']['destination'] = $parameters['destination'];
          }
        }
      }
      elseif ($bd = bakery_get_destination()) {
        foreach ($data['tabs'][0]['output'] as &$tab) {
          if ($tab['#link']['path'] === 'user/register' || $tab['#link']['path'] === 'user/login') {
            $tab['#link']['localized_options']['query']['bd'] = $bd;
          }
        }
      }
      break;

    case 'node/%':
      // Add guide & page.
      if ($router_item['page_arguments'][0]->type === 'guide') {
        foreach (['guide', 'documentation'] as $type) {
          if (node_access('create', $type)) {
            $data['tabs'][0]['output'][] = [
              '#theme' => 'menu_local_task',
              '#link' => [
                'title' => t('Add @type', ['@type' => str_replace('Documentation ', '', node_type_get_name($type))]),
                'href' => 'node/add/' . $type,
                'localized_options' => [
                  'query' => ['og_group_ref_documentation' => $router_item['page_arguments'][0]->nid],
                ],
              ],
            ];
          }
        }
      }
      break;
  }

  // Hide the View link on node pages in guides, and all tabs for imported
  // AsciiDoc nodes.
  if (isset($data['tabs'][0]['output'][0]['#link']['path']) && $data['tabs'][0]['output'][0]['#link']['path'] === 'node/%/view' && ($context = og_context()) && ($group = node_load($context['gid'])) && $group->type === 'guide') {
    unset($data['tabs'][0]['output'][0]);
    // Check to see if it is an AsciiDoc imported node.
    $node = $router_item['page_arguments'][0];
    if (!empty($node->field_asciidoc_source_file)) {
      $data['tabs'] = array();
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function drupalorg_module_implements_alter(&$implementations, $hook) {
  // Execute drupalorg_user_update() before bakery to add data to the
  // transmitted data.
  if ($hook === 'user_update') {
    unset($implementations['drupalorg']);
    $implementations = array('drupalorg' => NULL) + $implementations;
  }

  // Execute drupalorg_user_view() after fasttoggle_user_view() so the
  // fasttoggle links can be altered.
  if ($hook === 'user_view') {
    unset($implementations['drupalorg']);
    $implementations['drupalorg'] = NULL;
  }

  // Execute drupalorg_entity_property_info_alter() after
  // comment_fragment_entity_info_alter() to override 'uri callback'.
  if ($hook === 'entity_info_alter') {
    unset($implementations['drupalorg']);
    $implementations['drupalorg'] = NULL;
  }

  // Execute drupalorg_custom_theme() before og_theme_custom_theme().
  if ($hook === 'custom_theme') {
    $implementations = ['drupalorg' => NULL] + $implementations;
  }
  // Execute drupalorg_node_delete() before flag_node_delete.
  if ($hook === 'node_delete') {
    $implementations = ['drupalorg' => NULL] + $implementations;
  }
}

/**
 * Implements hook_bakery_transmit().
 */
function drupalorg_bakery_transmit($edit, $account) {
  if (!is_null($edit)) {
    // While in edit, wait until later in the user save process to fill out
    // Bakery-transmitted data. $account is currently incomplete. See
    // drupalorg_user_update().
    return array('drupalorg_in_edit' => TRUE);
  }

  $data = array();

  // If the account has a user picture, generate all styles that subsites use,
  // and include URLs in bakery-transmitted data.
  if (!empty($account->picture)) {
    foreach (array('thumbnail', 'grid-2', 'drupalorg_user_picture') as $style) {
      $destination = image_style_path($style, $account->picture->uri);
      if (!file_exists($destination)) {
        image_style_create_derivative(image_style_load($style), $account->picture->uri, $destination);
      }
      $data['drupalorg_picture'][$style] = file_create_url($destination);
    }
  }

  // Fields to sync.
  $fields = array(
    'field_country',
    'field_gender',
    'field_first_name',
    'field_last_name',
  );
  $account_wrapper = entity_metadata_wrapper('user', $account);
  foreach ($fields as $field_name) {
    // Add the value into the Bakery data.
    $data['drupalorg_' . $field_name] = $account_wrapper->$field_name->value();
  }
  // URL fields are not in entity metadata wrappers,
  // https://www.drupal.org/node/2322919.
  if (isset($account->field_social_links[LANGUAGE_NONE])) {
    $data['drupalorg_field_social_links'] = $account->field_social_links[LANGUAGE_NONE];
  }

  // Time zone to sync.
  if (!empty($account->timezone)) {
    $data['drupalorg_timezone'] = $account->timezone;
  }

  // Account creation to sync.
  if (!empty($account->created)) {
    $data['drupalorg_crosssite_account_created'] = $account->created;
  }

  // Roles to sync.
  foreach (array('logintoboggan_pre_auth_role', 'drupalorg_crosssite_trusted_role', 'drupalorg_crosssite_community_role') as $role) {
    if ($rid = variable_get($role, FALSE)) {
      $data['drupalorg_roles'][$role] = isset($account->roles[$rid]);
    }
  }

  return $data;
}

/**
 * Implements hook_entity_presave().
 */
function drupalorg_entity_presave($entity, $type) {
  if ($type === 'user') {
    if (isset($entity->field_social_links[LANGUAGE_NONE])) {
      // Set titles for social link URLs.
      $social_link_patterns = variable_get('drupalorg_social_link_patterns', array());
      foreach ($entity->field_social_links[LANGUAGE_NONE] as &$value) {
        $value['title'] = '';
        foreach ($social_link_patterns as $pattern => $title) {
          if (preg_match($pattern, $value['value'])) {
            $value['title'] = $title;
            break;
          }
        }
      }
    }
    if (isset($entity->field_organizations[LANGUAGE_NONE])) {
      // Populate field_organization_reference.
      $organization_titles = array();
      foreach ($entity->field_organizations[LANGUAGE_NONE] as $delta => &$organization) {
        // Load field collection item entity if not already loaded.
        if (isset($organization['value'])) {
          $organization['entity'] = field_collection_item_load($organization['value']);
        }
        // Clear any previous reference.
        $organization['entity']->field_organization_reference = array();
        // Add to list of titles to try loading.
        if (!empty($organization['entity']->field_organization_name[LANGUAGE_NONE][0]['value'])) {
          $organization_titles[trim(drupal_strtolower($organization['entity']->field_organization_name[LANGUAGE_NONE][0]['value']))][] = $delta;
        }
      }
      if (!empty($organization_titles)) {
        // Load organizations by title and populate reference field.
        foreach (db_query("SELECT nid, title FROM {node} n WHERE n.status = :published AND n.type = 'organization' AND title IN (:titles)", array(':published' => NODE_PUBLISHED, ':titles' => array_keys($organization_titles)))->fetchAllKeyed() as $nid => $title) {
          // MySQL collation is more loose than PHP.
          $key = trim(drupal_strtolower($title));
          if (isset($organization_titles[$key])) {
            foreach ($organization_titles[$key] as $delta) {
              $entity->field_organizations[LANGUAGE_NONE][$delta]['entity']->field_organization_reference[LANGUAGE_NONE][0]['target_id'] = $nid;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function drupalorg_user_presave(&$edit, $account) {
  // When saving a new account, stash the bakery destination for the welcome
  // page. See drupalorg_user_register_form_submit().
  if ($account->is_new) {
    if ($bd = bakery_get_destination()) {
      $edit['data']['drupalorg_bd'] = $bd;
    }
    elseif (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
      $edit['data']['drupalorg_destination'] = drupal_parse_url($_GET['destination']);
      unset($_GET['destination']);
    }
  }
}

/**
 * Implements hook_user_update().
 */
function drupalorg_user_update(&$edit, $account) {
  // If drupalorg_bakery_transmit() previously bailed early, return to fill out
  // Bakery-transmitted data.
  if (isset($_SESSION['bakery']['data']['drupalorg_in_edit'])) {
    unset($_SESSION['bakery']['data']['drupalorg_in_edit']);
    $_SESSION['bakery']['data'] += drupalorg_bakery_transmit(NULL, $account);
  }
  // _logintoboggan_process_validation() only invokes hook_user_update(), not
  // enough for bakery to trigger sync.
  if (!empty($account->logintoboggan_email_validated)) {
    bakery_user_presave($edit, $account, NULL);
    $_SESSION['bakery']['data'] += drupalorg_bakery_transmit(NULL, $account);
  }

  // Send an email on LoginToboggan email verification. See
  // drupalorg_form_user_admin_settings_alter().
  if (!empty($account->logintoboggan_email_validated)) {
    _user_mail_notify('drupalorg_email_verified', $account);
  }

  // Send an email when gaining the community role. See
  // drupalorg_form_user_admin_settings_alter().
  if ($community_rid = variable_get('drupalorg_crosssite_community_role')) {
    if (!isset($account->original->roles[$community_rid]) && isset($account->roles[$community_rid])) {
      _user_mail_notify('drupalorg_user_community', $account);
    }
  }
}

/**
 * Implements hook_restws_resource_info_alter().
 */
function drupalorg_restws_resource_info_alter(&$resource_info) {
  // Move menu paths so that RestWS doesn't interfere with the core, or already
  // altered menu items; and completely different paths to work around page
  // cache problems https://www.drupal.org/node/1969466.
  foreach ($resource_info as $name => &$info) {
    $info['menu_path'] = 'api-d7/' . $name;
  }
}

/**
 * Moves issues from one queue to another. Avoids emailing users on changes.
 *
 * string @param $source_queue - Issue queue machine name to move from
 * string @param $destination_queue - Issue queue machine name to move to
 *  array @param $criteria - array of field names and values to filter on
 * string @param $component - valid component in new queue
 */
function _drupalorg_issue_mover($source_queue, $destination_queue, $criteria, $component) {
  $source_queue_id = project_get_nid_from_machinename($source_queue);
  $destination_queue_id = project_get_nid_from_machinename($destination_queue);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node', '=')
    ->fieldCondition('field_project', 'target_id', $source_queue_id);

  foreach ($criteria as $fieldname => $fieldvalue) {
    $query->fieldCondition($fieldname, 'value', $fieldvalue);
  }

  $result = $query->execute();
  if (!empty($result['node'])) {
    $issues = entity_load('node', array_keys($result['node']));
  }

  $account = user_load(variable_get('project_issue_followup_user', 0));

  foreach ($issues as $node) {
    $node->field_issue_component[LANGUAGE_NONE][0]['value'] = $component;
    $node->field_project[LANGUAGE_NONE][0]['target_id'] = $destination_queue_id;
    $node->nodechanges_uid = $account->uid;
    $node->nodechanges_comment_attributes = array(
      'project_issue_no_email' => TRUE,
    );
    node_save($node);
  }

}

/**
 * Bulk re-assigns issue components. Avoids emailing users on changes.
 *
 * string @param $source_queue - Issue queue machine name to move from
 *  array @param $criteria - array of field names and values to filter on
 * string @param $component - valid component in new queue
 */
function _drupalorg_issue_component_changer($source_queue, $criteria, $component) {
  $source_queue_id = project_get_nid_from_machinename($source_queue);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node', '=')
    ->fieldCondition('field_project', 'target_id', $source_queue_id);

  foreach ($criteria as $fieldname => $fieldvalue) {
    $query->fieldCondition($fieldname, 'value', (array) $fieldvalue, 'IN');
  }

  $result = $query->execute();
  if (!empty($result['node'])) {
    $issues = entity_load('node', array_keys($result['node']));
  }

  $account = user_load(variable_get('project_issue_followup_user', 0));

  foreach ($issues as $node) {
    $node->field_issue_component[LANGUAGE_NONE][0]['value'] = $component;
    $node->nodechanges_uid = $account->uid;
    $node->nodechanges_comment_attributes = array(
      'project_issue_no_email' => TRUE,
    );
    node_save($node);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function drupalorg_field_formatter_info() {
  return array(
    'user_pictures' => array(
      'label' => t('User pictures'),
      'field types' => array('entityreference'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'documentation_status' => [
      'label' => t('Documentation status'),
      'field types' => ['list_text'],
    ],
    'casestudy_card' => [
      'label' => t('Case study card'),
      'field types' => ['entityreference'],
    ],
    'security_risk' => [
      'label' => t('Security risk'),
      'field types' => ['text'],
    ],
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function drupalorg_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'user_pictures':
      // Get and load the uids.
      $uids = array_map('current', $items);
      $accounts = user_load_multiple($uids);
      foreach ($accounts as $delta => $account) {
        // Add the picture.
        if (!empty($account->picture)) {
          if (is_numeric($account->picture)) {
            $filepath = file_load($account->picture)->uri;
          }
          else {
            $filepath = $account->picture->uri;
          }
        }
        elseif (variable_get('user_picture_default', '')) {
          $filepath = variable_get('user_picture_default', '');
        }

        if (isset($filepath)) {
          $username = format_username($account);
          $element[$delta] = array('#markup' => l(theme('image_style', array(
            'style_name' => 'drupalorg_user_picture_large',
            'path' => $filepath,
            'alt' => t('@user’s picture', array('@user' => $username)),
          )), 'user/' . $account->uid, array(
            'attributes' => array(
              'title' => t('View @user’s profile.', array('@user' => $username)),
              'class' => array('picture'),
            ),
            'html' => TRUE,
          )));
        }
      }

      // Show if people list the user as a mentor.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_mentors', 'target_id', $entity->uid);
      $count = $query->count()->execute();
      if ($count) {
        $element['#suffix'] = '<p>' . l(format_plural($count, 'One person lists @name as a mentor', '@count people list @name as a mentor', array('@name' => $entity->name)), 'user/' . $entity->uid . '/people-mentored') . '</p>';
      }
      break;

    case 'documentation_status':
      foreach ($items as $delta => $item) {
        $element[$delta] = [
          '#prefix' => '<p class="' . drupal_html_class($item['value']) . '">',
          '#suffix' => '</p>',
        ];
        switch ($item['value']) {
          case 'Incomplete':
            if (user_is_logged_in() && !node_access('update', $entity)) {
              $vars = ['!link' => l(t('Confirmed users can improve documentation'), 'node/1887616')];
            }
            else {
              $vars = ['!link' => l(t('Add more information'), 'node/' . $entity->nid . '/edit')];
            }
            $element[$delta]['#markup'] = t('This documentation is <strong>incomplete</strong>. !link.', $vars);
            break;

          case 'Out of date':
            if (user_is_logged_in() && !node_access('update', $entity)) {
              $vars = ['!link' => l(t('Confirmed users can improve documentation'), 'node/1887616')];
            }
            else {
              $vars = ['!link' => l(t('Help make it current'), 'node/' . $entity->nid . '/edit')];
            }
            $element[$delta]['#markup'] = t('This documentation is <strong>out of date</strong>. !link.', $vars);
            break;

          case 'Deprecated':
            $element[$delta]['#markup'] = t('This documentation is <strong>deprecated</strong>. !link.', ['!link' => l(t('Recommend a change or new documentation'), 'node/' . $entity->nid . '/discuss')]);
            break;
        }
      }
      break;

    case 'casestudy_card':
      foreach ($items as $delta => $item) {
        $wrapper = entity_metadata_wrapper('node', node_load($item['target_id']));
        $attributes = [
          'class' => ['pane-style-card'],
        ];
        if ($cover = $wrapper->field_cover_photo->value()) {
          $attributes['class'][] = 'with-background';
          $attributes['style'] = 'background-image: url(' . image_style_url('card-cover', $cover['uri']) . ')';
        }
        $output = '<div class="pane-content-inner"><div class="field-name-field-cta-graphic">';
        if ($logo = $wrapper->field_logo->value()) {
          $output .= theme('image_style', [
            'style_name' => 'card-logo',
            'path' => $logo['uri'],
            'alt' => $wrapper->label(),
          ]);
        }
        $output .= '</div>';
        $output .= $wrapper->body->summary->value(['sanitize' => TRUE]);
        $output .= '</div>';
        if (entity_metadata_wrapper('fieldable_panels_pane', $entity)->field_show_built_by->value()) {
          $attributes['class'][] = 'pane-style-built-by';
          $output .= '<div class="built-by"><div class="built-by-label"><small>built by</small></div><div class="field-name-field-cta-graphic">';
          $output .= theme('image_style', [
            'style_name' => 'card-logo',
            'path' => $wrapper->field_case_organizations[0]->field_logo->value()['uri'],
            'alt' => $wrapper->field_case_organizations[0]->label(),
          ]);
        $output .= '</div></div>';
        }
        $element[$delta]['#markup'] = l('<div' . drupal_attributes($attributes) . '>' . $output . '</div>', 'node/' . $wrapper->getIdentifier(), ['html' => TRUE, 'attributes' => ['class' => ['card-link']]]);
      }
      break;

    case 'security_risk':
      list($score, $text) = drupalorg_calculate_security_risk($items[0]['value']);
      $element[0]['#markup'] = l(t('<strong>@text</strong> @score∕25 @description', ['@text' => $text, '@score' => $score, '@description' => $items[0]['value']]), 'security-team/risk-levels', ['html' => TRUE, 'attributes' => ['class' => [drupal_html_class($text)]]]);
      break;
  }

  return $element;
}

/**
 * Computes score and security risk from shorthand vulnerability description.
 *
 * See https://www.drupal.org/security-team/risk-level.
 *
 * @param $value
 *   A string like "AC:Complex/A:Admin/CI:None/II:None/E:Theoretical/TD:Uncommon"
 * @return
 *   Array of score, int up to 25, and text like "Not critical"
 */
function drupalorg_calculate_security_risk($value) {
  $points = [
    'AC:None' => 4,
    'AC:Basic' => 2,
    'AC:Complex' => 1,
    'A:None' => 4,
    'A:User' => 2,
    'A:Admin' => 1,
    'CI:All' => 5,
    'CI:Some' => 3,
    'CI:None' => 0,
    'II:All' => 5,
    'II:Some' => 3,
    'II:None' => 0,
    'E:Exploit' => 4,
    'E:Proof' => 2,
    'E:Theoretical' => 1,
    'TD:All' => 3,
    'TD:Default' => 2,
    'TD:Uncommon' => 1,
  ];
  $score = array_sum(array_intersect_key($points, array_flip(explode('/', $value))));
  if ($score <= 4) {
    return [$score, t('Not critical')];
  }
  elseif ($score <= 9) {
    return [$score, t('Less critical')];
  }
  elseif ($score <= 14) {
    return [$score, t('Moderately critical')];
  }
  elseif ($score <= 19) {
    return [$score, t('Critical')];
  }
  else {
    return [$score, t('Highly critical')];
  }
}

function drupalorg_welcome_page() {
  global $user;

  // If the user is anonymous or already has accessed the site, send them elsewhere.
  if ($user->uid === 0 || $user->login > $user->created) {
    drupal_goto('user');
  }

  $output = '';

  // Add the introductory text.
  $output .= '<p>' . t('You’ve joined Drupal.org - a home to a global community of passionate people. Whether you are new to open source or ready to change the world, welcome!') . '</p>';
  $output .= '<p>' . t('This information will be public on your profile.') . '</p>';

  // Load the user profile form.
  $form_state = array(
    'drupalorg_welcome' => TRUE,
    'build_info' => array(
      'args' => array(user_load($user->uid)),
    ),
  );
  form_load_include($form_state, 'inc', 'user', 'user.pages');
  $form = drupal_build_form('user_profile_form', $form_state);
  $output .= drupal_render($form);

  return $output;
}

function drupalorg_add_badge_new_user($account) {
  $output = '';
  if (user_is_logged_in() && $account->uid > 0 && (REQUEST_TIME - $account->created) < 7776000) {
    $output .= '<div class="new-user">' . t('<span class="element-invisible">@username is a </span>new<span class="element-invisible"> user</span>', array('@username' => format_username($account))) . '</div>';
  }
  return $output;
}

function drupalorg_notice_settings_form($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    global $user;
    $notice = variable_get('drupalorg_notice');

    // Display the initial form.
    $form['drupalorg_notice']['#tree'] = TRUE;

    $form['drupalorg_notice']['message'] = array(
      '#title' => t('Message'),
      '#description' => t('System message text to be displayed to all authenticated Drupal.org users on their next page load. One time display.'),
      '#type' => 'text_format',
      '#format' => $notice ? $notice['message']['format'] : NULL,
      '#default_value' => $notice ? $notice['message']['value'] : NULL,
      '#required' => TRUE,
      '#prefix' => $notice ? t('The current message was set by %name at %time.', array('%name' => format_username(user_load($notice['uid'])), '%time' => format_date($notice['time']))) : NULL,
    );
    $form['drupalorg_notice']['uid'] = array(
      '#type' => 'hidden',
      '#value' => $user->uid,
    );
    $form['drupalorg_notice']['time'] = array(
      '#type' => 'hidden',
      '#value' => REQUEST_TIME,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    );

    return $form;
  }
  else {
    // Display a preview of the message.
    drupal_set_message(_drupalorg_view_global_notice($form_state['storage']['original_form']['drupalorg_notice']));
    // Display the confirmation form.
    return confirm_form($form, t('Enable global notice'), current_path(), t('Are you absolutely sure you want to display your message to every Drupal.org user?'), t('Enable global notice'), t('Cancel'));
  }
}

function drupalorg_notice_settings_form_submit($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    // This will cause the form to be rebuilt, entering the confirm part of the
    // form.
    $form_state['storage']['confirm'] = TRUE;
    $form_state['storage']['original_form'] = $form_state['values'];
    $form_state['rebuild'] = TRUE;
  }
  else {
    // Save the form data.
    variable_set('drupalorg_notice', $form_state['storage']['original_form']['drupalorg_notice']);
    drupal_set_message(t('The message will be displayed to all authenticated users on their next page load.'));
  }
}

function _drupalorg_view_global_notice($notice = NULL) {
  if (!$notice) {
    $notice = variable_get('drupalorg_notice');
  }
  return $notice ? filter_xss(check_markup($notice['message']['value'], $notice['message']['format'])) : NULL;
}

/**
 * Form callback, a confirm button for Community users to give Confirmed user
 * role out.
 */
function drupalorg_add_confirm_button($form, &$form_state, stdClass $account, $comment_id = FALSE) {
  $form_state['account'] = $account;
  $form_state['show_undo_text'] = TRUE;

  $form['#attributes']['class'][] = 'confirm-button-form';
  $form['confirm'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#attributes' => array('title' => t('Confirm this user is not a spammer')),
    '#ajax' => array(
      'callback' => 'drupalorg_add_confirm_button_ajax',
      'progress' => array('type' => 'throbber', 'message' => NULL),
    ),
  );

  if ($comment_id !== FALSE) {
    // This is a confirm button on a comment.
    $form['#prefix'] = "<div id=\"confirm-button-{$comment_id}\">";
    $form['#suffix'] = '</div>';
    $form['confirm']['#ajax']['wrapper'] = 'confirm-button-' . $comment_id;
    $form_state['show_undo_text'] = FALSE;
  }
  else {
    // This is a normal confirm button.
    $form['confirm']['#ajax']['wrapper'] = 'drupalorg-add-confirm-button';
  }

  return $form;
}

function drupalorg_add_confirm_button_ajax($form, &$form_state) {
  $account = user_load($form_state['account']->uid);
  if (drupalorg_user_is_confirmed($account)) {
    $op = 'remove_role';
    $form['confirm']['#value'] = t('Confirm');
  }
  else {
    $op = 'add_role';
    if ($form_state['show_undo_text']) {
      $form['confirm']['#prefix'] = '<div class="undo">' . t('You’ve confirmed this user. Undo?') . '</div>';
    }
    $form['confirm']['#value'] = t('Undo');
  }

  // Edit the roles as needed.
  user_multiple_role_edit(array($account->uid), $op, variable_get('drupalorg_crosssite_trusted_role'));

  return $form;
}

function drupalorg_confirm_user_access($account) {
  global $user;

  // Don't show if:
  // - The user is viewing their own profile.
  // - They don't have the Community role themselves.
  if ($user->uid === $account->uid || !isset($user->roles[variable_get('drupalorg_crosssite_community_role')])) {
    return FALSE;
  }
  // Also don't show if:
  // - The the user is already confirmed
  // - Isn't authenticated.
  if (drupalorg_user_is_confirmed($account) || !isset($account->roles[2])) {
    return FALSE;
  }

  return TRUE;
}

function drupalorg_user_is_confirmed($account) {
  return isset($account->roles[variable_get('drupalorg_crosssite_trusted_role')]);
}

/**
 * Implements hook_admin_paths_alter().
 */
function drupalorg_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
  $paths['user/*/project-issue'] = FALSE;
  $paths['user/*/ssh-keys'] = FALSE;
}

/**
 * Implements hook_project_release_xml_release_alter().
 */
function drupalorg_project_release_xml_release_alter(&$xml, $project, $release) {
  $release_wrapper = entity_metadata_wrapper('node', $release);

  // For distributions, add <variant> to <file>s.
  if ($project->type === 'project_distribution') {
    foreach ($xml->release->files->file as $key => $value) {
      if (preg_match('/-((?:no-)?core)\.' . preg_quote($value->archive_type, '/') . '$/', $value->url, $match)) {
        if ($match[1] === 'no-core') {
          $value->variant = 'projects';
        }
        elseif ($match[1] === 'core') {
          $value->variant = 'full';
        }
      }
      else {
        $value->variant = 'profile-only';
      }
    }
  }

  // Add security advisory coverage. See also class
  // drupalorg_handler_security_coverage.
  $coverage = drupalorg_project_release_security_coverage($release);
  if ($coverage['status'] === 'covered') {
    $xml->release->security['covered'] = TRUE;
  }
  $xml->release->security = $coverage['explanation'];

}

/**
 * Implements hook_project_release_xml_alter().
 */
function drupalorg_project_release_xml_alter(&$xml, $project, $api_tid) {
  if ($project->type !== 'project_core' && $api_tid == 87) { // 6.x
    // See https://www.drupal.org/node/2681323.
    // This causes update status to show “Not supported!” when a module is
    // updated to the last Drupal 6 version.
    $xml->supported_majors = 9999;
    $xml->recommended_major = 9999;
    $xml->default_major = 9999;
  }
}

/**
 * Implements hook_project_release_history_xml_written().
 */
function drupalorg_project_release_history_xml_written($project, $api_version) {
  $url = 'http://updates.drupal.org/release-history/' . $project->field_project_machine_name[LANGUAGE_NONE][0]['value'] . '/' . $api_version;
  drupalorg_fastly_purge_url($url);
}

function drupalorg_project_release_security_coverage($release) {


  if ($release_wrapper = entity_metadata_wrapper('node', $release)) {
    $coverage['status'] = $release_wrapper->field_release_project->field_security_advisory_coverage->value();

    if ($release_wrapper->field_release_project->field_security_advisory_coverage->value() === 'covered') {
      // D6 and earlier do not have security team coverage.
      if ($release_wrapper->{'taxonomy_' . taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary'))->machine_name}->value()->name <= 6) {
        $coverage['status'] = 'not-covered';
        $coverage['explanation'] = t('Drupal 6 and earlier are not covered by Drupal security advisories!');
      }
      // Non-full releases, with a version extra value like 'dev' or 'alpha42'
      // do not have security team coverage.
      else if ($type = $release_wrapper->field_release_version_extra->value()) {
          $type = drupal_ucfirst(preg_replace('/[0-9]*$/', '', $type));
          if ($type === 'Rc') {
            $type = 'RC';
          }
          $coverage['status'] = 'not-covered';
          $coverage['explanation'] = t('@type releases are not covered by Drupal security advisories.', ['@type' => $type]);
      }
      else {
        $coverage['explanation'] = t('Covered by Drupal\'s security advisory policy');
      }
    }
    else if ($release_wrapper->field_release_project->field_security_advisory_coverage->value() === 'revoked') {
      $coverage['explanation'] = t('Project has been unsupported by the Drupal Security Team');
    }
    else {
      // Project is not covered by the policy by default; either maintainers have
      // not opted in, or cannot opt in due to privilege restrictions.
      $coverage['explanation'] = t('Project has not opted into security advisory coverage!');
    }
  }

  return $coverage;
}

/**
 * Implements hook_mollom_content_alter().
 */
function drupalorg_mollom_content_alter(&$data) {
  // Remove safe domains.
  if (isset($data['postBody'])) {
    $data['postBody'] = preg_replace(variable_get('drupalorg_mollom_remove', []), '', $data['postBody']);
  }
}

/**
 * Implements hook_mollom_form_info_alter().
 */
function drupalorg_mollom_form_info_alter(&$data) {
  foreach (project_issue_issue_node_types() as $type) {
    if ($data['form_id'] === $type . '_node_form') {
      // Edit any issue is handed out liberally, do not consider it a Mollom
      // bypass.
      if ($key = array_search('edit any ' . $type . ' content', $data['bypass access'])) {
        unset($data['bypass access'][$key]);
      }

      // Also allow the issue comment to be analyzed.
      $data['elements']['nodechanges_comment][comment_body'] = t('Issue comment');

      // Moderation may be unpublishing the comment or the issue summary.
      $data['moderation callback'] = 'drupalorg_mollom_issue_moderation';
    }
  }
}

/**
 * Mollom moderation callback from drupalorg_mollom_form_info_alter().
 */
function drupalorg_mollom_issue_moderation(&$form, &$form_state) {
  if (isset($form_state['values']['nodechanges_comment'])) {
    $form_state['values']['nodechanges_comment']['status'] = COMMENT_NOT_PUBLISHED;
  }
  else {
    $form_state['values']['status'] = NODE_NOT_PUBLISHED;
  }
}

/**
 * Menu access callback for marking an entity as ham.
 *
 * Check that a user has admin access for the entity, a valid token, and a
 * valid entity.
 */
function drupalorg_ham_access($entity_type, $id, $token) {
  return user_access('administer ' . $entity_type . 's') && $token === drupal_get_token($entity_type . $id) && entity_load_single($entity_type, $id) !== FALSE;
}

/**
 * Menu callback for marking an entity as ham.
 *
 * Clear all users’ spam flags for the entity, set a message, and return to the
 * original page.
 */
function drupalorg_ham($entity_type, $id) {
  flag_reset_flag(flag_get_flag('drupalorg_' . $entity_type . '_spam'), $id);

  drupal_set_message(t('%label unmarked as spam.', array('%label' => entity_label($entity_type, entity_load_single($entity_type, $id)))));

  drupal_goto();
}

/**
 * Implements hook_mail().
 */
function drupalorg_mail($key, &$message, $params) {
  switch ($key) {
    case 'security_release':
      $message['subject'] = t('New security release: @title', array('@title' => $params['node']->title));
      $message['body'] = array(
        t('A new security release has been created: @title', array('@title' => $params['node']->title)),
        url('node/' . $params['node']->nid, array('absolute' => TRUE)),
      );
      break;

    case 'credited_by_maintainer':
      $wrapper = entity_metadata_wrapper('node', $params['node']);
      $message['subject'] = t('[@project] You’ve been credited in @title!', ['@project' => $wrapper->field_project->field_project_machine_name->value(), '@title' => $params['node']->title]);
      $message['body'] = [
        t('Congratulations, @maintainer credited you in a Drupal.org issue.', ['@maintainer' => $GLOBALS['user']->name]),
        t('View the issue at @url', ['@url' => url('node/' . $params['node']->nid, ['absolute' => TRUE])]),
        t('Update attribution as a volunteer or for an organization/customer at @url', ['@url' => url('comment/' . $params['node']->nodechanges_cid . '/edit', ['absolute' => TRUE])]),
      ];
      break;

    case 'added_guide_maintainer':
      $message['subject'] = t('[Documentation guide] You are now a maintainer for @title', ['@title' => $params['node']->title]);
      $message['body'] = [
        t('@name,', ['@name' => $params['account']->name]),
        t('@name added you as a guide maintainer for "@title" guide (@link).', ['@name' => $GLOBALS['user']->name, '@title' => $params['node']->title, '@link' => url('node/' . $params['node']->nid, ['absolute' => TRUE])]),
        t('You can administer the guide at @url.', ['@url' => url('node/' . $params['node']->nid . '/group', ['absolute' => TRUE])]),
        t('Guidelines for the guide maintainers can be found at @url.', ['@url' => url('/drupalorg/docs/content/documentation', ['absolute' => TRUE])]),
        t('Thank you for making documentation better.'),
      ];
      break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function drupalorg_mail_alter(&$message) {
  if (strpos($message['id'], 'message_notify_') === 0) {
    $message_wrapper = $message['params']['message_entity']->wrapper();
    if (isset($message_wrapper->field_target_node)) {
      $name = $message_wrapper->field_target_node->author->name->value();
    }
    elseif (isset($message_wrapper->field_target_comment)) {
      $name = $message_wrapper->field_target_comment->name->value();
    }

    if (isset($name)) {
      // Add commenter name to from address. The sender name is enclosed by
      // double quotes below to satisfy RFC2822
      // <http://www.faqs.org/rfcs/rfc2822.html>, which requires double quotes
      // when special characters (including some punctuation) are used. See
      // example in Appendix A.1.2.
      $message['headers']['From'] = '"' . mime_header_encode($name . ' (' . variable_get('site_name', 'Drupal') . ')') . '" <' . $message['from'] . '>';
    }
  }
}

/**
 * Implements hook_og_user_access_alter().
 */
function drupalorg_og_user_access_alter(&$perm, $context) {
  static $altered = FALSE;

  if (!$altered) {
    $altered = TRUE;

    if ($context['group']->type === 'guide' && user_access('administer all documentation guides', $context['account'])) {
      foreach (og_role_permissions(array_intersect(og_roles($context['group_type'], $context['group']->type), ['maintainer'])) as $maintainer_perms) {
        $perm += $maintainer_perms;
      }
    }
  }
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function drupalorg_og_ui_get_group_admin($group_type, $gid) {
  $items = array();

  if (og_user_access($group_type, $gid, 'update group')) {
    $items['drupalorg_content'] = array(
      'title' => t('Content'),
      'description' => t('Manage the group content.'),
      'href' => 'admin/content',
    );
  }

  return $items;
}

/**
 * Implements hook_og_role_grant().
 */
function drupalorg_og_role_grant($entity_type, $gid, $uid, $rid) {
  $role = og_role_load($rid);
  if ($uid != $GLOBALS['user']->uid && $role->name === 'maintainer') {
    // Send the new maintainer a notification.
    $account = user_load($uid);
    $node = node_load($gid);
    $from = '"' . mime_header_encode(t('!name (!site)', array('!name' => $GLOBALS['user']->name, '!site' => variable_get('site_name', 'Drupal')))) . '" <' . variable_get('site_mail', ini_get('sendmail_from')) . '>';
    drupal_mail('drupalorg', 'added_guide_maintainer', $account->mail, LANGUAGE_NONE, ['node' => $node, 'account' => $account], $from);

    // Have the new maintainer follow the guide.
    message_follow_node_follow_node($node->nid, $node->type, $account->uid);
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function drupalorg_pathauto_alias_alter(&$alias, array &$context) {
  if ($context['module'] === 'node') {
    // Do not include the "about" group name in the path for posts in the About
    // section.
    if ($context['type'] === 'post' && ($context['op'] === 'insert' || $context['op'] === 'update') && $context['data']['node']->og_group_ref[LANGUAGE_NONE][0]['target_id'] == 2603760) {
      $alias = preg_replace('#^about/#', '', $alias);
    }

    // Keep punctuation in release version numbers.
    if ($context['type'] === 'project_release') {
      $alias = preg_replace('#/[^/]*$#', '/' . $context['data']['node']->field_release_version[LANGUAGE_NONE][0]['value'], $alias);
    }
  }

  // Strip nice quotes.
  $alias = str_replace(['‘', '’', '“', '”'], '', $alias);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_sa_node_form_alter(&$form, &$form_state) {
  $form['title']['#access'] = FALSE;

  // Always hide comments, which will be automated comments for “issue” credit.
  unset($form['comment_settings']['comment'][COMMENT_NODE_HIDDEN]['#access']);
  $form['comment_settings']['comment']['#default_value'] = COMMENT_NODE_HIDDEN;
  $form['comment_settings']['#access'] = FALSE;

  $form['#validate'][] = '_drupalorg_sa_validate';
  $form['#submit'][] = 'drupalorg_sa_save';
}

/**
 * Validate callback for drupalorg_form_sa_node_form_alter().
 */
function _drupalorg_sa_validate($form, &$form_state) {
  if ($project = node_load($form_state['values']['field_project'][LANGUAGE_NONE][0]['target_id'])) {
    if ($project->nid == 807766) {
      // “securitydrupalorg” project for PSAs.
      form_set_value($form['title'], format_string('!vulnerability - !id', [
        '!vulnerability' => $form_state['values']['field_sa_type'][LANGUAGE_NONE][0]['value'],
        '!id' => 'PSA-' . format_date($form_state['values']['created'], 'custom', 'Y') . '-' . $form_state['values']['field_sa_advisory_id'][LANGUAGE_NONE][0]['value'],
      ]), $form_state);
    }
    else {
      form_set_value($form['title'], format_string('!project - !risk - !vulnerability - !id', [
        '!project' => $project->title,
        '!risk' => drupalorg_calculate_security_risk($form_state['values']['field_sa_criticality'][LANGUAGE_NONE][0]['value'])[1],
        '!vulnerability' => $form_state['values']['field_sa_type'][LANGUAGE_NONE][0]['value'],
        '!id' => 'SA-' . ($project->type === 'project_core' ? 'CORE' : 'CONTRIB') . '-' . format_date($form_state['values']['created'], 'custom', 'Y') . '-' . $form_state['values']['field_sa_advisory_id'][LANGUAGE_NONE][0]['value'],
      ]), $form_state);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function drupalorg_entity_info_alter(&$entity_info) {
  // Add related content view mode used on documentation pages.
  $entity_info['node']['view modes']['related_content'] = [
    'label' => t('Related Content'),
    'custom settings' => TRUE,
  ];

  // Special comment URI callback for content types with …/discuss pages.
  $entity_info['comment']['uri callback'] = 'drupalorg_comment_uri';
}

/**
 * Comment URI callback.
 */
function drupalorg_comment_uri($comment) {
  // …/discuss page for documentation.
  if (in_array($comment->node_type, ['comment_node_guide', 'comment_node_documentation'])) {
    $node = node_load($comment->nid);
    $page = comment_get_display_page($comment->cid, $node->type);

    $uri = [
      'path' => 'node/' . $comment->nid . '/discuss',
      'options' => array('fragment' => 'comment-' . $comment->cid),
    ];
    if ($page > 0) {
      $uri['options']['query']['page'] = $page;
    }
    return $uri;
  }

  // Fall back to comment_fragment module.
  return comment_fragment_uri($comment);
}

/**
 * Implements hook_query_TAG_alter().
 */
function drupalorg_query_comment_filter_alter(QueryAlterableInterface $query) {
  // For documentation and guide content, with order by clause, order by newest
  // first.
  if (in_array($query->getMetaData('node')->type, ['documentation', 'guide']) && ($old_order =& $query->getOrderBy())) {
    $old_order = [];
    $query->orderBy('c.cid', 'DESC');
  }
}

/**
 * Called when an SA node form is saved. Grant issue credits from the credits
 * in the SA.
 */
function drupalorg_sa_save($form, $form_state) {
  if (isset($form_state['node']->nid)) {
    // Mark the “issue” closed.
    $form_state['node']->field_issue_status[LANGUAGE_NONE][0]['value'] = variable_get('project_issue_state_closed', PROJECT_ISSUE_STATE_CLOSED);

    $search = $form_state['values']['field_sa_reported_by'][LANGUAGE_NONE][0]['value'];
    $search .= $form_state['values']['field_sa_fixed_by'][LANGUAGE_NONE][0]['value'];
    $search .= $form_state['values']['field_sa_coordinated_by'][LANGUAGE_NONE][0]['value'];
    if ($search != '' && preg_match_all('#https://www\.drupal\.org/(?:user/(\d+)|(u/[^/"\']+))#', $search, $matches)) {
      if ($uids = array_merge(array_filter($matches[1]), preg_replace('#^user/(\d+)$#', '\1', array_map('drupal_get_normal_path', array_filter($matches[2]))))) {
        $givecredit = [];
        foreach (user_load_multiple($uids) as $account) {
          $givecredit[] = $account->name;
        }
        $form_state['values']['add_credit'] = implode(',', $givecredit);
        _drupalorg_project_issue_credit_add($form_state);
        $form_state['node']->field_issue_credit[LANGUAGE_NONE] = array();
        // Grant everyone credit.
        foreach ($form_state['drupalorg_credit_cids'] as $cid => $key) {
          $form_state['node']->field_issue_credit[LANGUAGE_NONE][] = array('target_id' => $cid);
        }
      }
    }
  }
}

/**
 * Implements hook_panels_pane_content_alter().
 */
function drupalorg_panels_pane_content_alter($content, $pane, $args, $contexts) {
  // Add lead capture to CTAs with pane admin title “Lead capture”.
  if (isset($content->content['field_cta_body']) && $content->content['field_cta_body']['#object']->admin_title === 'Lead capture') {
    $form = drupal_get_form('drupalorg_lead_capture_form');
    $content->content['field_cta_body']['#suffix'] = drupal_render($form);
  }
}

/**
 * Sponsorship opportunity for industry landing pages.
 */
function drupalorg_lead_capture_form($form) {
  $form['retURL'] = [
    '#type' => 'hidden',
    '#value' => url('industries/thank-you', ['absolute' => TRUE, 'alias' => TRUE]),
  ];
  $form['00NA00000067D9R'] = [
    '#type' => 'hidden',
    '#value' => url(current_path(), ['absolute' => TRUE]),
  ];
  $form['first_name'] = [
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#title_display' => 'invisible',
    '#maxlength' => 40,
    '#size' => 20,
    '#attributes' => [
      'placeholder' => t('First name'),
    ],
  ];
  $form['last_name'] = [
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#title_display' => 'invisible',
    '#maxlength' => 80,
    '#size' => 20,
    '#attributes' => [
      'placeholder' => t('Last name'),
    ],
  ];
  $form['email'] = [
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#title_display' => 'invisible',
    '#maxlength' => 80,
    '#size' => 20,
    '#required' => TRUE,
    '#attributes' => [
      'placeholder' => t('* Required: Email'),
    ],
  ];
  $form['phone'] = [
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#title_display' => 'invisible',
    '#maxlength' => 40,
    '#size' => 20,
    '#attributes' => [
      'placeholder' => t('Phone'),
    ],
  ];
  $form['company'] = [
    '#type' => 'textfield',
    '#title' => t('Company'),
    '#title_display' => 'invisible',
    '#maxlength' => 40,
    '#size' => 20,
    '#attributes' => [
      'placeholder' => t('Company'),
    ],
  ];
  $form['00NA00000067Mm6'] = [
    '#type' => 'textfield',
    '#title' => t('Country'),
    '#title_display' => 'invisible',
    '#maxlength' => 60,
    '#size' => 20,
    '#attributes' => [
      'placeholder' => t('Country'),
    ],
  ];
  if (user_is_logged_in()) {
    $wrapper = entity_metadata_wrapper('user', $GLOBALS['user']);
    $form['first_name']['#default_value'] = $wrapper->field_first_name->value();
    $form['last_name']['#default_value'] = $wrapper->field_last_name->value();
    $form['email']['#default_value'] = $wrapper->mail->value();
    $form['country']['#default_value'] = $wrapper->field_country->value();
  }
  $form['00NA00000067Ahk'] = [
    '#type' => 'select',
    '#title' => t('Region'),
    '#title_display' => 'invisible',
    '#options' => [
      'AMER' => t('Americas'),
      'EMEA' => t('Europe, Middle East, Africa'),
      'APAC' => t('Asia Pacific, Australia, New Zealand'),
    ],
  ];
  if ($country = drupalorg_get_and_vary_header('GeoIP-country')) {
    switch ($country) {
      case 'A1': // Anonymous Proxy
      case 'A2': // Satellite Provider
      case 'O1': // Other Country
      case 'AI': // Anguilla
      case 'AG': // Antigua and Barbuda
      case 'AR': // Argentina
      case 'AW': // Aruba
      case 'BS': // Bahamas
      case 'BB': // Barbados
      case 'BZ': // Belize
      case 'BM': // Bermuda
      case 'BO': // Bolivia (Plurinational State of)
      case 'BQ': // Bonaire, Sint Eustatius and Saba
      case 'BR': // Brazil
      case 'CA': // Canada
      case 'KY': // Cayman Islands
      case 'CL': // Chile
      case 'CO': // Colombia
      case 'CR': // Costa Rica
      case 'CU': // Cuba
      case 'CW': // Curaçao
      case 'DM': // Dominica
      case 'DO': // Dominican Republic
      case 'EC': // Ecuador
      case 'SV': // El Salvador
      case 'GF': // French Guiana
      case 'GD': // Grenada
      case 'GP': // Guadeloupe
      case 'GT': // Guatemala
      case 'GY': // Guyana
      case 'HT': // Haiti
      case 'HN': // Honduras
      case 'JM': // Jamaica
      case 'MQ': // Martinique
      case 'MX': // Mexico
      case 'MS': // Montserrat
      case 'NI': // Nicaragua
      case 'PA': // Panama
      case 'PY': // Paraguay
      case 'PE': // Peru
      case 'PR': // Puerto Rico
      case 'BL': // Saint Barthélemy
      case 'KN': // Saint Kitts And Nevis
      case 'LC': // Saint Lucia
      case 'MF': // Saint Martin
      case 'PM': // Saint Pierre and Miquelon
      case 'VC': // Saint Vincent and The Grenadines
      case 'SX': // Sint Maarten (Dutch part)
      case 'SR': // Suriname
      case 'TT': // Trinidad and Tobago
      case 'TC': // Turks and Caicos Islands
      case 'US': // United States
      case 'UY': // Uruguay
      case 'VE': // Venezuela
      case 'VG': // Virgin Islands (British)
      case 'VI': // Virgin Islands (U.S.)
        $form['00NA00000067Ahk']['#default_value'] = 'AMER';
        break;

      case 'EU': // European Union
      case 'AF': // Afghanistan
      case 'AX': // Åland Islands
      case 'AL': // Albania
      case 'DZ': // Algeria
      case 'AD': // Andorra
      case 'AO': // Angola
      case 'AM': // Armenia
      case 'AT': // Austria
      case 'AZ': // Azerbaijan
      case 'BH': // Bahrain
      case 'BY': // Belarus
      case 'BE': // Belgium
      case 'BJ': // Benin
      case 'BA': // Bosnia and Herzegovina
      case 'BW': // Botswana
      case 'BV': // Bouvet Island
      case 'BG': // Bulgaria
      case 'BF': // Burkina Faso
      case 'BI': // Burundi
      case 'CM': // Cameroon
      case 'CV': // Cabo Verde
      case 'CF': // Central African Republic
      case 'TD': // Chad
      case 'KM': // Comoros
      case 'CD': // Congo (Democratic Republic of the)
      case 'CG': // Congo
      case 'CI': // Côte d’Ivoire
      case 'HR': // Croatia
      case 'CY': // Cyprus
      case 'CZ': // Czech Republic
      case 'DK': // Denmark
      case 'DJ': // Djibouti
      case 'EG': // Egypt
      case 'GQ': // Equatorial Guinea
      case 'ER': // Eritrea
      case 'EE': // Estonia
      case 'ET': // Ethiopia
      case 'FK': // Falkland Islands
      case 'FO': // Faroe Islands
      case 'FI': // Finland
      case 'FR': // France
      case 'GA': // Gabon
      case 'GM': // Gambia
      case 'GE': // Georgia
      case 'DE': // Germany
      case 'GH': // Ghana
      case 'GI': // Gibraltar
      case 'GR': // Greece
      case 'GL': // Greenland
      case 'GG': // Guernsey
      case 'GN': // Guinea
      case 'GW': // Guinea-Bissau
      case 'VA': // Vatican City
      case 'HU': // Hungary
      case 'IS': // Iceland
      case 'IR': // Iran
      case 'IQ': // Iraq
      case 'IE': // Ireland
      case 'IM': // Isle of Man
      case 'IL': // Israel
      case 'IT': // Italy
      case 'JE': // Jersey
      case 'JO': // Jordan
      case 'KZ': // Kazakhstan
      case 'KE': // Kenya
      case 'KV': // Korea (Democratic People’s Republic of)
      case 'KR': // Korea (Republic of)
      case 'KW': // Kuwait
      case 'LV': // Latvia
      case 'LB': // Lebanon
      case 'LS': // Lesotho
      case 'LR': // Liberia
      case 'LY': // Libya
      case 'LI': // Liechtenstein
      case 'LT': // Lithuania
      case 'LU': // Luxembourg
      case 'MK': // Macedonia
      case 'MG': // Madagascar
      case 'MW': // Malawi
      case 'ML': // Mali
      case 'MT': // Malta
      case 'MR': // Mauritania
      case 'MU': // Mauritius
      case 'YT': // Mayotte
      case 'MD': // Moldova
      case 'MC': // Monaco
      case 'ME': // Montenegro
      case 'MA': // Morocco
      case 'MZ': // Mozambique
      case 'NA': // Namibia
      case 'NL': // Netherlands
      case 'NE': // Niger
      case 'NG': // Nigeria
      case 'NO': // Norway
      case 'OM': // Oman
      case 'PS': // Palestine
      case 'PL': // Poland
      case 'PT': // Portugal
      case 'QA': // Qatar
      case 'RE': // Réunion
      case 'RO': // Romania
      case 'RU': // Russia
      case 'RW': // Rwanda
      case 'SH': // Saint Helena
      case 'SM': // San Marino
      case 'ST': // Sao Tome and Principe
      case 'SA': // Saudi Arabia
      case 'SN': // Senegal
      case 'RS': // Serbia
      case 'SC': // Seychelles
      case 'SL': // Sierra Leone
      case 'SK': // Slovakia
      case 'SI': // Slovenia
      case 'SO': // Somalia
      case 'ZA': // South Africa
      case 'GS': // South Georgia and the South Sandwich Islands
      case 'ES': // Spain
      case 'SD': // Sudan
      case 'SJ': // Svalbard
      case 'SZ': // Swaziland
      case 'SE': // Sweden
      case 'CH': // Switzerland
      case 'SY': // Syria
      case 'TZ': // Tanzania
      case 'TG': // Togo
      case 'TN': // Tunisia
      case 'TR': // Turkey
      case 'UG': // Uganda
      case 'UA': // Ukraine
      case 'AE': // United Arab Emirates
      case 'GB': // United Kingdom
      case 'EH': // Western Sahara
      case 'YE': // Yemen
      case 'ZM': // Zambia
      case 'ZW': // Zimbabwe
        $form['00NA00000067Ahk']['#default_value'] = 'EMEA';
        break;

      case 'AP': // Asia Pacific
      case 'AS': // American Samoa
      case 'AQ': // Antarctica
      case 'AU': // Australia
      case 'BD': // Bangladesh
      case 'BT': // Bhutan
      case 'IO': // British Indian Ocean Territory
      case 'BN': // Brunei Darussalam
      case 'KH': // Cambodia
      case 'CN': // China
      case 'CX': // Christmas Island
      case 'CC': // Cocos (Keeling) Islands
      case 'CK': // Cook Islands
      case 'FJ': // Fiji
      case 'PF': // French Polynesia
      case 'TF': // French Southern Territories
      case 'GU': // Guam
      case 'HM': // Heard Island and McDonald Islands
      case 'HK': // Hong Kong
      case 'IN': // India
      case 'ID': // Indonesia
      case 'JP': // Japan
      case 'KI': // Kiribati
      case 'KG': // Kyrgyzstan
      case 'LA': // Laos
      case 'MO': // Macao
      case 'MY': // Malaysia
      case 'MV': // Maldives
      case 'MH': // Marshall Islands
      case 'FM': // Micronesia
      case 'MN': // Mongolia
      case 'MM': // Myanmar
      case 'NR': // Nauru
      case 'NP': // Nepal
      case 'NC': // New Caledonia
      case 'NZ': // New Zealand
      case 'NU': // Niue
      case 'NF': // Norfolk Island
      case 'MP': // Northern Mariana Islands
      case 'PK': // Pakistan
      case 'PW': // Palau
      case 'PG': // Papua New Guinea
      case 'PH': // Philippines
      case 'PN': // Pitcairn
      case 'WS': // Samoa
      case 'SG': // Singapore
      case 'SB': // Solomon Islands
      case 'SS': // South Sudan
      case 'LK': // Sri Lanka
      case 'TW': // Taiwan
      case 'TJ': // Tajikistan
      case 'TH': // Thailand
      case 'TL': // Timor-Leste
      case 'TK': // Tokelau
      case 'TO': // Tonga
      case 'TM': // Turkmenistan
      case 'TV': // Tuvalu
      case 'UM': // United States Minor Outlying Islands
      case 'UZ': // Uzbekistan
      case 'VU': // Vanuatu
      case 'VN': // Viet Nam
      case 'WF': // Wallis and Futuna
        $form['00NA00000067Ahk']['#default_value'] = 'APAC';
        break;
    }
  }
  $form['00NA00000067AhfMAE'] = [
    '#type' => 'textarea',
    '#title' => t('Project description'),
    '#title_display' => 'invisible',
    '#rows' => 5,
    '#resizable' => FALSE,
    '#required' => TRUE,
    '#attributes' => [
      'placeholder' => t('* Required: Project description'),
    ],
  ];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Get Connected'),
    '#submit' => array('drupalorg_lead_capture_submit'),
  ];

  // Protect the partner form with honeypot
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));

  return $form;
}

/**
 * Submit handler for sponsored form for industry landing pages
 */
function drupalorg_lead_capture_submit($form, &$form_state) {
  // The external form action url
  $url = variable_get('salesforce_lead_url', 'https://webto.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8');
  // The form input
  $form_input = array(
    'oid' => '00DA0000000ARBs',
    'retURL' => $form_state['input']['retURL'],
    '00NA00000067D9R' => $form_state['input']['00NA00000067D9R'], // Source URL
    'first_name' => $form_state['input']['first_name'],
    'last_name' => $form_state['input']['last_name'],
    'email' => $form_state['input']['email'],
    'phone' => $form_state['input']['phone'],
    'company' => $form_state['input']['company'],
    '00NA00000067Mm6' => $form_state['input']['00NA00000067Mm6'], // Country
    '00NA00000067Ahk' => $form_state['input']['00NA00000067Ahk'], // Region
    '00NA00000067AhfMAE' => $form_state['input']['00NA00000067AhfMAE'], // Project description
  );
  // Build the form input into the correct query format
  $data = http_build_query($form_input, '', '&');

  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8'),
  );

  $response = drupal_http_request($url, $options);

  if (!empty($response->error)) {
    form_set_error('', t('There was an error with your form submission. Please try again. If the issue persists, contact us at <a href="mailto:help@drupal.org">help@drupal.org</a>.'));
  }
  else {
    drupal_set_message(t('Thank you for your submission.'));
  }
}

/**
 * Add mollom form protection to these custom form(s)
 */
function drupalorg_mollom_form_list() {
  $forms['drupalorg_lead_capture_form'] = array(
    'title' => 'Partner Lead Capture Form',
  );
  return $forms;
}

/**
 * Set the mollomg protection mode for custom form(s)
 */
function drupalorg_mollom_form_info($form_id) {
  switch ($form_id) {
    case 'drupalorg_lead_capture_form':
      $form_info = array(
        'mode' => MOLLOM_MODE_ANALYSIS,
      );
      return $form_info;
  }
}

/**
 * Get a request header and set the reponse Vary header to cache accordingly.
 *
 * @param $header_name
 *   Request header name like 'GeoIP-continent'.
 * @return
 *   If found, the request header value, or FALSE.
 */
function drupalorg_get_and_vary_header($header_name) {
  static $called = FALSE;

  if (!$called) {
    $called = TRUE;
    // Don’t use Drupal’s page cache.
    drupal_page_is_cacheable(FALSE);
    // We still want external caching.
    if (user_is_anonymous() && variable_get('cache')) {
      drupal_add_http_header('Cache-Control', 'public, max-age=' . variable_get('page_cache_maximum_age', 0));
    }
    // We still want to vary on cookie.
    drupal_add_http_header('Vary', 'Cookie', TRUE);
  }

  // Vary based on header we are checking.
  drupal_add_http_header('Vary', $header_name, TRUE);
  // Check the header.
  $header = 'HTTP_' . str_replace('-', '_', drupal_strtoupper($header_name));
  if (isset($_SERVER[$header])) {
    return $_SERVER[$header];
  }
  return FALSE;
}

/**
 * Implements hook_comment_delete().
 */
function drupalorg_comment_delete($comment) {
  // Ensure all comments that are deleted get captured in drupalorg_comment_deleted table.
  // If a comment had spam flags, tell us how many.
  $flag_counts = flag_get_counts('comment', $comment->cid);
  // Insert comment into drupalorg_comment_deleted.
  db_insert('drupalorg_comment_deleted')->fields([
    'cid' => $comment->cid,
    'pid' => $comment->pid,
    'nid' => $comment->nid,
    'uid' => $comment->uid,
    'subject' => $comment->subject,
    'hostname' => $comment->hostname,
    'created' => $comment->created,
    'changed' => $comment->changed,
    'status' => $comment->status,
    'thread' => $comment->thread,
    'name' => $comment->name,
    'mail' => $comment->mail,
    'homepage' => $comment->homepage,
    'language' => $comment->language,
    'comment_body' => $comment->comment_body['und'][0]['safe_value'],
    'flag_count' => isset($flag_counts['drupalorg_comment_spam']) ? $flag_counts['drupalorg_comment_spam'] : 0,
  ])->execute();
}

/**
 * Implements hook_element_info_alter().
 *
 * Sets the default format if the user’s default format is filtered_html.
 */
function drupalorg_element_info_alter(&$type) {
  array_unshift($type['text_format']['#pre_render'], 'drupalorg_process_filter_format');
}

/**
 * Callback function to process the filter format and remove the fieldset.
 */
function drupalorg_process_filter_format($element) {
  // If no format is found, exit.
  if (!isset($element['format'])) {
    return $element;
  }

  // By default, disable ckeditor.
  $element['value']['#wysiwyg'] = FALSE;

  // Disable the summary value wysiwyg.
  if (isset($element['summary'])) {
    $element['summary']['#wysiwyg'] = FALSE;
  }

  // Disable Depricated input filter, unless its already being used
  if ($element['format']['format']['#default_value'] != '5') {
    unset($element['format']['format']['#options'][5]);
  }

  // Progressively enable ckeditor for specific entities & bundles / CTs.
  if (isset($element['#entity_type'])) {
    $bundles_to_enable = ['page', 'post', 'section', 'guide', 'documentation'];

    switch ($element['#entity_type']) {
      case 'node':
        if (in_array($element['#bundle'], $bundles_to_enable)) {
          $element['value']['#wysiwyg'] = TRUE;
          // Disable the summary value wysiwyg.
          if (isset($element['summary'])) {
            $element['summary']['#wysiwyg'] = TRUE;
          }
        }
        break;

      case 'comment':
        if (in_array(str_replace('comment_node_', '', $element['#bundle']), $bundles_to_enable)) {
          $element['value']['#wysiwyg'] = TRUE;
        }
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_preprocess_node_add_list().
 */
function drupalorg_preprocess_node_add_list(&$v) {
  // Remove add Documentation guide & page links. They should be added directly
  // from their parent guide.
  foreach ($v['content'] as $key => $value) {
    if (in_array($value['path'], ['node/add/guide', 'node/add/documentation'])) {
      unset($v['content'][$key]);
    }
  }
}

/**
 * Get nids of a project’s open issues tagged “security”.
 */
function drupalorg_project_open_security_tagged_issues(stdClass $node) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', project_issue_issue_node_types())
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_project', 'target_id', $node->nid)
    ->fieldCondition('field_issue_status', 'value', project_issue_open_states())
    ->fieldCondition('field_issue_status', 'value', variable_get('project_issue_state_fixed', PROJECT_ISSUE_STATE_FIXED), '!=')
    ->fieldCondition('taxonomy_vocabulary_9', 'tid', 1230)
    ->execute();
  if (isset($result['node'])) {
    return array_keys($result['node']);
  }

  return FALSE;
}

/**
 * Implements hook_preprocess_project_issue_issue_cockpit().
 */
function drupalorg_preprocess_project_issue_issue_cockpit(&$variables) {
  // Subscribe link in moved into the project-follow block.
  $variables['issue_subscribe'] = '';
}

/**
 * Build project browsing navigation form.
 *
 * @param object $project_type
 *   A node type object.
 */
function drupalorg_browse_projects_form($form, &$form_state, $project_type) {
  $form['#method'] = 'get';
  if (user_is_logged_in()) {
    $form['#token'] = FALSE;
  }

  $label = drupalorg_project_node_type_label($project_type->type, 'plural');
  if (arg(0) === 'project') {
    // On project browsing pages, not search page, add results count.
    global $pager_total_items;

    $form['results'] = [
      '#markup' => '<h3 class="results-count">' . t('@result @type match your search', ['@result' => number_format($pager_total_items[0]), '@type' => $label]) . '</h3>',
      '#weight' => -10,
    ];
  }

  // Create a drop-down for each related vocabulary.
  $vocabs = [];
  $fields_info = field_info_instances('node', $project_type->type);
  foreach ($fields_info as $field_name => $value) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'taxonomy_term_reference' && $field_name != 'taxonomyextra') {
      foreach ($field_info['settings']['allowed_values'] as $allowed_vocab) {
        $vocabs[$allowed_vocab['vocabulary']] = TRUE;
      }
    }
  }

  $env_id = apachesolr_default_environment();

  // Use the Apachesolr query string 'f'.
  $form['f'] = ['#tree' => TRUE];

  // Add the API compatibilty option, if applicable.
  $api_vocab = FALSE;
  if (module_exists('project_release')) {
    $api_vocab = taxonomy_vocabulary_load(variable_get('project_release_api_vocabulary', ''));
    $vocabs[$api_vocab->machine_name] = TRUE;
  }

  $vocab_names = taxonomy_vocabulary_get_names();
  foreach (array_keys($vocabs) as $vocab) {
    $vocab = taxonomy_vocabulary_machine_name_load($vocab);
    $terms = taxonomy_get_tree($vocab->vid);
    $options = ['' => t(' - Any -')];

    // Filter values take the form of facet_name:facet_value.
    $facet_machine_name = 'im_vid_' . $vocab->vid;
    // Special facet machine name if this is the API vocab.
    if ($api_vocab && $api_vocab->vid === $vocab->vid) {
      // Load facet definition.
      $facet_definition = facetapi_facet_load('im_project_release_api_tids', 'apachesolr@' . $env_id);
      $facet_machine_name = $facet_definition['field alias'];
    }
    foreach ($terms as $term) {
      $options[$facet_machine_name . ':' . $term->tid] = $term->name;
    }

    $form['f'][] = [
      '#type' => 'select',
      '#title' => check_plain($vocab->name),
      '#options' => $options,
    ];
  }

  // Add the project sandbox fields.
  $form['f'][] = [
    '#title' => t('Status'),
    '#type' => 'select',
    '#options' => [
      'sm_field_project_type:full' => t('Full projects'),
      'sm_field_project_type:[* TO *]' => t('All projects'),
      'sm_field_project_type:sandbox' => t('Only sandbox projects'),
    ],
  ];

  // Add has stable releases.
  $form['f'][] = [
    '#title' => t('Stability'),
    '#type' => 'select',
    '#options' => [
      '' => t('All projects'),
      'bs_project_release_has_full:true' => t('Has a supported stable release'),
    ],
  ];

  // Fill in default values.
  if (isset($_GET['f'])) {
    foreach (array_filter($_GET['f']) as $n => $value) {
      if (isset($form['f'][$n])) {
        $form['f'][$n]['#default_value'] = $value;
      }
    }
  }

  if (arg(0) === 'project') {
    $form['text'] = [
      '#title' => t('Search @label', ['@label' => $label]),
      '#type' => 'textfield',
      '#size' => 20,
    ];
  }

  $form['solrsort'] = [
    '#type' => 'select',
    '#title' => t('Sort by'),
    '#options' => [
      'score desc' => t('Relevancy'),
      'sort_label asc' => t('Title'),
      'ss_name asc' => t('Author'),
      'ds_created desc' => t('Created date'),
      'ds_project_latest_release desc' => t('Last release'),
      'ds_project_latest_activity desc' => t('Last build'),
    ],
    '#default_value' => 'score desc',
  ];
  if (module_exists('project_usage')) {
    $form['solrsort']['#options']['iss_project_release_usage desc'] = t('Most installed');
  }

  if (apachesolr_has_searched($env_id) && ($query = apachesolr_current_query($env_id))) {
    $params = $query->getParams();
    if (isset($params['q'])) {
      $form['text']['#default_value'] = $params['q'];
    }

    foreach ($query->getFilters() as $key => $filter) {
      // If site search is filtering on ss_meta_type, include it.
      if ($filter['#name'] === 'ss_meta_type') {
        $form['f'][] = [
          '#type' => 'hidden',
          '#value' => $filter['#name'] . ':' . $filter['#value'],
        ];
      }
    }

    $sort = $query->getSolrsort();
    $form['solrsort']['#default_value'] = $sort['#name'] . ' ' . $sort['#direction'];
  }

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 101,
  ];

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalorg_form_drupalorg_browse_projects_form_alter(&$form, &$form_state) {
  // Unset form_id etc.
  unset($form['form_id'], $form['form_build_id'], $form['token']);
}
