<?php

/**
 * @file
 *   Install and upgrade functionality for drupalorg.module.
 */

/**
 * Implements hook_schema().
 */
function drupalorg_schema() {
  $system_schema = system_schema();
  $schema = array(
    'drupalorg' => $system_schema['cache'],
  );
  $schema['drupalorg']['description'] = 'Cache table for home page map data, with a mediocre name.';
  return $schema;
}

/**
 * Set the system weight heavier than cvslog so our form_alter comes later.
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_install() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'drupalorg')
    ->execute();
}

/**
 * Update dependencies.
 */
function drupalorg_update_dependencies() {
  // List of all contrib modules used on drupal.org.
  $contrib_modules = array(
    'apachesolr',
    'apachesolr_search',
    'apachesolr_test',
    'apachesolr_access',
    'apachesolr_mess_up_results',
    'apachesolr_multisitesearch',
    'autoload',
    'bakery',
    'beanstalkd',
    'bueditor',
    'content',
    'fieldgroup',
    'nodereference',
    'optionwidgets',
    'userreference',
    'codefilter',
    'comment_alter_taxonomy',
    'comment_upload',
    'bulk_export',
    'ctools',
    'ctools_access_ruleset',
    'ctools_ajax_sample',
    'ctools_custom_content',
    'ctools_plugin_example',
    'page_manager',
    'stylizer',
    'views_content',
    'cvsmigration',
    'ctools_plugin_test',
    'ctools_export_test',
    'date_timezone',
    'devel',
    'devel_generate',
    'content_migrate',
    'dbtng',
    'devel_node_access',
    'cck',
    'diff',
    'advert',
    'bingo',
    'branches',
    'handbook',
    'pivots_block',
    'planet_drupal_subscription',
    'project_stuff',
    'quick_stats',
    'redirects',
    'searchquery',
    'drupalorg',
    'drupalorg_git_gateway',
    'drupalorg_git_varnish',
    'drupalorg_handbook',
    'drupalorg_honeypot',
    'drupalorg_metrics',
    'drupalorg_news',
    'drupalorg_order_facet',
    'drupalorg_project',
    'drupalorg_search',
    'drupalorg_versioncontrol',
    'entityreference_behavior_example',
    'entityreference',
    'entity',
    'drupalorg_profile_spam',
    'drupalorg_project_customizations',
    'conflict',
    'field_collection',
    'lists',
    'drupalorg_case_studies',
    'drupalorg_change_notice',
    'project_verify_package',
    'project_xmlrpc_legacy',
    'role_activity',
    'drupalorg_crosssite',
    'dereference_list',
    'drupalorg_grid',
    'drupalorg_marketplace',
    'drupalorg_packaging_whitelist',
    'drupal_queue',
    'drush',
    'drupalorg_home_support',
    'drupalorg_user',
    'drush_tools',
    'fasttoggle',
    'features',
    'features_test',
    'filefield',
    'filter_html_image_secure',
    'flag',
    'flag_actions',
    'flot',
    'forum2',
    'google_admanager',
    'googleanalytics',
    'homebox',
    'homebox_example',
    'homebox_og',
    'honeypot',
    'html5_user_geolocation',
    'httpbl',
    'image_gallery',
    'entity_feature',
    'imageapi',
    'imageapi_gd',
    'imagecache',
    'imagecache_ui',
    'imagefield',
    'jcarousel',
    'jquery_ui',
    'link',
    'materialized_view',
    'mv_drupalorg',
    'mv_sources',
    'memcache',
    'memcache_admin',
    'multiple_email',
    'paranoia',
    'entity_test',
    'path_redirect',
    'phpass',
    'project_legacy_paths',
    'project_package',
    'project_release',
    'project_usage',
    'flag_tracker',
    'project',
    'project_dependency',
    'project_git_instructions',
    'project_issue_generate',
    'project_issue_search_index',
    'pift_client',
    'pift',
    'flot_example',
    'project_issue',
    'flot_views',
    'pift_server',
    'pifr_xmlrpc',
    'project_solr',
    'sampler',
    'sampler_example',
    'entity_test_i18n',
    'sshkey',
    'sshkey_blacklist',
    'tracker2',
    'commitlog',
    'versioncontrol_test',
    'versioncontrol_git_repo_manager',
    'versioncontrol_project',
    'versioncontrol_project_git',
    'versioncontrol_release',
    'admin_devel',
    'versioncontrol_git',
    'views',
    'entity_token',
    'views_ui',
    'actions_permissions',
    'views_bulk_operations',
    'views_field_view',
    'versioncontrol',
    'views_litepager',
    'views_sparkline',
    'waiting_queue',
    'xapian',
    'contributor_links',
    'field_extrawidgets',
    'views_content_cache',
    'handbook_license',
    'field_group',
    'bluecheese',
    'geolocation',
    'geolocation_googlemaps',
    'geolocation_html5',
    'machine_name',
    'migrate_example',
    'migrate_example_oracle',
    'migrate_ui',
    'node_reference',
    'migrate',
    'migrate_example_baseball',
    'nodechanges',
    'references',
    'redirect',
    'switchtheme',
    'token',
    'token_test',
    'user_reference',
    'user_restrictions',
    'user_restrictions_ui',
    'views_test',
    'relation',
    'relation_dummy_field',
    'devel_themer',
    'field_inspector',
    'git_deploy',
    'simplehtmldom',
    'relation_endpoint',
    'relation_entity_collector',
    'relation_migrate',
    'relation_migrate_test',
    'relation_rules_test',
    'relation_ui',
  );

  $dependencies = array(
    'drupalorg' => array(
      // drupalorg_update_7003() after profile_update_7001() so that
      // {profile_field} exists.
      // Also ensure system_update_7052 has run.
      7003 => array(
        'profile' => 7001,
        'system'=> 7052,
      ),
      // drupalorg_update_7006() after tracker_update_7000() so that tracker
      // tables exist.
      7006 => array(
        'tracker' => 7000,
      ),
      // drupalorg_update_7015() after project_update_7006(), which enables
      // pathauto, and drupalorg_project_update_7003(), which sets up project
      // node types.
      7015 => array(
        'project' => 7006,
        'drupalorg_project' => 7003,
      ),
      // drupalorg_update_7021() after link_update_7001() because link
      // carelessly updates field instance configuration.
      7021 => array(
        'link' => 7001,
      ),
      // drupalorg_update_7023() after filter_html_image_secure_update_7000()
      // so filter_html_image_secure can update legacy formats first.
      7023 => array(
        'filter_html_image_secure' => 7000,
      ),
    ),
    // drupalorg_update_7003() needs to run before any call to module_enable()
    // because that triggers feature rebuilds. Field types need to be enabled
    // ahead of time.
    'project' => array(
      7000 => array(
        'drupalorg' => 7003,
      ),
    ),
    // project_release_update_7000() needs to run after
    'project_release' => array(
      7000 => array(
        // profile_update_7001() because enabling field_collection module ends
        // up using the {profile_field} table.
        'profile' => 7001,
        // and menu updates because enabling field collection rebuilds menus.
        'menu' => 7003,
      ),
    ),
  );

  // Force all contributed modules to run after core updates.
  foreach ($contrib_modules as $module) {
    $dependencies[$module][7000] = array(
      'system' => 7074,
      'forum' => 7012,
      'comment' => 7009,
      'menu' => 7003,
      'node' => 7013,
      'user' => 7018,
      'profile' => 7002,
    );
  }

  return $dependencies;
}

/**
 * Move users access column back to core default.
 */
function drupalorg_update_7000() {
}

/**
 * Remove cache headers columns.
 */
function drupalorg_update_7001() {
  $schema = system_schema_cache_7054();
  $cache_tables = array(
    'drupalorg' => 'Cache table for home page map data, with a mediocre name.',
  );
  foreach ($cache_tables as $table => $description) {
    $schema['description'] = $description;
    db_drop_table($table);
    db_create_table($table, $schema);
  }
}

/**
 * Disable aggregator feed blocks, there are so many that they overwhelm the
 * block admin UI.
 */
function drupalorg_update_7002() {
  db_update('aggregator_feed')
    ->fields(array('block' => 0))
    ->execute();
}

/**
 * Enable new dependencies for features.
 */
function drupalorg_update_7003() {
  // For change notice.
  module_enable(array('entity', 'entityreference', 'machine_name', 'file', 'list', 'field_group'));
  // For marketplace and case studies.
  module_enable(array('references'));
  module_enable(array('node_reference', 'user_reference'));
  // For beanstalk
  module_enable(array('libraries'));

  drupal_flush_all_caches();
}

/**
 * Migrate user locations.
 */
function drupalorg_update_7004() {
  module_enable(array('drupalorg_user', 'drupalorg_home_support'));
  features_flush_caches();

  // This will generate the field data using the math functions built into the
  // database instead of needing to run multiple queries and round-trip to php.
  $query = db_select('html5_user_geolocation', 'hug');
  $query->innerJoin('users', 'u', 'u.uid = hug.uid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'user'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'user'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('u', 'uid', 'entity_id');
  $query->addField('u', 'uid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('hug', 'latitude', 'field_user_geolocation_lat');
  $query->addField('hug', 'longitude', 'field_user_geolocation_lng');
  $query->addExpression('SIN(RADIANS(hug.latitude))', 'field_user_geolocation_lat_sin');
  $query->addExpression('COS(RADIANS(hug.latitude))', 'field_user_geolocation_lat_cos');
  $query->addExpression('RADIANS(hug.longitude)', 'field_user_geolocation_lng_rad');

  $query2 = clone($query);
  // Direct field injection for speed reasons.
  db_insert('field_data_field_user_geolocation')
    ->from($query)
    ->execute();
  db_insert('field_revision_field_user_geolocation')
    ->from($query2)
    ->execute();
  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();

  db_drop_table('html5_user_geolocation');
}

/**
 * Populate tracker.
 */
function drupalorg_update_7006() {
  module_enable(array('tracker'));
  // Tell the normal indexer that everything's up to date.
  variable_set('tracker_index_nid', 0);
  // Quickly recalculate the tracker using a few massive queries instead of
  // indexing a single node at a time.
  db_query('TRUNCATE {tracker_node}');
  db_query('TRUNCATE {tracker_user}');
  // Tracker entry for all nodes.
  db_query("INSERT INTO {tracker_node} (nid, published, changed) (SELECT n.nid, n.status, GREATEST(n.changed, IFNULL(MAX(c.changed), 0)) FROM {node} n LEFT JOIN {comment} c ON n.nid = c.nid GROUP BY n.nid)");
  // Add a temporary index to use for the next query.
  db_add_index('comment', 'tmp_tracking_idx', array('nid', 'status', 'uid'));
  // Tracker entries for commenters.
  db_query("INSERT INTO {tracker_user} (nid, uid, published, changed) (SELECT t.nid, c.uid, t.published, t.changed FROM {tracker_node} t INNER JOIN {comment} c ON t.nid = c.nid WHERE c.status = 1 GROUP BY c.nid, c.uid)");
  db_drop_index('comment', 'tmp_tracking_idx');
  // Tracker entry for node authors.
  db_query("INSERT IGNORE INTO {tracker_user} (nid, uid, published, changed) (SELECT n.nid, n.uid, t.published, t.changed FROM {tracker_node} t INNER JOIN {node} n ON t.nid = n.nid)");
  // Tracker entry for issue following.
  // @note I'm pretty sure core's reindexing would erase this if it kicks in. Filed as https://drupal.org/node/1829320
  db_query("INSERT IGNORE INTO {tracker_user} (nid, uid, published, changed) (SELECT f.content_id, f.uid, t.published, t.changed FROM {tracker_node} t INNER JOIN {flag_content} f ON t.nid = f.content_id AND f.content_type = 'node' AND f.fid = 4)");
}

/**
 * Update renamed dashboard block.
 */
function drupalorg_update_7007() {
  $query = db_select('homebox_users', 'hu');
  $query->condition('settings', '%tracker2_user%', 'LIKE');
  $query->fields('hu', array('uid', 'name', 'settings'));
  foreach ($query->execute() as $row) {
    $row->settings = unserialize($row->settings);
    if (isset($row->settings['tracker2_user'])) {
      $row->settings['drupalorg_tracker_user'] = $row->settings['tracker2_user'];
      $row->settings['drupalorg_tracker_user']['module'] = 'drupalorg';
      $row->settings['drupalorg_tracker_user']['delta'] = 'tracker_user';
      unset($row->settings['tracker2_user']);
      db_update('homebox_users')
        ->fields(array('settings' => serialize($row->settings)))
        ->condition('uid', $row->uid, '=')
        ->condition('name', $row->name, '=')
        ->execute();
    }
  }
}

/**
 * Moved to drupalorg_crosssite.
 */
function drupalorg_update_7008() {
  db_drop_table('drupalorg_civimembership');
}

/**
 * Patch user settings for homebox blocks that had block delta changes.
 */
function drupalorg_update_7009() {
  // Need to handle both 9 and 10 element arrays due to "color" key going away.
  $old = 's:19:"drupalorg_project_0";a:10:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:1:"0";';
  $new = 's:29:"drupalorg_project_bingo-block";a:10:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:11:"bingo-block";';
  db_query("UPDATE {homebox_users} SET settings = REPLACE(settings, :old, :new)", array(':old' => $old, ':new' => $new));
  $old = 's:19:"drupalorg_project_0";a:9:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:1:"0";';
  $new = 's:29:"drupalorg_project_bingo-block";a:9:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:11:"bingo-block";';
  db_query("UPDATE {homebox_users} SET settings = REPLACE(settings, :old, :new)", array(':old' => $old, ':new' => $new));
}

/**
 * Port ALL permissions/role bindings over to their new D7 equivalents.
 *
 * For the sake of brevity in our update hook numbers, we have agreed to
 * retroactively update this hook as we discover new permissions issues.
 * Normally this is a no-no, but since we have a structured migration
 * process, it is acceptable to do until we launch the D7 switch.
 */
function drupalorg_update_7010() {

  // Define the d.o D7 permission matrix. The top-level keys are role id. The
  // nested associative arrays are keyed by module name and define the
  // permissions for that module.
  $perm_matrix = array(
    // Anonymous
    '1' => array(
      'aggregator' => array(
        'access news feeds',
      ),
      'comment' => array(
        'access comments',
      ),
      'commitlog' => array(
        'access commit messages',
      ),
      'filter' => array(
        'use text format 1',
      ),
      'node' => array(
        'access content',
      ),
      'project_usage' => array(
        'view project usage',
      ),
      'search' => array(
        'search content',
        'use advanced search',
      ),
      'user' => array(
        'access user profiles',
      ),
    ),

    // Authenticated
    '2' => array(
      'aggregator' => array(
        'access news feeds',
      ),
      'book' => array(
        'access printer-friendly version',
        'add content to books',
      ),
      'comment' => array(
        'access comments',
        'post comments',
        'skip comment approval',
      ),
      'commitlog' => array(
        'access commit messages',
      ),
      'contact' => array(
        'access site-wide contact form',
        'access user contact forms',
      ),
      'filter' => array(
        'use text format 1',
      ),
      'multiple_email' => array(
        'use multiple emails',
      ),
      'node' => array(
        'access content',
        'create book content',
        'create book_listing content',
        'create casestudy content',
        'create changenotice content',
        'create forum content',
        'create organization content',
        'create project_issue content',
        'delete own organization content',
        'edit any book content',
        'edit own book_listing content',
        'edit any changenotice content',
        'edit own casestudy content',
        'edit own forum content',
        'edit own organization content',
        'edit any project_issue content',
        'view own unpublished content',
        'view revisions',
      ),
      'pift' => array(
        'pift re-test files',
      ),
      'project_usage' => array(
        'view project usage',
      ),
      'search' => array(
        'search content',
        'use advanced search',
      ),
      'sshkey' => array(
        'manage own SSH public keys',
        'view own SSH public keys',
      ),
      'user' => array(
        'access user profiles',
        'change own username',
      ),
    ),

    // Administrator
    '3' => array(
      'aggregator' => array(
        'administer news feeds',
      ),
      'block' => array(
        'administer blocks',
      ),
      'book' => array(
        'administer book outlines',
        'create new books',
      ),
      'bueditor' => array(
        'administer bueditor',
      ),
      'comment' => array(
        'administer comments',
      ),
      'contact' => array(
        'administer contact forms',
      ),
      'devel' => array(
        'access devel information',
      ),
      'facetapi' => array(
        'administer facets',
      ),
      'fasttoggle' => array(
        'administer fasttoggle',
        'moderate comments',
        'moderate posts',
        'moderate users',
        "toggle role 'Not a spammer'",
      ),
      'features' => array(
        'administer features',
        'manage features',
      ),
      'field_collection' => array(
        'administer field collections',
      ),
      'field_group' => array(
        'administer fieldgroups',
      ),
      'filter' => array(
        'administer filters',
        'use text format 3',
      ),
      'flag' => array(
        'administer flags' => 'flag',
      ),
      'forum' => array(
        'administer forums',
      ),
      'googleanalytics' => array(
        'administer google analytics',
        'opt-in or out of tracking',
      ),
      'google_admanager' => array(
        'administer google admanager',
      ),
      'homebox' => array(
        'administer homebox',
      ),
      'honeypot' => array(
        'administer honeypot',
        'bypass honeypot protection',
      ),
      'httpbl' => array(
        'admin httpbl',
        'report httpbl',
      ),
      'image' => array(
        'administer image styles',
      ),
      'lists' => array(
        'post to newsletter',
      ),
      'menu' => array(
        'administer menu',
      ),
      'node' => array(
        'access content overview',
        'administer nodes',
        'bypass node access',
        'administer content types',
        // All the other explicit delete/edit perms are pointless given that
        // this role already has 'administer nodes'.
      ),
      'path' => array(
        'administer url aliases',
        'create url aliases',
      ),
      'pift' => array(
        'access pift project testing tab',
        'access pift settings for all projects',
        'access pift settings for own projects',
        'pift re-test files',
      ),
      'project' => array(
        'administer projects',
      ),
      'redirect' => array(
        'administer redirects',
      ),
      'role_activity' => array(
        'view role activity',
      ),
      'search' => array(
        'administer search',
      ),
      'sshkey' => array(
        'view any SSH public keys',
        'manage any SSH public keys',
        'administer SSH public keys',
      ),
      'system' => array(
        'administer modules',
        'administer site configuration',
        'administer themes',
        'administer software updates',
        'administer actions',
        'access administration pages',
        'access site in maintenance mode',
        'view the administration theme',
        'access site reports',
        'block IP addresses',
      ),
      'taxonomy' => array(
        'administer taxonomy',
      ),
      'user' => array(
        'administer permissions',
        'administer users',
      ),
      'versioncontrol' => array(
        'administer version control systems',
      ),
      'views' => array(
        'administer views',
      ),
    ),

    // Site maintainer
    '4' => array(
      'aggregator' => array(
        'administer news feeds',
      ),
      'book' => array(
        'administer book outlines',
        'create new books',
      ),
      'comment' => array(
        'administer comments',
      ),
      'fasttoggle' => array(
        'moderate comments',
        'moderate posts',
      ),
      'filter' => array(
        'use text format 3',
      ),
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'node' => array(
        'access content overview',
        'administer nodes',
        'bypass node access',
        // All the other explicit delete/edit perms are pointless given that
        // this role already has 'administer nodes'.
      ),
      'path' => array(
        'administer url aliases',
        'create url aliases',
      ),
      'redirect' => array(
        'administer redirects',
      ),
      'system' => array(
        'access administration pages',
        'access site reports',
        'view the administration theme',
      ),
      'taxonomy' => array(
        'administer taxonomy',
      ),
    ),

    // User administrator
    '7' => array(
      'fasttoggle' => array(
        'moderate users',
        "toggle role 'Not a spammer'",
      ),
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'role_activity' => array(
        'view role activity',
      ),
      'sshkey' => array(
        'manage any SSH public keys',
        'view any SSH public keys',
      ),
      'system' => array(
        'access administration pages',
        'view the administration theme',
      ),
      'user' => array(
        'administer users',
      ),
    ),

    // List maintainer
    '12' => array(
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'lists' => array(
        'post to newsletter',
      ),
    ),

    // Testing administrator
    '14' => array(
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'pift' => array(
        'access pift settings for all projects',
      ),
      'project' => array(
        'administer projects',
      ),
      'system' => array(
        'access administration pages',
        'view the administration theme',
      ),
    ),

    // drupal.org issue queue squad
    '16' => array(
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'project_issue' => array(
        'assign and be assigned project issues',
      ),
    ),

    // Git user
    '20' => array(
      'project' => array(
        'create sandbox projects',
        'delete own sandbox projects',
      ),
      'node' => array(
        'create project_core content',
        'edit own project_core content',
        'create project_distribution content',
        'edit own project_distribution content',
        'create project_drupalorg content',
        'edit own project_drupalorg content',
        'create project_module content',
        'edit own project_module content',
        'create project_theme content',
        'edit own project_theme content',
        'create project_theme_engine content',
        'edit own project_theme_engine content',
        'create project_translation',
        'edit own project_translation',
      ),
    ),

    // Git administrator
    '22' => array(
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'project' => array(
        'administer projects',
      ),
      'system' => array(
        'access administration pages',
        'access site reports',
        'view the administration theme',
      ),
      'versioncontrol' => array(
        'administer version control systems',
      ),
    ),

    // Git vetted user
    '24' => array(
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'project' => array(
        'create full projects',
      ),
      'pift' => array(
        'access pift settings for own projects',
        'access pift project testing tab',
      ),
    ),

    // Security team
    '26' => array(
      'comment' => array(
        'administer comments',
      ),
      'filter' => array(
        'use text format 3',
      ),
      'googleanalytics' => array(
        'opt-in or out of tracking',
      ),
      'honeypot' => array(
        'bypass honeypot protection',
      ),
      'lists' => array(
        'post to newsletter',
      ),
      'node' => array(
        'access content overview',
        'administer nodes',
        'bypass node access',
      ),
      'system' => array(
        'access administration pages',
        'view the administration theme',
      ),
      'user' => array(
        'administer users',
      ),
    ),

    // Packaging whitelist maintainer
    '28' => array(
      'honeypot' => array(
        'bypass honeypot protection'
      ),
      'node' => array(
        'create packaging_whitelist content',
        'delete any packaging_whitelist content',
        'edit any packaging_whitelist content',
      ),
    ),

    // Full HTML user
    '30' => array(
      'filter' => array(
        'use text format 3',
      ),
    ),

    // Documentation moderator
    '32' => array(
      'book' => array(
        'administer book outlines',
        'create new books',
      ),
      'comment' => array(
        'administer comments',
      ),
      'filter' => array(
        'use text format 3',
      ),
      'honeypot' => array(
        'bypass honeypot protection'
      ),
      'node' => array(
        'access content overview',
        'administer nodes',
        'bypass node access',
      ),
      'path' => array(
        'administer url aliases',
        'create url aliases',
      ),
      'redirect' => array(
        'administer redirects',
      ),
    ),

    // case studies editor
    '34' => array(
      'honeypot' => array(
        'bypass honeypot protection'
      ),
      'node' => array(
        'edit any casestudy content',
      ),
    ),

    // Not a spammer
    '36' => array(
      'honeypot' => array(
        'bypass honeypot protection'
      ),
    ),

    // Spam fighter
    '38' => array(
      'fasttoggle' => array(
        "toggle role 'Not a spammer'",
      ),
    ),
  );

  // Start with a clean slate:
  db_delete('role_permission')->execute();

  // Build up a query to insert everything from the matrix.
  $query = db_insert('role_permission')
    ->fields(array('rid', 'permission', 'module'));

  foreach ($perm_matrix as $rid => $role_info) {
    foreach ($role_info as $module => $perms) {
      foreach ($perms as $perm) {
        $query->values(
          array(
            'rid' => $rid,
            'permission' => $perm,
            'module' => $module,
          )
        );
      }
    }
  }
  $query->execute();

  // Configure our 'Administrator' role to get all future permissions.
  variable_set('user_admin_role', 3);

}

/**
 * Enable User Restrictions module.
 */
function drupalorg_update_7011() {
  // See #1699246.
  module_enable(array('user_restrictions'));
}

/**
 * Enable and configure Flag Tracker.
 */
function drupalorg_update_7012() {
  module_enable(array('flag_tracker'));
  variable_set('flag_tracker_track_flag_project_issue', 'project_issue_follow');
  variable_set('flag_tracker_show_followers_project_issue', 1);
}

/**
 * Enable redirect to replace path_redirect.
 */
function drupalorg_update_7014() {
  module_enable(array('redirect'));
}

/**
 * Project will enable pathauto. We want to control enabling other alias
 * patterns, so disable defaults.
 */
function drupalorg_update_7015() {
  variable_set('pathauto_node_pattern', '');
  variable_set('pathauto_user_pattern', '');
  variable_set('pathauto_forum_pattern', '');
  variable_set('pathauto_taxonomy_term_pattern', '');

  // Preserve underscores.
  variable_set('pathauto_punctuation_underscore', 2);

  // Aliases for sandboxes.
  foreach (project_project_node_types() as $type) {
    variable_set('pathauto_node_' . $type . '_pattern_sandbox', 'sandbox/[node:author:git-username]/[node:field_project_machine_name]');
  }
}

/**
 * Update order facet blocks for new project solr paths.
 */
function drupalorg_update_7016() {
  db_update('block')
    ->condition('module', 'drupalorg_order_facet')
    ->fields(array('pages' => "project/project_module\nproject/project_theme"))
    ->execute();
}

/**
 * Add project/project_module/categories path alias and legacy redirect.
 */
function drupalorg_update_7017() {
  $path = array(
    'source' => 'project/project_module/vocabulary_3',
    'alias' => 'project/project_module/categories',
  );
  path_save($path);

  $redirect = new stdClass();
  redirect_object_prepare($redirect);
  $redirect->source = 'project/modules/categories';
  $redirect->redirect = 'project/project_module/categories';
  redirect_save($redirect);
}

/**
 * Do not display the forums field.
 */
function drupalorg_update_7018() {
  $instance = field_read_instance('node', 'taxonomy_forums', 'forum');
  $instance['display']['default']['type'] = 'hidden';
  $instance['display']['teaser']['type'] = 'hidden';
  field_update_instance($instance);
}

/**
 * Do not display taxonomy for projects (drupalorg_project renders them elsewhere).
 */
function drupalorg_update_7019() {
  foreach (project_project_node_types() as $type) {
    foreach (array('taxonomy_vocabulary_3', 'taxonomy_vocabulary_44', 'taxonomy_vocabulary_46') as $field) {
      if ($instance = field_read_instance('node', $field, $type)) {
        $instance['display']['default']['type'] = 'hidden';
        field_update_instance($instance);
      }
    }
  }
}

/**
 * Core doesn't do us any favors updating the body field.
 */
function drupalorg_update_7020() {
  foreach (array('casestudy', 'organization', 'packaging_whitelist', 'forum', 'book', 'page', 'project_issue', 'story') as $type) {
    $instance = field_read_instance('node', 'body', $type);
    $instance['description'] = '';
    field_update_instance($instance);
  }
}

/**
 * Do not display many fields for projects (drupalorg_project renders them
 * elsewhere).
 */
function drupalorg_update_7021() {
  field_cache_clear();
  foreach (project_project_node_types() as $type) {
    foreach (array('field_project_homepage', 'field_project_documentation', 'field_project_license', 'field_project_changelog', 'field_project_demo', 'field_project_screenshots', 'field_project_type', 'field_project_machine_name', 'field_project_has_issue_queue', 'field_project_has_releases', 'field_release_version_format') as $field) {
      if ($instance = field_read_instance('node', $field, $type)) {
        $instance['display']['default']['type'] = 'hidden';
        field_update_instance($instance);
      }
    }
  }
}

/**
 * Do not display taxonomy fields on books and book listings.
 */
function drupalorg_update_7022() {
  foreach (array('taxonomy_vocabulary_31', 'taxonomy_vocabulary_38', 'taxonomy_vocabulary_5 ', 'taxonomy_vocabulary_54', 'taxonomy_vocabulary_56') as $field) {
    $instance = field_read_instance('node', $field, 'book');
    $instance['display']['default']['type'] = 'hidden';
    field_update_instance($instance);
  }
  foreach (array('taxonomy_vocabulary_38', 'taxonomy_vocabulary_5', 'taxonomy_vocabulary_54', 'taxonomy_vocabulary_56', 'taxonomy_vocabulary_60', 'taxonomy_vocabulary_62') as $field) {
    $instance = field_read_instance('node', $field, 'book_listing');
    $instance['display']['default']['type'] = 'hidden';
    field_update_instance($instance);
  }
}

/**
 * Add <!--> to allowed tags to work around http://drupal.org/node/881006.
 */
function drupalorg_update_7023() {
  foreach (filter_formats() as $format) {
    $format->filters = filter_list_format($format->format);
    if (isset($format->filters['filter_html'])) {
      $format->filters['filter_html']->settings['allowed_html'] .= ' <!-->';
      // Cast to array for saving.
      foreach (array_keys($format->filters) as $key) {
        $format->filters[$key] = (array) $format->filters[$key];
      }
      filter_format_save($format);
    }
  }
}

/**
 * Turn off summary for organization body field.
 */
function drupalorg_update_7025() {
  $instance = field_read_instance('node', 'body', 'organization');
  $instance['settings']['display_summary'] = FALSE;
  field_update_instance($instance);

  db_query("UPDATE {field_data_body} fdb INNER JOIN {node} n ON n.nid = fdb.entity_id AND n.type = 'organization' SET fdb.body_summary = NULL");
}

/**
 * Position pivots block.
 */
function drupalorg_update_7026() {
  db_update('block')
    ->condition('theme', 'bluecheese')
    ->condition('module', 'pivots_block')
    ->fields(array(
      'weight' => 13,
    ))
    ->execute();
}

/**
 * Add path aliases for hosting nodes.
 */
function drupalorg_update_7027() {
  path_delete(array('alias' => 'hosting'));
  $path = array(
    'alias' => 'hosting',
    'source' => 'node/2029631',
    'language' => LANGUAGE_NONE,
  );
  path_save($path);
  $path = array(
    'alias' => 'hosting/enterprise',
    'source' => 'node/2029703',
    'language' => LANGUAGE_NONE,
  );
  path_save($path);
  $path = array(
    'alias' => 'hosting/paas',
    'source' => 'node/2029743',
    'language' => LANGUAGE_NONE,
  );
  path_save($path);
  $redirect = new stdClass();
  redirect_object_prepare($redirect);
  $redirect->source = 'hosting/shared';
  $redirect->redirect = 'hosting';
  redirect_save($redirect);
}

/**
 * Ensure proper view modes enabled for casestudy content type.
 */
function drupalorg_update_7028() {
  $bundle_settings = field_bundle_settings('node', 'casestudy');
  $bundle_settings['view_modes']['nodechanges']['custom_settings'] = FALSE;
  $bundle_settings['view_modes']['issuemetadata']['custom_settings'] = FALSE;
  $bundle_settings['view_modes']['rss']['custom_settings'] = TRUE;
  $bundle_settings = field_bundle_settings('node', 'casestudy', $bundle_settings);
}

/**
 * Migrate codefilter configuration to the new filter table.
 */
function drupalorg_update_7029() {
  $query = db_select('d6_upgrade_filter')
    ->fields('d6_upgrade_filter', array('format', 'weight'))
    ->condition('module', 'codefilter')
    ->condition('delta', 0);
  db_delete('filter')->condition('module', 'codefilter')->execute();

  foreach ($query->execute() as $record) {
    db_insert('filter')
      ->fields(array(
        'format' => $record->format,
        'module' => 'codefilter',
        'name' => 'codefilter',
        'weight' => $record->weight,
        'settings' => serialize(array()),
        'status' => 1,
      ))
      ->execute();
  }

  db_delete('d6_upgrade_filter')
    ->condition('module', 'codefilter')
    ->execute();

  filter_formats_reset();
}

/**
 * Set up default project types on which to display the PIFT 'Automated Testing' tab.
 */
function drupalorg_update_7030() {
  variable_set('pift_project_types', array(
    'project_core' => 'project_core',
    'project_module' => 'project_module',
    'project' => 0,
    'project_distribution' => 0,
    'project_drupalorg' => 0,
    'project_theme' => 0,
    'project_theme_engine' => 0,
    'project_translation' => 0,
  ));
}

/**
 * Require forum's body field.
 */
function drupalorg_update_7031() {
  $instance = field_read_instance('node', 'body', 'forum');
  $instance['required'] = TRUE;
  field_update_instance($instance);
}

/**
 * Improve issue diff view.
 */
function drupalorg_update_7032() {
  // Enable revision comparison view mode.
  $bundle_settings = field_bundle_settings('node', 'project_issue');
  $bundle_settings['view_modes']['diff_standard']['custom_settings'] = TRUE;
  $bundle_settings = field_bundle_settings('node', 'project_issue', $bundle_settings);

  // Show issue tags.
  $instance = field_read_instance('node', 'taxonomy_vocabulary_9', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'taxonomy_term_reference_plain';
  field_update_instance($instance);

  // Show parent and related issues.
  $instance = field_read_instance('node', 'field_issue_parent', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'issue_id';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_related', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'issue_id';
  field_update_instance($instance);
}

/**
 * Improve diff view, part 2.
 */
function drupalorg_update_7033() {
  $instance = field_read_instance('node', 'body', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'text_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_assigned', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'token_formatters_entity_reference';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_category', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'list_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_component', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'list_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_files', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'extended_file_field';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_priority', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'list_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_status', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'list_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_issue_version', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'list_default';
  field_update_instance($instance);
  $instance = field_read_instance('node', 'field_project', 'project_issue');
  $instance['display']['diff_standard']['type'] = 'entityreference_label';
  field_update_instance($instance);
}

/**
 * Show VCS label on Release teaser.
 */
function drupalorg_update_7034() {
  $instance = field_read_instance('node', 'field_release_vcs_label', 'project_release');
  $instance['display']['teaser']['type'] = 'text_plain';
  $instance['display']['teaser']['label'] = 'inline';
  $instance['display']['teaser']['weight'] = 1;
  field_update_instance($instance);
}

/**
 * Only show contact page help to authenticated users who have access.
 */
function drupalorg_update_7035() {
  db_insert('block_role')
    ->fields(array(
      'module' => 'block',
      'delta' => db_query("SELECT bid FROM {block_custom} WHERE info = 'Contact page help'")->fetchField(),
      'rid' => DRUPAL_AUTHENTICATED_RID,
    ))->execute();
}

/**
 * Ensure proper view modes enabled for changenotice content type.
 */
function drupalorg_update_7036() {
  $bundle_settings = field_bundle_settings('node', 'changenotice');
  $bundle_settings['view_modes']['nodechanges']['custom_settings'] = FALSE;
  $bundle_settings['view_modes']['issuemetadata']['custom_settings'] = FALSE;
  $bundle_settings = field_bundle_settings('node', 'changenotice', $bundle_settings);
}

/**
 * Revert back to code for Git instructions.
 */
function drupalorg_update_7037() {
  variable_del('project_git_instructions_maintainer');
  variable_del('project_git_instructions_new_maintainer');
  variable_del('project_git_instructions_new_nonmaintainer');
  variable_del('project_git_instructions_nonmaintainer');
  variable_del('project_git_instructions_project_promoted');
  variable_del('project_git_instructions_repository_not_yet_created');
  variable_del('project_git_instructions_sandbox_maintainer');
  variable_del('project_git_instructions_sandbox_new_maintainer');
  variable_del('project_git_instructions_sandbox_nonmaintainer');
}

/**
 * Add project index redirects.
 */
function drupalorg_update_7038() {
  foreach (array(
    'modules' => 'project_module',
    'themes' => 'project_theme',
    'theme engines' => 'project_theme_engine',
    'distributions' => 'project_distribution',
  ) as $old => $new) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = 'project/' . $old . '/index';
    $redirect->redirect = 'project/' . $new . '/index';
    redirect_save($redirect);
  }
}

/**
 * Enable SearchAPI-driven issue views.
 */
function drupalorg_update_7040() {
  module_enable(array('search_api', 'search_api_db', 'search_api_views', 'drupalorg_searchapi_issue_views'));
  drupal_flush_all_caches();
}

/**
 * Patch user settings for homebox My Issues block delta change.
 */
function drupalorg_update_7041() {
  db_query("UPDATE {homebox_users} SET settings = REPLACE(settings, 'a512ec6dea837b33a2b010c2af17ed85', '1764f77afedbacb7539d78cc3f1d414f') WHERE settings LIKE '%a512ec6dea837b33a2b010c2af17ed85%'", array(':old' => $old, ':new' => $new));
}

/**
 * Move revision comment up.
 */
function drupalorg_update_7042() {
  $bundle_settings = field_bundle_settings('node', 'project_issue');
  $bundle_settings['extra_fields']['form']['nodechanges_comment_body']['weight'] = 3;
  field_bundle_settings('node', 'project_issue', $bundle_settings);
}

/**
 * Add project issue help.
 */
function drupalorg_update_7043() {
  $type = node_type_load('project_issue');
  $type->help = 'Learn <a href="/node/73179">how to report an issue</a>. Use the <a href="/node/1155816">issue summary template</a> to summarize the issue in the Description field below. Others can also change the summary. Editing the summary does not subscribe you to the issue or notify subscribers, so add a comment describing your changes after any significant edit.';
  node_type_save($type);
}

/**
 * Add project links to SearchAPI views.
 */
function drupalorg_update_7044() {
  variable_set('project_issue_query_link_views', array(
    'project_issue_all_projects',
    'project_issue_all_projects_searchapi',
    'project_issue_project',
    'project_issue_project_searchapi',
    'project_issue_search_all',
    'project_issue_search_all_searchapi',
    'project_issue_search_project',
    'project_issue_search_project_searchapi',
    'project_issue_user_issues',
    'project_issue_user_issues_searchapi',
  ));
}

/**
 * Redirect search/issues to project/issues/search.
 */
function drupalorg_update_7045() {
  $redirect = new stdClass();
  redirect_object_prepare($redirect);
  $redirect->source = 'search/issues';
  $redirect->redirect = 'project/issues/search';
  redirect_save($redirect);
}

/**
 * Trigger users to update their timezone at login.
 */
function drupalorg_update_7046() {
  // Remind users at login if their time zone is not set.
  variable_set('empty_timezone_message', TRUE);
  // Users may set their own time zone at registration.
  variable_set('user_default_timezone', DRUPAL_USER_TIMEZONE_SELECT);
}

/**
 * Set variable so that project releases are not published by default.
 */
function drupalorg_update_7047() {
  variable_set('node_options_project_release', array('revision'));
}

/**
 * Remove the 'plain text' input format added by D7 core.
 */
function drupalorg_update_7048() {
  // Reset the fallback filter to "Filtered HTML".
  variable_set('filter_fallback_format', "1");
  filter_format_disable("6");
}

/**
 * Enable user_restrictions_ui module.
 */
function drupalorg_update_7049() {
  module_enable(array('user_restrictions_ui'));
}

/**
 * Make sure filter_html_image_secure is really enabled.
 */
function drupalorg_update_7050() {
  db_update('filter')
    ->condition('module', 'filter_html_image_secure')
    ->condition('format', 1)
    ->fields(array('status' => 1))
    ->execute();
  filter_formats_reset();
}

/**
 * Manually convert field_project and field_issues fields for change notices.
 */
function drupalorg_update_7051() {
  // Revert the drupalorg_change_notice feature now, as we're about to mess with it.
  $module = 'drupalorg_change_notice';
  $info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
  $revert = array(
    $module => array_keys($info['features']),
  );
  module_load_include('inc', 'features', 'features.admin');
  features_revert($revert);

  // Try to ensure everything's lined up properly...
  field_cache_clear();
  node_types_rebuild();

  $query = db_select('content_type_changenotice', 'c');
  // Lock to current revision.
  $query->innerJoin('node', 'n', 'c.vid = n.vid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'changenotice'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('c', 'nid', 'entity_id');
  $query->addField('c', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('c', 'field_project_nid', 'field_project_target_id');

  db_insert('field_data_field_project')
    ->from($query)
    ->execute();

  $query = db_select('content_type_changenotice', 'c');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'changenotice'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('c', 'nid', 'entity_id');
  $query->addField('c', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('c', 'field_project_nid', 'field_project_target_id');

  db_insert('field_revision_field_project')
    ->from($query)
    ->execute();

  $query = db_select('content_field_issues', 'i');
  // Lock to current revision.
  $query->innerJoin('node', 'n', 'i.vid = n.vid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'changenotice'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('i', 'nid', 'entity_id');
  $query->addField('i', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addField('i', 'delta', 'delta');
  $query->addField('i', 'field_issues_nid', 'field_issues_target_id');
  $query->condition('i.field_issues_nid', NULL, 'IS NOT NULL');

  db_insert('field_data_field_issues')
    ->from($query)
    ->execute();

  $query = db_select('content_field_issues', 'i');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'changenotice'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('i', 'nid', 'entity_id');
  $query->addField('i', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addField('i', 'delta', 'delta');
  $query->addField('i', 'field_issues_nid', 'field_issues_target_id');
  $query->condition('i.field_issues_nid', NULL, 'IS NOT NULL');

  db_insert('field_revision_field_issues')
    ->from($query)
    ->execute();

  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();
}

/**
 * Replace lost issues on change records.
 */
function drupalorg_update_7052() {
  $data = array();
  $result = db_query('SELECT old.nid, old.field_issues_nid FROM content_field_issues old LEFT JOIN field_data_field_issues new ON new.entity_id = old.nid AND new.field_issues_target_id = old.field_issues_nid WHERE new.entity_id IS NULL AND old.field_issues_nid IS NOT NULL AND vid IN (SELECT max(vid) FROM content_field_issues GROUP BY nid) ORDER BY old.nid');
  foreach ($result as $row) {
    $data[$row->nid][] = $row->field_issues_nid;
  }

  foreach ($data as $nid => $issue_nids) {
    $node = node_load($nid);
    foreach ($issue_nids as $issue_nid) {
      $node->field_issues[LANGUAGE_NONE][]['target_id'] = $issue_nid;
    }
    node_save($node);
  }
}

/**
 * Delete module categories path which is being replaced by a menu item.
 */
function drupalorg_update_7053() {
  path_delete(array('alias' => 'project/project_module/categories'));
}

/**
 * Move issues from the Webmasters queue to the new Project Ownership queue.
 */
function drupalorg_update_7054() {
  $result = db_query("SELECT fp.entity_id FROM {field_data_field_project} fp INNER JOIN {field_data_field_issue_component} fic ON fp.entity_id = fic.entity_id INNER JOIN {node} ON fic.entity_id = node.nid WHERE fp.field_project_target_id = 3202 AND fic.field_issue_component_value = 'Project ownership'");
  $account = user_load(variable_get('project_issue_followup_user', 0));

  foreach ($result as $row) {
    $node = node_load($row->entity_id);
    $node->field_project[LANGUAGE_NONE][0]['target_id'] = 2209259;
    $node->field_issue_component[LANGUAGE_NONE][0]['value'] = 'Ownership transfer';
    $node->nodechanges_uid = $account->uid;
    $node->nodechanges_comment_attributes = array(
      'project_issue_no_email' => TRUE,
    );
    node_save($node);
  }
}

/**
 * Migrate users to the new multi-valued core text field, field_current_company_org.
 */
function drupalorg_update_7055(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {users} u INNER JOIN {profile_value} pv ON (u.uid = pv.uid) LEFT JOIN {field_data_field_current_company_org} cco ON (cco.entity_id = u.uid) WHERE u.status = 1 AND pv.fid = 72 AND pv.value <> '' AND cco.field_current_company_org_value IS NULL")->fetchField();
  }
  $batch_size = 200;

  foreach (user_load_multiple(db_query_range("SELECT u.uid FROM {users} u INNER JOIN {profile_value} pv ON (u.uid = pv.uid) LEFT JOIN {field_data_field_current_company_org} cco ON (cco.entity_id = u.uid) WHERE u.status = 1 AND pv.fid = 72 AND pv.value <> '' AND cco.field_current_company_org_value IS NULL ORDER BY u.uid ASC", 0, $batch_size)->fetchCol()) as $account) {
    $sandbox['progress']++;

    $wrapper = entity_metadata_wrapper('user', $account);
    $wrapper->field_current_company_org = array($account->profile_current_company_organization);
    $wrapper->save();

    $sandbox['#finished'] = ($sandbox['progress'] < $sandbox['max']) ? $sandbox['progress'] / $sandbox['max'] : 1;
  }
}

/**
 * Change and consolidate components in the infrastructure issue queue.
 */
function drupalorg_update_7056() {
  _drupalorg_issue_component_changer('infrastructure', array('field_issue_component' => array('updates.drupal.org')), 'Updates System');
  _drupalorg_issue_component_changer('infrastructure', array('field_issue_component' => array('drupalcode.org', 'BZR')), 'Git');
  _drupalorg_issue_component_changer('infrastructure', array('field_issue_component' => array('Database', 'File server', 'Mail', 'Operating system', 'Puppet', 'Solr', 'VMs', 'Webserver')), 'Servers');
  _drupalorg_issue_component_changer('infrastructure', array('field_issue_component' => array('Association intranet', 'Bluebeach', 'driphop.drupal.org', 'PHP', 'redesign.drupal.org', 'staging.drupal.org', 'SVN', 'CVS', 'docs.drupal.org')), 'Other');
}

/**
 * Move infrastructure issues with component names to more relevant queues.
 */
function drupalorg_update_7057() {
  _drupalorg_issue_mover('infrastructure', 'drupalorg', array('field_issue_component' => 'Drupal.org module'), 'Miscellaneous');
  _drupalorg_issue_mover('infrastructure', 'securitydrupalorg', array('field_issue_component' => 'security.drupal.org'), 'Miscellaneous');
  _drupalorg_issue_mover('infrastructure', 'association_drupalorg', array('field_issue_component' => 'association.drupal.org'), 'Other');
  _drupalorg_issue_mover('infrastructure', 'bluecheese', array('field_issue_component' => 'Drupal.org theme'), 'Miscellaneous');
  _drupalorg_issue_mover('infrastructure', 'groupsdrupalorg', array('field_issue_component' => 'groups.drupal.org'), 'Other');
  _drupalorg_issue_mover('infrastructure', 'documentation', array('field_issue_component' => 'docs.drupal.org'), 'Other documentation issues');
  _drupalorg_issue_mover('infrastructure', 'testbot', array('field_issue_component' => 'qa.drupal.org'), 'Miscellaneous');
}

/**
 * Migrate Industries worked in.
 */
function drupalorg_update_7058() {
  $result = db_query("SELECT pv.uid, pv.value FROM {profile_value} pv INNER JOIN {users} u ON u.uid = pv.uid AND u.status = 1 WHERE pv.fid = 26 AND pv.value <> ''");
  $data = db_insert('field_data_field_industries_worked_in')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_industries_worked_in_value', 'delta',
  ));
  $revision = db_insert('field_revision_field_industries_worked_in')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_industries_worked_in_value', 'delta',
  ));
  $count = 0;
  foreach ($result as $row) {
    foreach (array_values(array_filter(array_map('trim', preg_split("/[,\n\r]/", $row->value)))) as $n => $value) {
      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'field_industries_worked_in_value' => mb_strcut($value, 0, 255),
        'delta' => $n,
      );
      $data->values($new);
      $revision->values($new);
      $count += 1;
      if ($count > 100) {
        $data->execute();
        $revision->execute();
        $data = db_insert('field_data_field_industries_worked_in')->fields(array(
          'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
          'field_industries_worked_in_value', 'delta',
        ));
        $revision = db_insert('field_revision_field_industries_worked_in')->fields(array(
          'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
          'field_industries_worked_in_value', 'delta',
        ));
        $count = 0;
      }
    }
  }
  $data->execute();
  $revision->execute();
  field_cache_clear();
}

/**
 * Migrate field_current_company_org to field_organization_name, profile_job,
 * and profile_companies.
 */
function drupalorg_update_7059() {
  $result = db_query("SELECT u.uid, co.field_current_company_org_value, pv.value, co.delta FROM {users} u LEFT JOIN {profile_value} pv ON u.uid = pv.uid AND pv.fid = 8 AND pv.value <> '' LEFT JOIN {field_data_field_current_company_org} co ON co.entity_id = u.uid WHERE u.status = 1 AND (co.field_current_company_org_value IS NOT NULL OR pv.value IS NOT NULL)");
  $user_organization = array();
  $data = db_insert('field_data_field_organizations')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_organizations_value', 'field_organizations_revision_id', 'delta',
  ));
  $revision = db_insert('field_revision_field_organizations')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_organizations_value', 'field_organizations_revision_id', 'delta',
  ));
  $count = 0;
  foreach ($result as $row) {
    $user_organization[$row->uid][] = $row->field_current_company_org_value;

    $collection = entity_create('field_collection_item', array('field_name' => 'field_organizations'));
    $collection->setHostEntity('user', $row);
    $wrapper = entity_metadata_wrapper('field_collection_item', $collection);
    $wrapper->field_organization_name = $row->field_current_company_org_value;
    $wrapper->field_job_title = mb_strcut($row->value, 0, 255);
    $collection->save(TRUE);
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'field_organizations_value' => $collection->item_id,
      'field_organizations_revision_id' => $collection->revision_id,
      'delta' => (int) $row->delta,
    );
    $data->values($new);
    $revision->values($new);
    $count += 1;
    if ($count > 100) {
      $data->execute();
      $revision->execute();
      $data = db_insert('field_data_field_organizations')->fields(array(
        'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
        'field_organizations_value', 'field_organizations_revision_id', 'delta',
      ));
      $revision = db_insert('field_revision_field_organizations')->fields(array(
        'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
        'field_organizations_value', 'field_organizations_revision_id', 'delta',
      ));
      $count = 0;
    }
  }
  $data->execute();
  $revision->execute();
  field_cache_clear();

  $result = db_query("SELECT pv.uid, pv.value FROM {profile_value} pv INNER JOIN {users} u ON u.uid = pv.uid AND u.status = 1 WHERE pv.fid = 25 AND pv.value <> ''");
  $data = db_insert('field_data_field_organizations')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_organizations_value', 'field_organizations_revision_id', 'delta',
  ));
  $revision = db_insert('field_revision_field_organizations')->fields(array(
    'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
    'field_organizations_value', 'field_organizations_revision_id', 'delta',
  ));
  $count = 0;
  foreach ($result as $row) {
    $values = array_filter(array_map('trim', preg_split("/[,\n\r]\s+(?!inc\.?|llc)/i", $row->value)));
    $offset = 0;
    if (isset($user_organization[$row->uid])) {
      $values = array_diff($values, $user_organization[$row->uid]);
      $offset = count($user_organization[$row->uid]);
    }
    foreach (array_values($values) as $n => $value) {
      $collection = entity_create('field_collection_item', array('field_name' => 'field_organizations'));
      $collection->setHostEntity('user', $row);
      $wrapper = entity_metadata_wrapper('field_collection_item', $collection);
      $wrapper->field_organization_name = mb_strcut($value, 0, 255);
      $wrapper->field_current = FALSE;
      $collection->save(TRUE);
      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'field_organizations_value' => $collection->item_id,
        'field_organizations_revision_id' => $collection->revision_id,
        'delta' => $n + $offset,
      );
      $data->values($new);
      $revision->values($new);
      $count += 1;
      if ($count > 100) {
        $data->execute();
        $revision->execute();
        $data = db_insert('field_data_field_organizations')->fields(array(
          'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
          'field_organizations_value', 'field_organizations_revision_id', 'delta',
        ));
        $revision = db_insert('field_revision_field_organizations')->fields(array(
          'entity_type', 'bundle', 'entity_id', 'revision_id', 'language',
          'field_organizations_value', 'field_organizations_revision_id', 'delta',
        ));
        $count = 0;
      }
    }
  }
  $data->execute();
  $revision->execute();
  field_cache_clear();
}

/**
 * Migrate profile_personal_bio to field_bio.
 */
function drupalorg_update_7060() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_bio', 'b', 'b.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 74)
    ->condition('pv.value', '', '!=')
    ->isNull('b.field_bio_value');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_bio_value',
    'field_bio_format',
  );

  $data = db_insert('field_data_field_bio')->fields($fields);
  $revision = db_insert('field_revision_field_bio')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_bio_value' => mb_strcut($row->value, 0, 255),
      'field_bio_format' => NULL,
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_bio')->fields($fields);
      $revision = db_insert('field_revision_field_bio')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Migrate profile_irc_nick to field_irc_nick.
 */
function drupalorg_update_7061() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_irc_nick', 'i', 'i.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 35)
    ->condition('pv.value', '', '!=')
    ->isNull('i.field_irc_nick_value');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_irc_nick_value',
    'field_irc_nick_format',
  );

  $data = db_insert('field_data_field_irc_nick')->fields($fields);
  $revision = db_insert('field_revision_field_irc_nick')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_irc_nick_value' => mb_strcut($row->value, 0, 255),
      'field_irc_nick_format' => NULL,
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_irc_nick')->fields($fields);
      $revision = db_insert('field_revision_field_irc_nick')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Migrate profile_homepage to field_websites.
 */
function drupalorg_update_7062() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_websites', 'w', 'w.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 13)
    ->condition('pv.value', '', '!=')
    ->isNull('w.field_websites_url');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_websites_url',
    'field_websites_title',
    'field_websites_attributes',
  );

  $data = db_insert('field_data_field_websites')->fields($fields);
  $revision = db_insert('field_revision_field_websites')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_websites_url' => mb_strcut($row->value, 0, 255),
      'field_websites_title' => NULL,
      'field_websites_attributes' => '',
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_websites')->fields($fields);
      $revision = db_insert('field_revision_field_websites')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Fix missing information within field_bio.
 */
function drupalorg_update_7063() {
  // Find users with a profile_value bio of more that 255 characters.
  $query = db_select('profile_value', 'pv');
  $query->join('users', 'u', 'u.uid = pv.uid');
  $query->join('field_data_field_bio', 'b', 'b.entity_id = pv.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 74);
  $query->where('length(pv.value) > 255');
  // Check that the truncated version within field_bio_value matches profile_value.
  $query->where('substring(pv.value, 1, 254) = substring(b.field_bio_value, 1, 254)');
  $result = $query->execute();

  foreach ($result as $row) {
    // Update the row.
    db_update('field_data_field_bio')
      ->fields(array('field_bio_value' => $row->value))
      ->condition('entity_id', $row->uid)
      ->execute();
  }

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Migrate country to field_country.
 */
function drupalorg_update_7064() {
  // Clear the field cache.
  field_cache_clear();

  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_country', 'c', 'c.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 17)
    ->condition('pv.value', '', '!=')
    ->condition('pv.value', '<not specified>', '!=')
    ->isNull('c.field_country_value');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_country_value',
  );

  $data = db_insert('field_data_field_country')->fields($fields);
  $revision = db_insert('field_revision_field_country')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_country_value' => mb_strcut($row->value, 0, 255),
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_country')->fields($fields);
      $revision = db_insert('field_revision_field_country')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Migrate profile_gender to field_gender.
 */
function drupalorg_update_7065() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_gender', 'g', 'g.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 7)
    ->condition('pv.value', '', '!=')
    ->condition('pv.value', 0, '!=')
    ->isNull('g.field_gender_value');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_gender_value',
  );

  $data = db_insert('field_data_field_gender')->fields($fields);
  $revision = db_insert('field_revision_field_gender')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_gender_value' => mb_strcut($row->value, 0, 255),
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_gender')->fields($fields);
      $revision = db_insert('field_revision_field_gender')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Change bueditor image button default path from absolute to relative.
 */
function drupalorg_update_7066() {
  $button = "js:
    var form = [
    {name: 'src', title: 'Image URL', required: true, value: '/files/issue/', attributes: {onfocus: \"_=this.value;this.value='';this.value=_;\"}},
     {name: 'width', title: 'Width × Height', suffix: ' × ', getnext: true, attributes: {size: 3}},
     {name: 'height', attributes: {size: 3}},
     {name: 'alt', title: 'Alternative text', required: true}
    ];
    E.tagDialog('img', form, {title: 'Insert/edit image'});
    ";
  db_update('bueditor_buttons')
    ->fields(array('content' => $button))
    ->condition('bid', 136)
    ->execute();
}

/**
 * Migrate interests field.
 */
function drupalorg_update_7067() {
  // These uids break the migration.
  $uids_to_exclude = array(
    1403, 8520, 32906, 78092, 116266, 207301, 228455, 242364, 252009, 292659,
    336195, 347324, 355293, 391093, 506154, 533964, 545004, 585302, 585502,
    630976, 637370, 640904, 675594, 675826, 679524, 692162, 726922, 728774,
    733006, 740342, 753076, 771036, 779824, 785656, 786308, 796802, 805886,
    806304, 806986, 808228, 826014, 826160, 828142, 829062, 829894, 830890,
    834074, 855360, 863422, 880528, 885280, 888750, 890238, 894548, 894698,
    899362, 905002, 914896, 926556, 927998, 943102, 945560, 947300, 950930,
    950930, 958588, 965224, 965458, 969730, 984748, 999038, 1003154, 1004884,
    1006878, 1008772, 1009700, 1013194, 1018314, 1027376, 1031212, 1035354,
    1047146, 1048434, 1082482, 1152132, 1152650, 1176580, 1223658, 1286652,
    1339470, 1359128, 1359236, 1359248, 1399498, 1399744, 1408118, 1408780,
    1423100, 1436412, 1439892, 1458912, 1459074, 1494434, 1496500, 1522098,
    1531120, 1547124, 1557282, 1578668, 1586830, 1626016, 1629734, 1657164,
    1761140, 1763352, 1778500, 1804220, 1824542, 1831224, 1832890, 1846426,
    1926070, 1931538, 1947396, 1952442, 1952798, 1954632, 1955852, 1974798,
    1981454, 2005016, 2010550, 2053344, 2103104, 2200234, 2225802, 2255280,
    2262630, 2277214, 2316360, 2345360, 2355218, 2367132, 2370394, 2391990,
    2407972, 2414352, 2417992, 2418994, 2428444, 2445138, 2448902, 2450496,
    2525734, 2547522, 2559360, 2568354, 2571952, 2573102, 2581186, 2584576,
    2588554, 2595112, 2596274, 2598106, 2599518, 2599888, 2601540, 2602612,
    2602794, 2603900, 2606352, 2611266, 2617207, 2626747, 2626845, 2627601,
    2627715, 2633077, 2641315, 2655481, 2655811, 2659727, 2661029, 2662237,
    2664001, 2665313, 2666901, 2676793, 2677901, 2679461, 2688043, 2688093,
    2696147, 2702349, 2707875, 2729735, 2733281, 2751599, 2763183, 2778279,
    2781275, 2797639, 2808137, 2833985, 2834935, 2854039, 2857811, 2861117,
    2866397, 2869767, 2877263, 2890257, 2890267, 2898101, 2898323, 2904655,
    2907869, 2908035, 2910853, 2910965, 2942327, 2942697, 2947147, 2955431,
    2955433, 2966911, 2979193, 2985181, 2995635, 2999365, 3003625, 3005405,
    3007735, 3009757, 3016173, 3018883, 3022561, 3022997, 3025283, 3026389,
    3028445, 3033443, 3034983,
  );
  
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_interests', 'i', 'i.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 27)
    ->condition('pv.value', '', '!=')
    ->condition('u.uid', $uids_to_exclude, 'NOT IN')
    ->isNull('i.field_interests_tid')
    ->distinct();
  
  $result = $query->execute();
  
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_interests_tid',
  );
  
  $data = db_insert('field_data_field_interests')->fields($fields);
  $revision = db_insert('field_revision_field_interests')->fields($fields);
  
  static $tids = array();
  
  $count = 0;
  
  foreach ($result as $row) {
    // Split the row value by line and comma, and trim whitespace.
    foreach (array_filter(array_map('trim', preg_split("/[,\n\r]\s+/", $row->value))) as $delta => $interest) {
      // Discard long interests.
      if (strlen($interest) > 255) {
        continue;
      }

      // Check if the interest is within the $terms array.
      if (!isset($tids[$interest])) {
        // Search for a term by name.
        $term = taxonomy_get_term_by_name($interest, 'interests');
  
        if (!$term) {
          // Create the term if it doesn't exist.
          $term = (object) array(
            'vid' => 63,
            'name' => $interest,
          );
          taxonomy_term_save($term);
        }
  
        // Store the tid within $terms.
        if (is_array($term)) {
          // Sometimes this is returned as an array.
          $term = reset($term);
        }
        $tids[$interest] = $term->tid;
      }
  
      $tid = $tids[$interest];
  
      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'delta' => $delta,
        'deleted' => 0,
        'field_interests_tid' => $tid,
      );
  
      $data->values($new);
      $revision->values($new);
  
      // Increment the count value.
      $count++;
  
      if ($count > 100) {
        // Save the data.
        $data->execute();
        $revision->execute();
  
        // Start again.
        $data = db_insert('field_data_field_interests')->fields($fields);
        $revision = db_insert('field_revision_field_interests')->fields($fields);
        $count = 0;
      }
    }
  
    // Save any remaining data.
    $data->execute();
    $revision->execute();
  
    // Clear the field cache.
    field_cache_clear();
  }
}

/**
 * Migrate field_languages.
 */
function drupalorg_update_7068() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_languages', 'l', 'l.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 48)
    ->condition('pv.value', '', '!=')
    ->isNull('l.field_languages_value');

  $result = $query->execute();

  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_languages_value',
  );

  $data = db_insert('field_data_field_languages')->fields($fields);
  $revision = db_insert('field_revision_field_languages')->fields($fields);

  $count = 0;

  foreach ($result as $row) {
    // Explode the languages value.
    $languages = explode('; ', $row->value);

    foreach ($languages as $delta => $language) {
      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'delta' => $delta,
        'deleted' => 0,
        'field_languages_value' => mb_strcut($language, 0, 255),
      );

      $data->values($new);
      $revision->values($new);

      // Increment the count value.
      $count += 1;

      if ($count > 100) {
        // Save the data.
        $data->execute();
        $revision->execute();

        // Start again.
        $data = db_insert('field_data_field_languages')->fields($fields);
        $revision = db_insert('field_revision_field_languages')->fields($fields);
        $count = 0;
      }
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();  
}

/**
 * Migrate profile_drupal_contributions to field_contributions.
 */
function drupalorg_update_7069() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_contributions', 'c', 'c.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 18)
    ->condition('pv.value', '', '!=')
    ->isNull('c.field_contributions_value');

  $result = $query->execute();

  // Define the fields.
  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_contributions_value',
    'field_contributions_format',
  );

  $data = db_insert('field_data_field_contributions')->fields($fields);
  $revision = db_insert('field_revision_field_contributions')->fields($fields);

  foreach ($result as $row) {
    // Start creating the record to insert.
    $new = array(
      'entity_type' => 'user',
      'bundle' => 'user',
      'entity_id' => $row->uid,
      'revision_id' => $row->uid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'deleted' => 0,
      'field_contributions_value' => $row->value,
      'field_contributions_format' => NULL,
    );

    $data->values($new);
    $revision->values($new);

    // Increment the count value.
    $count += 1;

    if ($count > 100) {
      // Save the data.
      $data->execute();
      $revision->execute();

      // Start again.
      $data = db_insert('field_data_field_contributions')->fields($fields);
      $revision = db_insert('field_revision_field_contributions')->fields($fields);
      $count = 0;
    }
  }

  // Save any remaining data.
  $data->execute();
  $revision->execute();

  // Clear the field cache.
  field_cache_clear();
}

/**
 * Migrate profile_role_with_drupal to field_areas_of_expertise.
 */
function drupalorg_update_7070() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_areas_of_expertise', 'ae', 'ae.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 76)
    ->condition('pv.value', '', '!=')
    ->isNull('ae.field_areas_of_expertise_tid')
    ->distinct();

  $result = $query->execute();

  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_areas_of_expertise_tid',
  );

  $data = db_insert('field_data_field_areas_of_expertise')->fields($fields);
  $revision = db_insert('field_revision_field_areas_of_expertise')->fields($fields);

  static $tids = array();

  $count = 0;

  foreach ($result as $row) {
    // Split the row value by line and comma, and trim whitespace.
    foreach (array_filter(array_map('trim', preg_split("/[,\n\r]\s+/", $row->value))) as $delta => $area) {
      // Discard long areas.
      if (strlen($area) > 255) {
        continue;
      }

      // Check if the area is within the $terms array.
      if (!isset($tids[$area])) {
        // Search for a term by name.
        $term = taxonomy_get_term_by_name($area, 'areas_of_expertise');

        if (!$term) {
          // Create the term if it doesn't exist.
          $term = (object) array(
            'vid' => 65,
            'name' => $area,
          );
          taxonomy_term_save($term);
        }

        // Store the tid within $terms.
        if (is_array($term)) {
          // Sometimes this is returned as an array.
          $term = reset($term);
        }
        $tids[$area] = $term->tid;
      }

      $tid = $tids[$area];

      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'delta' => $delta,
        'deleted' => 0,
        'field_areas_of_expertise_tid' => $tid,
      );

      $data->values($new);
      $revision->values($new);

      // Increment the count value.
      $count++;

      if ($count > 100) {
        // Save the data.
        $data->execute();
        $revision->execute();

        // Start again.
        $data = db_insert('field_data_field_areas_of_expertise')->fields($fields);
        $revision = db_insert('field_revision_field_areas_of_expertise')->fields($fields);
        $count = 0;
      }
    }

    // Save any remaining data.
    $data->execute();
    $revision->execute();

    // Clear the field cache.
    field_cache_clear();
  }
}

/**
 * Set up new Credit & committing form.
 */
function drupalorg_update_7071() {
  // Do not show BUEditor for new Git command text area.
  $excludes = db_query('SELECT excludes FROM {bueditor_editors} WHERE eid = 10')->fetchField();
  db_update('bueditor_editors')
    ->fields(array('excludes' => $excludes . "\nedit-command\nedit-command-message"))
    ->condition('eid', 10)
    ->execute();
}

/**
 * Migrate profile_role_with_drupal to field_areas_of_expertise.
 */
function drupalorg_update_7072() {
  // Get the profile data.
  $query = db_select('users', 'u');
  $query->innerJoin('profile_value', 'pv', 'u.uid = pv.uid');
  $query->leftJoin('field_data_field_areas_of_expertise', 'ae', 'ae.entity_id = u.uid');
  $query
    ->fields('pv', array('uid', 'value'))
    ->condition('u.status', 1)
    ->condition('pv.fid', 76)
    ->condition('pv.value', '', '!=')
    ->isNull('ae.field_areas_of_expertise_tid')
    ->distinct();

  $result = $query->execute();

  $fields = array(
    'entity_type',
    'bundle',
    'deleted',
    'entity_id',
    'revision_id',
    'language',
    'delta',
    'field_areas_of_expertise_tid',
  );

  $data = db_insert('field_data_field_areas_of_expertise')->fields($fields);
  $revision = db_insert('field_revision_field_areas_of_expertise')->fields($fields);

  static $tids = array();

  $count = 0;

  foreach ($result as $row) {
    // Split the row value by line and comma, and trim whitespace.
    foreach (array_filter(array_map('trim', preg_split("/[,\n\r]\s+/", $row->value))) as $delta => $area) {
      // Discard long areas.
      if (strlen($area) > 255) {
        continue;
      }

      // Check if the area is within the $terms array.
      if (!isset($tids[$area])) {
        // Search for a term by name.
        $term = taxonomy_get_term_by_name($area, 'areas_of_expertise');

        if (!$term) {
          // Create the term if it doesn't exist.
          $term = (object) array(
            'vid' => 65,
            'name' => $area,
          );
          taxonomy_term_save($term);
        }

        // Store the tid within $terms.
        if (is_array($term)) {
          // Sometimes this is returned as an array.
          $term = reset($term);
        }
        $tids[$area] = $term->tid;
      }

      $tid = $tids[$area];

      $new = array(
        'entity_type' => 'user',
        'bundle' => 'user',
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'language' => LANGUAGE_NONE,
        'delta' => $delta,
        'deleted' => 0,
        'field_areas_of_expertise_tid' => $tid,
      );

      $data->values($new);
      $revision->values($new);

      // Increment the count value.
      $count++;

      if ($count > 100) {
        // Save the data.
        $data->execute();
        $revision->execute();

        // Start again.
        $data = db_insert('field_data_field_areas_of_expertise')->fields($fields);
        $revision = db_insert('field_revision_field_areas_of_expertise')->fields($fields);
        $count = 0;
      }
    }

    // Save any remaining data.
    $data->execute();
    $revision->execute();

    // Clear the field cache.
    field_cache_clear();
  }
}
