<?php

/**
 * @file
 *   Install and upgrade functionality for drupalorg.module.
 */

/**
 * Implementation of hook_schema().
 */
function drupalorg_schema() {
  return array(
    'drupalorg_civimembership' => array(
      'description' => 'Local copy of Drupal Association membership records from their API.',
      'fields' => array(
        'user_name' => array(
          'description' => 'User name with membership.',
          'type' => 'varchar',
          'length' => 60,
          'not null' => TRUE,
          'default' => '',
        ),
        'membership_type' => array(
          'description' => 'Individual or Organization',
          'type' => 'varchar',
          'length' => 15,
          'not null' => TRUE,
          'default' => '',
        ),
        'membership_status' => array(
          'description' => 'Current, New, or Grace',
          'type' => 'varchar',
          'length' => 10,
          'not null' => TRUE,
          'default' => '',
        ),
        'updated' => array(
          'description' => 'Last updated date',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array(
        'membership' => array('user_name', 'membership_type', 'membership_status'),
        'updated' => array('updated'),
      ),
    ),
    'drupalorg' => array(
      'description' => 'Cache table for home page map data, with a mediocre name.',
      'fields' => array(
        'cid' => array(
          'description' => 'Primary Key: Unique cache ID.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'data' => array(
          'description' => 'A collection of data to cache.',
          'type' => 'blob',
          'not null' => FALSE,
          'size' => 'big',
        ),
        'expire' => array(
          'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'created' => array(
          'description' => 'A Unix timestamp indicating when the cache entry was created.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'headers' => array(
          'description' => 'Any custom HTTP headers to be added to cached data.',
          'type' => 'text',
          'not null' => FALSE,
        ),
        'serialized' => array(
          'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
          'type' => 'int',
          'size' => 'small',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array('expire' => array('expire')),
      'primary key' => array('cid'),
    ),
  );
}

/**
 * Implementation of hook_install().
 *
 * Set the system weight heavier than cvslog so our form_alter comes later. 
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_install() {
  drupal_install_schema('drupalorg');
  db_query("UPDATE {system} SET weight = 5 WHERE name = 'drupalorg'");
}

/**
 * Implementation of hook_uninstall().
 */
function drupalorg_civimembership_uninstall() {
  drupal_uninstall_schema('drupalorg');
}

/**
 * Set the system weight to 1 so that it is invoked after project_usage.
 *
 * See http://drupal.org/node/327548 for more information.
 */
function drupalorg_update_1() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 1 WHERE name = 'drupalorg'");
  
  return $ret;
}

/**
 * Set the system weight heavier than cvslog so our form_alter comes later. 
 *
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_update_2() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 5 WHERE name = 'drupalorg'");
  return $ret;
}

/**
 * Enable modules and set some permissions and settings.
 */
function drupalorg_update_6000() {
  // Add new admin menu module and views module.
  drupal_install_modules(array('admin_menu', 'views', 'view_ui', 'apachesolr', 'site_network', 'apachesolr_search', 'apachesolr_mess_up_results'));
  
  // Segregate book block to book pages only.
  variable_set('book_block_mode', 'book pages');
  
  // Set temporary ApacheSolr settings.
  variable_set('apachesolr_host', 'solr-do.drupalfr.org');
  variable_set('apachesolr_port', '8080');
  variable_set('apachesolr_enabled_facets', array('apachesolr_search' => array('uid' => 'uid', 'type' => 'type')));
  variable_set('apachesolr_index_last', array(
    // Those values come from the test site. They will need to be tweaked to match
    // the D5 database dump we used to build the index.
    'apachesolr_search' => array(
      'last_change' => '1233245289',
      'last_nid' => '320451',
    ),
  ));

  // Enable drupal.org as a site_network server.
  variable_set('site_network_server', 1);

  // Add permissions to admins and some users.
  _drupalorg_add_permissions(array(
    'administrator' => array(
      // Contact
      'administer site-wide contact form',
      // Forum
      'delete any forum topic', 'delete own forum topics', 'edit any forum topic',
      // Nodes
      'create page content', 'create story content',
      'delete any book content', 'delete any page content', 'delete any story content',
      'delete own book content', 'delete own page content', 'delete own story content',
      'edit any page content', 'edit any story content',
      'edit own page content', 'edit own story content',
      // Project
      'browse project listings',
      // System
      'access site reports', 'administer actions', 'administer files',
      // Admin_menu
      'access administration menu', 'display drupal links',
      // Views UI for development
      'administer views'
    ),
    'anonymous' => array(
      // Project
      'browse project listings',
    ),
    'authenticated user' => array(
      // Project
      'browse project listings',
    )
  ));
  
  return array();
}

/**
 * Work around that image_update_5200() is insanely broken on Drupal 6.
 *
 * image_update_5200() tries to run a database change as if we are on the Drupal 5
 * database. We are not. So that query fails, but we need to run the good one here
 * to have the proper data.
 */
function drupalorg_update_6001() {
  $ret = array();
  // Copy image files records into the new table.
  $args = array_map('db_escape_string', array_keys(image_get_sizes()));
  $cond = " IN ('". implode("', '",  $args) ."')";
  $ret[] = update_sql("INSERT INTO {image} SELECT DISTINCT u.nid, f.fid, f.filename FROM {files} f INNER JOIN {upload} u ON f.fid = u.fid INNER JOIN {node} n ON u.nid = n.nid WHERE n.type='image' AND f.filename". $cond);
  return $ret;
}

/**
 * Migrate simplenews news items to forums.
 */
function drupalorg_update_6002() {
  $ret = array();
  // Fix one buggy newsletter post from the past and move it to the security news.
  $ret[] = update_sql('UPDATE {simplenews_newsletters} SET tid = 44 WHERE tid = 0'); 
  // Bogus existing forum IDs, which break our stuff.
  $ret[] = update_sql('DELETE FROM {forum} WHERE nid IN (25390, 27678, 29754)');
  // Add data for all newsletter posts as if they were forum topics all along.
  // This data already exists in the term_node table, so we don't need to deal with that.
  $ret[] = update_sql('INSERT INTO {forum} (nid, vid, tid) SELECT s.nid, n.vid, s.tid FROM {simplenews_newsletters} s LEFT JOIN {node} n ON s.nid = n.nid');
  // Move all newsletters to the forums, except the test newsletter.
  $ret[] = update_sql('UPDATE {term_data} SET vid = 1 WHERE vid = 4 AND tid != 121');
  // Install the lists schema.
  drupal_install_schema('lists');
  // Add rows to lists_mailman, so it stores info on all things sent, and
  // not going to resend them. Only do that for mails which we actually sent.
  // There are old but unsent mails in there, which have s_status != 2.
  $ret[] = update_sql('INSERT INTO {lists_mailman} (nid, uid, timestamp) SELECT nid, 1, NOW() FROM {simplenews_newsletters} WHERE s_status = 2');
  
  // Now that we have the forum connections set up, convert existing simplenews
  // nodes to forum nodes.
  $ret[] = update_sql("UPDATE {node} SET type = 'forum' WHERE type = 'simplenews'");

  // @todo The container for newsletters will be added manually and these three
  // newsletters will be added to it via the slick drag and drop UI.
  return $ret;
}

/**
 * Migrate polls to story nodes.
 */
function drupalorg_update_6003() {
  $ret = array();

  // Get node identifiers of all poll nodes for conversion.
  $list_result = db_query("SELECT nid FROM {node} WHERE type = 'poll'");
  while ($poll_node = db_fetch_object($list_result)) {

    // We only have one revision per poll (polls were on way before revisions),
    // so we will update their single node_revisions entry right away. Those only
    // have the teaser/body set up with asterisks for RSS purposes, as poll
    // module does by default in core, so we can replace that.
    $poll_result = db_query("SELECT * from {poll_choices} WHERE nid = %d ORDER by chorder ASC", $poll_node->nid);
    $poll_body = array();
    while ($poll_choice = db_fetch_object($poll_result)) {
      // Drupal.org uses format 1 (filtered HTML) for these nodes. It has <p>,
      // <ul>, <li>, <strong> and <i> enabled, and that is all that is needed
      // for these nodes, so we should be fine with that.
      $poll_body[] = $poll_choice->chtext .' <strong>('. $poll_choice->chvotes .' votes)</strong>';
    }
    // Tell people this is an archived poll result node, present choices and votes statically.
    $poll_body = '<p>Archived poll results:</p><ul><li>'. join('</li><li>', $poll_body) .'</li></ul>';
    db_query('UPDATE {node_revisions} SET teaser = %d, body = %d WHERE nid = %d', $poll_body, $poll_body .'<!--break-->', $poll_node->nid);
  }
  
  // Now that we have the bodies and teasers, convert all poll nodes to story nodes.
  $ret[] = update_sql("UPDATE {node} SET type = 'story' WHERE type = 'poll'");
  
  return $ret;
}

/**
 * @defgroup redesign_updates Drupal.org redesign updates
 * @{
 */

/**
 * Set up modules, blocks, and solr facets that are necessary for the redesign.
 */
function drupalorg_update_6500() {
  $return = array();

  drupal_install_modules(array('apachesolr_multisitesearch'));

  system_theme_data(); // Trigger updating theme filenames
  _block_rehash(); // Trigger filling out blocks table

  // Filters that need to be enabled so that blocks exist for placement.
  $filters = array(
    'drupalorg_search' => array(
      'meta_type',
    ),
    'drupalorg_order_facet' => array(
      'sort_most_installed',
      'sort_created',
    ),
  );
  _drupalorg_update_enable_filters($filters);

  // Filters that need to be enabled for multisitesearch pages.
  $filters = array(
    'drupalorg_search' => array(
      'meta_type',
    ),
  );

  _drupalorg_update_enable_filters($filters, 'apachesolr_multisitesearch');

  $return[] = update_sql("DELETE FROM {blocks} WHERE theme = 'bluecheese'");
  $blocks = array(
    array(
      'module' => 'drupalorg',
      'delta' => 'set_home',
      'pages' => 'user/*/dashboard',
      'region' => 'page_tools',
    ),
    array(
      'module' => 'drupalorg',
      'delta' => 'add_to_dashboard',
      'region' => 'page_tools',
    ),
    array(
      'module' => 'drupalorg_news',
      'delta' => 'news-terms',
      'pages' => "news\nnews/*\naggregator\naggregator/*",
    ),
    array(
      'module' => 'drupalorg_news',
      'delta' => 'planet-list',
      'pages' => 'planet',
    ),
    array(
      'module' => 'drupalorg',
      'delta' => 'get_involved',
      'pages' => 'getting-involved',
    ),
    array(
      'module' => 'drupalorg',
      'delta' => 'drupalorg_activity',
      'pages' => 'getting-involved',
    ),
    array(
      'module' => 'drupalorg_handbook',
      'delta' => 'info',
      'pages' => 'handbook',
    ),
    array(
      'module' => 'google_admanager',
      'delta' => md5('Redesign_books'),
      'pages' => 'handbook',
      'region' => 'content',
    ),
    array(
      'module' => 'book',
      'delta' => 0,
    ),
    array(
      'module' => 'drupalorg_handbook',
      'delta' => 'license',
    ),
    array(
      'module' => 'cvs',
      'delta' => 'cvs_project_maintainers',
    ),
    array(
      'module' => 'project_issue',
      'delta' => 'issue_cockpit',
    ),
    array(
      'module' => 'views',
      'delta' => 'project_issue_project-block_1',
    ),
    array(
      'module' => 'project',
      'delta' => 'resources',
    ),
    array(
      'module' => 'project',
      'delta' => 'development',
    ),
    array(
      'module' => 'pivots_block',
      'delta' => 0,
    ),
    array(
      'module' => 'drupalorg_search',
      'delta' => 'search_box',
      'pages' => "search/apachesolr_search/*\nsearch/apachesolr_multisitesearch/*",
    ),
    array(
      'module' => 'drupalorg_search',
      'delta' => 'meta_type',
      'pages' => "search/apachesolr_search\nsearch/apachesolr_search/*\n" .
        "search/apachesolr_multisitesearch\nsearch/apachesolr_multisitesearch/*",
    ),
    array(
      'module' => 'drupalorg_search',
      'delta' => 'drupalorg_search_alternate',
      'pages' => "search/apachesolr_search\nsearch/apachesolr_search/*\n" .
        "search/apachesolr_multisitesearch\nsearch/apachesolr_multisitesearch/*\n" .
        "search/drupalorg\nsearch/drupalorg/*" .
        "search/user_search\nsearch/user_search/*",
    ),
    array(
      'title' => 'Get Started',
      'module' => 'block',
      'delta' => 9,
      'pages' => "project/themes",
    ),
    array(
      'title' => 'Most Installed',
      'module' => 'drupalorg_order_facet',
      'delta' => 'sort_most_installed',
      'pages' => "project/modules\nproject/themes",
    ),
    array(
      'module' => 'drupalorg_order_facet',
      'delta' => 'sort_created',
      'pages' => "project/modules\nproject/themes",
    ),
    array(
      'module' => 'drupalorg',
      'delta' => 'find_local',
      'pages' => "profile\nprofile/*",
    ),
    array(
      'module' => 'drupalorg_search',
      'delta' => 'drupalorg_search_users',
      'pages' => "profile\nprofile/*",
    ),
    array(
      'module' => 'forum',
      'delta' => 1,
      'pages' => "forum\nforum/*",
    ),
    array(
      'module' => 'block',
      'delta' => 34,
      'title' => t('Subscribe to Security Advisories'),
      'pages' => "security\nsecurity/*",
    ),
    array(
      'module' => 'block',
      'delta' => 11,
      'title' => t('Contacting the Security Team'),
      'pages' => "security\nsecurity/*",
    ),
    array(
      'module' => 'block',
      'delta' => 18,
      'title' => t('Writing Secure Code'),
      'pages' => "security\nsecurity/*",
    ),
    array(
      'module' => 'google_admanager',
      'delta' => md5('Security_books'),
      'pages' => "security\nsecurity/*",
    ),
    array(
      'module' => 'block',
      'delta' => 6,
      'title' => t('CVS Information'),
      'pages' => 'cvs*'
    ),
    array(
      'module' => 'cvs',
      'delta' => 'cvs_site_active_projects',
      'pages' => 'cvs*',
    ),
    array(
      'module' => 'cvs',
      'delta' => 'cvs_site_active_developers',
      'pages' => 'cvs*',
    ),
  );
  $weight = 0;
  $infos = array();
  foreach ($blocks as $block) {
    $block['theme'] = 'bluecheese';
    $block['status'] = 1;
    if (!isset($block['region'])) {
      $block['region'] = 'right';
    }
    $block['visibility'] = 1;
    $block['weight'] = $weight;

    if (!isset($infos[$block['module']])) {
      $infos[$block['module']] = module_invoke($block['module'], 'block', 'list');
    }
    if (isset($infos[$block['module']][$block['delta']]['cache'])) {
      $block['cache'] = $infos[$block['module']][$block['delta']]['cache'];
    }

    drupal_write_record('blocks', $block);
    $weight += 1;
  }

  $block = array(
    'theme' => 'bluecheese',
    'status' => 1,
    'region' => 'content_top',
    'visibility' => 1,
    'weight' => 0,
    'module' => 'drupalorg_search',
    'delta' => 'drupalorg_search_navigation',
    'cache' => BLOCK_NO_CACHE,
    'pages' => "search/apachesolr_search\nsearch/apachesolr_search/*\n" .
      "search/apachesolr_multisitesearch\nsearch/apachesolr_multisitesearch/*",
  );
  drupal_write_record('blocks', $block);
  
  return $return;
}

/**
 * Remove conflicting URL aliases.
 */
function drupalorg_update_6501() {
  $return = array();

  path_set_alias(NULL, 'community');
  $return[] = update_sql('DELETE FROM {url_alias} WHERE pid = 60174'); // getting-involved
  $return[] = update_sql('DELETE FROM {url_alias} WHERE pid = 162'); // news

  return $return;
}

/**
 * Set variables.
 */
function drupalorg_update_6502() {
  $return = array();

  variable_set('homebox_user_tab', 'dashboard');

  // New image sizes
  variable_set('image_updated', time());
  variable_set('image_sizes', array(
    '_original' => array(
      'label' => 'Original',
      'operation' => 'scale',
      'width' => NULL,
      'height' => NULL,
      'link' => 1,
    ),
    'thumbnail' => array(
      'label' => 'Thumbnail',
      'operation' => 'scale',
      'width' => 218,
      'height' => 217,
      'link' => 1,
    ),
    'preview' => array(
      'label' => 'Preview',
      'operation' => 'scale',
      'width' => 700,
      'height' => 700,
      'link' => 1,
    ),
  ));

  variable_set('drupalorg_featured_translations', '<li><a href="http://localize.drupal.org/translate/languages/ca">Catalan</a></li>
<li><a href="http://localize.drupal.org/translate/languages/fr">French</a></li>
<li><a href="http://localize.drupal.org/translate/languages/hu">Hungarian</a></li>
<li><a href="http://localize.drupal.org/translate/languages/nl">Dutch</a></li>');
  variable_set('drupalorg_featured_install_profiles', '<li><a href="project/openmedia">Community Site</a></li>
<li><a href="project/uberdrupal">E-commerce</a></li>
<li><a href="project/openpublish">News Site</a></li>
<li><a href="project/drupal_wiki">Wiki</a></li>');

  variable_set('google_admanager_account', 'ca-pub-8747679010629587');
  variable_set('google_admanager_ad_slots', 'Redesign_home
Redesign_books
Security_books
PaidServicesBlock
HostingForumBlock');
  variable_set('google_admanager_lazy', 1);

  return $return;
}

/**
 * Update nodes.
 */
function drupalorg_update_6503() {
  $return = array();

  // Promote community spotlights.
  foreach (array(908902, 908840, 903702, 928224) as $nid) {
    $node = node_load($nid);
    $node->promote = 1;
    node_save($node);
  }

  return $return;
}

/**
 * Set Image Attach variable for project nodes
 */
function drupalorg_update_6504() {
  $return = array();

  // Set image attach weight for body
  variable_set('image_attach_weight_body_project_project', -10);

  return $return;
}

/**
 * @}
 */

/**
 * Clear pivots_block so new block cache settings stick.
 */
function drupalorg_update_6505() {
  $return = array();

  $return[] = update_sql("DELETE FROM {blocks} WHERE module = 'pivots_block'");

  return $return;
}

/**
 * Add {cache_drupalorg_civimembership}.
 */
function drupalorg_update_6506() {
  $return = array();

  db_create_table($return, 'cache_drupalorg_civimembership', array(
    'description' => 'Cache table for a CiviCRM membership from a remote CiviCRM instance.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the cache entry was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'headers' => array(
        'description' => 'Any custom HTTP headers to be added to cached data.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'serialized' => array(
        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array('expire' => array('expire')),
    'primary key' => array('cid'),
  ));

  return $return;
}

/**
 * Add drupalorg table.
 */
function drupalorg_update_6507() {
  $return = array();

  db_create_table($return, 'drupalorg', array(
    'description' => 'Cache table for home page map data, with a mediocre name.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the cache entry was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'headers' => array(
        'description' => 'Any custom HTTP headers to be added to cached data.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'serialized' => array(
        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array('expire' => array('expire')),
    'primary key' => array('cid'),
  ));

  return $return;
}

/**
 * Main update function for git migration deployment.
 */
function drupalorg_update_6600() {
  $return = array();

  // Update versioncontrol_views_sets with proper views
  update_sql("DELETE from {versioncontrol_views_sets};");
  update_sql("INSERT INTO {versioncontrol_views_sets} (views_set, vcs, view_name)
    VALUES
	  ('global_commit_view','git','vc_git_project_global_commits'),
	  ('individual_commit_view','git','vc_git_individual_commit'),
	  ('repository_commit_view','git','commitlog_repository_commits'),
	  ('user_commit_view','git','vc_git_project_user_commits'),
	  ('project_commit_view','git','vc_git_project_commit_view');
	");

  // Update Blocks table to properly position maintainers block
  update_sql("DELETE FROM {blocks} WHERE module = 'cvs' AND theme = 'bluecheese';");
  update_sql("DELETE FROM {blocks} WHERE module = 'versioncontrol_project' AND theme = 'bluecheese';");

  $block = new stdClass;
  $block->module = 'versioncontrol_project';
  $block->delta = 'project_maintainers';
  $block->theme = 'bluecheese';
  $block->status = 1;
  $block->weight = -37;
  $block->region = 'right';
  $block->visibility = 1;
  $block->pages = '';
  $block->cache = -1;

  drupal_write_record('blocks', $block);

  return $return;
}

/**
 * Flush CiviCRM membership cache for data structure change.
 */
function drupalorg_update_6601() {
  $return = array();

  cache_clear_all('*', 'cache_drupalorg_civimembership', TRUE);

  return $return;
}

/**
 * Reshuffle organization listing rules. See http://drupal.org/node/1217292.
 */
function drupalorg_update_6602() {
  $return = array();

  // Set field_organization_marketplace = status
  // Set field_organization_list_rule = 'membership'
  $return[] = update_sql("UPDATE {content_type_organization} cto INNER JOIN {node} n ON n.vid = cto.vid SET field_organization_list_rule_value = 'membership', field_organization_marketplace_value = n.status");
  // Set status = 1
  $return[] = update_sql("UPDATE {node} SET status = 1 WHERE type = 'organization'");

  return $return;
}

/**
 * Allow organizations to decide if they want to be listed. See http://drupal.org/node/1217308.
 */
function drupalorg_update_6603() {
  $return = array();

  $return[] = update_sql("UPDATE {content_type_organization} cto INNER JOIN {node} n ON n.vid = cto.vid SET cto.field_org_marketplace_request_value = (cto.field_organization_list_rule_value != 'never')");

  return $return;
}

/**
 * Set nodes with Documentation input format to Filtered HTML or Full HTML instead. See http://drupal.org/node/1275424.
 */
function drupalorg_update_6604() {
  $return = array();

  // Set Book and Project nodes with Documentation input format to be Filtered
  // HTML.
  $return[] = update_sql("UPDATE {node_revisions} nr INNER JOIN {node} n ON n.vid=nr.vid SET nr.format = 1 WHERE n.type IN ('book', 'project_project') AND nr.format = 5");

  // Set all other types of nodes with Documentation input format to be Full
  // HTML.
  $return[] = update_sql("UPDATE {node_revisions} nr INNER JOIN {node} n ON n.vid=nr.vid SET nr.format = 3 WHERE n.type NOT IN ('book', 'project_project') AND nr.format = 5");

  return $return;
}

/**
 * Elements related to pushing distributions as a first-class thing.
 */
function drupalorg_update_6605() {
  // Populate activity stats for new "distributions" count.
  drupalorg_get_activity(TRUE);

  // Remove old 'drupalorg_featured_install_profiles' variable.
  variable_del('drupalorg_featured_install_profiles');

  return array();
}

/**
 * Move images attached to projects to a CCK field.
 */
function drupalorg_update_6606() {
  // Enable feature for project images.
  features_install_modules(array('drupalorg_project_customizations'));
  features_rebuild();

  // Move images to field_project_images.
  $result = db_query("SELECT ia.nid FROM {image_attach} ia INNER JOIN {node} n ON n.nid = ia.nid AND n.type = 'project_project'");
  while ($nid = db_result($result)) {
    $node = node_load($nid);
    if (!isset($node->field_project_images)) {
      $node->field_project_images = array();
    }
    foreach ($node->iids as $iid) {
      $image = node_load($iid);
      $node->field_project_images[] = array(
        'fid' => db_result(db_query("SELECT fid FROM {image} WHERE nid = %d AND image_size = '_original'", $image->nid)),
        'list' => 1,
        'data' => array(
          'description' => $image->title,
          'alt' => $image->title,
          'title' => '',
        ),
      );
      // Remove from image module tracking so deleting the image node will leave
      // the file intact.
      db_query("DELETE FROM {image} WHERE nid = %d AND image_size = '_original'", $image->nid);
      node_delete($image->nid);
    }
    unset($node->iids);
    $node->log = t('Migrating images, see http://drupal.org/node/371999.');
    node_save($node);
  }

  // Disable image_attach.
  module_disable(array('image_attach'));

  return array();
}

/**
 * New storage for Association membership.
 */
function drupalorg_update_6607() {
  $return = array();

  db_create_table($return, 'drupalorg_civimembership', array(
    'description' => 'Local copy of Drupal Association membership records from their API.',
    'fields' => array(
      'user_name' => array(
        'description' => 'User name with membership.',
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
      ),
      'membership_type' => array(
        'description' => 'Individual or Organization',
        'type' => 'varchar',
        'length' => 15,
        'not null' => TRUE,
        'default' => '',
      ),
      'membership_status' => array(
        'description' => 'Current, New, or Grace',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'updated' => array(
        'description' => 'Last updated date',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'membership' => array('user_name', 'membership_type', 'membership_status'),
      'updated' => array('updated'),
    ),
  ));

  db_drop_table($return, 'cache_drupalorg_civimembership');

  return $return;
}

/**
 * Change marketplace listing policy.
 */
function drupalorg_update_6608() {
  $return = array();

  $return[] = update_sql("UPDATE {content_type_organization} cto INNER JOIN {node} n ON n.vid = cto.vid SET cto.field_organization_list_rule_value = 'all' WHERE cto.field_organization_list_rule_value = 'always'");
  $return[] = update_sql("UPDATE {content_type_organization} cto INNER JOIN {node} n ON n.vid = cto.vid SET cto.field_organization_list_rule_value = 'featured' WHERE cto.field_organization_list_rule_value = 'membership'");

  return $return;
}

/**
 * Change Countries served vocabulary to Locations.
 */
function drupalorg_update_6609() {
  $return = array();

  // Change the vocabulary name and add a help text.
  $return[] = update_sql("UPDATE {vocabulary} SET name = 'Locations', help = 'Please only select countries in which your company has a physical office.' WHERE name = 'Countries served'");

  // Delete all references to this vocabulary.
  $result = db_query("SELECT tid FROM {term_data} WHERE vid = %d", 52);
  while ($tid = db_result($result)) {
    db_query("DELETE FROM {term_node} WHERE tid = %d", $tid);
  }

  return $return;
}

/**
 * Utility function to add permissions to certain user roles.
 */
function _drupalorg_add_permissions($permissions) {
  foreach ($permissions as $role => $grants) {
    if (is_string($role)) {
      $role = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", $role));
    }
    if ($role) {
      $authz = db_result(db_query('SELECT perm FROM {permission} WHERE rid = %d', $role));
      if (empty($authz)) {
        // No permission record yet.
        db_query("INSERT INTO {permission} (perm, rid) VALUES ('%s', %d)", join(', ', $grants), $role);
      }
      else {
        // Existing permission record. 
        $authz_changed = FALSE;
        foreach ($grants as $grant) {
          if (strpos($authz, $grant) === FALSE) {
            $authz .= ', '. $grant;
            $authz_changed = TRUE;
          }
        }
        if ($authz_changed) {
          db_query("UPDATE {permission} SET perm = '%s' WHERE rid = %d", $authz, $role);
        }
      }
    }
  }
}

/**
 * Helper function to handle all of the filters that need to be enabled so that 
 * apachesolr-specific blocks can be utilized and positioned.
 * 
 * @param array $filter_list
 *   An array in the format of 
 *   $filter_list = array('module' => array('facet_name', 'facet_name2'));
 *   where module is where the facet is defined, and facet_name is the
 *   name (array key) of the actual facet in the apachesolr_facets instance.
 * @param string $search_module
 *   A string representing which apachesolr module's facets we're going to 
 *   update. By default, this is apachesolr, but apachesolr_multisitesearch has
 *   a separate set of facets that must be enabled.
 * @return none
 */
function _drupalorg_update_enable_filters($filter_list, $search_module = 'apachesolr') {
  // Grab the existing enabled filters.
  $enabled_filters = variable_get($search_module . '_enabled_facets', array());  

  // Loop over the filter list, pull the definition (so we only need define the
  // module and name, not the actual facet field), and retrieve the facet_field
  // from the facet definition.
  foreach ($filter_list as $module => $filters) {
    $facets = module_invoke($module, $search_module . '_facets');
    foreach ($filters as $filter) {
      $enabled_filters[$module][$filter] = $facets[$filter]['facet_field'];
    }
  }

  // Store all of the enabled facets back.
  variable_set($search_module . '_enabled_facets', $enabled_filters);
}
